import { Category } from "../../../types/roadmap";

export const javascriptForReact: Category = {
  id: "javascript-for-react",
  name: "React Ä°Ã§in JavaScript",
  icon: "ğŸ“œ",
  description: "Modern React geliÅŸtirme iÃ§in temel JavaScript kavramlarÄ±",
  topics: [
    {
      id: "var-let-const",
      title: "Var, Let ve Const Keywords",
      description:
        "Modern JavaScript deÄŸiÅŸken tanÄ±mlama yÃ¶ntemleri ve React'te kullanÄ±mÄ±",
      content: `Var, Let ve Const Keywords

JavaScript'te deÄŸiÅŸken tanÄ±mlamak iÃ§in kullanÄ±lan Ã¼Ã§ farklÄ± yÃ¶ntem. Modern React geliÅŸtirmede hangi yÃ¶ntemi ne zaman kullanacaÄŸÄ±nÄ±zÄ± Ã¶ÄŸrenin.

Temel Farklar

var - Eski yÃ¶ntem, function scope kullanÄ±r ve hoisting Ã¶zelliÄŸi vardÄ±r. Modern JavaScript'te Ã¶nerilmez.

let - Modern yÃ¶ntem, block scope kullanÄ±r ve deÄŸiÅŸtirilebilir deÄŸiÅŸkenler iÃ§in idealdir.

const - Sabit deÄŸerler iÃ§in kullanÄ±lÄ±r, block scope kullanÄ±r ve deÄŸeri deÄŸiÅŸtirilemez.

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- const kullanÄ±n: ÃœrÃ¼n fiyatlarÄ±, kullanÄ±cÄ± rolleri, API endpoint'leri gibi deÄŸiÅŸmeyecek deÄŸerler iÃ§in
- let kullanÄ±n: Sepet tutarÄ±, kullanÄ±cÄ± giriÅŸ durumu, geÃ§ici hesaplamalar gibi deÄŸiÅŸebilir deÄŸerler iÃ§in
- var kullanmayÄ±n: Modern JavaScript'te artÄ±k kullanÄ±lmaz

React'te KullanÄ±m

React component'lerinde genellikle const kullanÄ±lÄ±r Ã§Ã¼nkÃ¼ component'ler genellikle yeniden oluÅŸturulur. State deÄŸiÅŸkenleri iÃ§in useState hook'u kullanÄ±lÄ±r.

Best Practices

1. Her zaman const ile baÅŸlayÄ±n
2. DeÄŸer deÄŸiÅŸmesi gerekiyorsa let'e geÃ§in
3. var kullanmayÄ±n
4. DeÄŸiÅŸken isimlerini anlamlÄ± yapÄ±n
5. Block scope'u doÄŸru kullanÄ±n`,
      codeExamples: [],
      relatedProjects: ["variable-practice", "react-state-management"],
      resources: [
        {
          id: "var-let-const-docs",
          title: "MDN - Var, Let, Const DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
          type: "documentation",
        },
        {
          id: "javascript-scope-guide",
          title: "JavaScript Scope KÄ±lavuzu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variable_scope",
          type: "article",
        },
        {
          id: "react-variables-patterns",
          title: "React'te DeÄŸiÅŸken KullanÄ±m Desenleri",
          url: "https://react.dev/learn/state-a-components-memory",
          type: "tutorial",
        },
      ],
    },
    {
      id: "arrow-functions",
      title: "Arrow Function",
      description:
        "Modern JavaScript arrow function kullanÄ±mÄ± ve React'te avantajlarÄ±",
      content: `Arrow Function

ES6 ile gelen modern JavaScript fonksiyon tanÄ±mlama yÃ¶ntemi. React geliÅŸtirmede neden tercih edildiÄŸini ve nasÄ±l kullanÄ±lacaÄŸÄ±nÄ± Ã¶ÄŸrenin.

Temel Ã–zellikler

KÄ±sa Syntax - Daha az kod yazarak aynÄ± iÅŸlevi gerÃ§ekleÅŸtirir
Lexical This Binding - this deÄŸerini otomatik olarak doÄŸru ÅŸekilde baÄŸlar
Implicit Return - Tek satÄ±rlÄ±k fonksiyonlarda return yazmaya gerek yok
React'te YaygÄ±n KullanÄ±m - Modern React geliÅŸtirmede standart

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir online alÄ±ÅŸveriÅŸ uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- ÃœrÃ¼n filtreleme: Arrow function ile kÄ±sa ve okunabilir filtreleme fonksiyonlarÄ±
- Event handler'lar: onClick, onChange gibi event'lerde temiz kod
- Array iÅŸlemleri: map, filter, reduce gibi array method'larÄ±nda kullanÄ±m
- API Ã§aÄŸrÄ±larÄ±: Promise chain'lerinde daha temiz kod

React'te KullanÄ±m AvantajlarÄ±

1. Event Handler'lar: onClick, onChange gibi event'lerde this binding sorunu yok
2. Array Method'larÄ±: map, filter gibi method'larda kÄ±sa ve okunabilir kod
3. Callback'ler: useEffect, useState gibi hook'larda temiz syntax
4. Component Method'larÄ±: Class component'lerde this sorununu Ã§Ã¶zer

Best Practices

1. Tek satÄ±rlÄ±k fonksiyonlarda implicit return kullanÄ±n
2. Event handler'larda arrow function tercih edin
3. Array method'larÄ±nda arrow function kullanÄ±n
4. Constructor'da arrow function kullanmayÄ±n
5. Object method'larÄ±nda dikkatli kullanÄ±n

Ne Zaman KullanÄ±lÄ±r

KullanÄ±n: Event handler'lar, array method'larÄ±, kÄ±sa fonksiyonlar, callback'ler
KullanmayÄ±n: Constructor'lar, object method'larÄ±, prototype method'larÄ±`,
      codeExamples: [],
      relatedProjects: ["arrow-function-practice", "react-event-handlers"],
      resources: [
        {
          id: "arrow-function-docs",
          title: "MDN - Arrow Function DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
          type: "documentation",
        },
        {
          id: "arrow-functions-guide",
          title: "Arrow Functions KÄ±lavuzu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#arrow_functions",
          type: "article",
        },
        {
          id: "react-arrow-functions",
          title: "React'te Arrow Function KullanÄ±mÄ±",
          url: "https://react.dev/learn/responding-to-events",
          type: "tutorial",
        },
      ],
    },
    {
      id: "export-import",
      title: "Export ve Import (Modules)",
      description: "JavaScript modÃ¼l sistemi ve React'te kod organizasyonu",
      content: `Export ve Import (Modules)

JavaScript modÃ¼l sistemi ile kod organizasyonu. Modern React projelerinde nasÄ±l dÃ¼zenli ve sÃ¼rdÃ¼rÃ¼lebilir kod yazacaÄŸÄ±nÄ±zÄ± Ã¶ÄŸrenin.

ModÃ¼l Sistemi

Export - ModÃ¼lden dÄ±ÅŸarÄ± Ã§Ä±karma, baÅŸka dosyalarda kullanÄ±labilir hale getirme
Import - ModÃ¼lÃ¼ iÃ§eri alma, baÅŸka dosyalardan fonksiyon ve deÄŸiÅŸkenleri kullanma
Default Export - VarsayÄ±lan Ã§Ä±karma, bir dosyadan tek bir ana deÄŸer Ã§Ä±karma
Named Export - Ä°simli Ã§Ä±karma, bir dosyadan birden fazla deÄŸer Ã§Ä±karma

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Button component'i: Default export ile ana component'i Ã§Ä±karÄ±n
- Utility fonksiyonlarÄ±: Named export ile fiyat hesaplama, format fonksiyonlarÄ±nÄ± Ã§Ä±karÄ±n
- Constants: Named export ile API URL'leri, renk kodlarÄ± gibi sabitleri Ã§Ä±karÄ±n
- Custom hook'lar: Default export ile tekrar kullanÄ±labilir hook'larÄ± Ã§Ä±karÄ±n

React'te KullanÄ±m

React projelerinde modÃ¼l sistemi Ã§ok Ã¶nemlidir:

- Component'ler: Her component ayrÄ± dosyada, default export ile Ã§Ä±karÄ±lÄ±r
- Utility fonksiyonlarÄ±: YardÄ±mcÄ± fonksiyonlar named export ile organize edilir
- Constants: Sabit deÄŸerler named export ile merkezi olarak yÃ¶netilir
- Custom hook'lar: Tekrar kullanÄ±labilir logic'ler default export ile Ã§Ä±karÄ±lÄ±r

Best Practices

1. Her component iÃ§in ayrÄ± dosya oluÅŸturun
2. Default export'u ana component iÃ§in kullanÄ±n
3. Named export'u yardÄ±mcÄ± fonksiyonlar iÃ§in kullanÄ±n
4. Dosya isimlerini component ismiyle aynÄ± yapÄ±n
5. Index dosyalarÄ± ile clean import'lar oluÅŸturun

Ne Zaman Hangi YÃ¶ntemi KullanÄ±n

Default Export: Ana component, custom hook, tek bir ana fonksiyon
Named Export: Birden fazla fonksiyon, constants, utility fonksiyonlarÄ±
Mixed Export: Hem ana component hem de yardÄ±mcÄ± fonksiyonlar varsa`,
      codeExamples: [],
      relatedProjects: ["module-practice", "react-component-organization"],
      resources: [
        {
          id: "modules-docs",
          title: "MDN - JavaScript ModÃ¼ller DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
          type: "documentation",
        },
        {
          id: "es6-modules-guide",
          title: "ES6 ModÃ¼ller KÄ±lavuzu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
          type: "article",
        },
        {
          id: "react-module-patterns",
          title: "React'te ModÃ¼l Organizasyonu",
          url: "https://react.dev/learn/importing-and-exporting-components",
          type: "tutorial",
        },
      ],
    },
    {
      id: "classes",
      title: "ClasslarÄ± Anlamak",
      description: "JavaScript class yapÄ±sÄ± ve modern React'te kullanÄ±mÄ±",
      content: `ClasslarÄ± Anlamak

JavaScript ES6 class yapÄ±sÄ± ve modern React geliÅŸtirmede neden functional component'lerin tercih edildiÄŸini Ã¶ÄŸrenin.

Class Ã–zellikleri

Constructor - YapÄ±cÄ± fonksiyon, sÄ±nÄ±f Ã¶rneÄŸi oluÅŸturulurken Ã§alÄ±ÅŸÄ±r
Methods - SÄ±nÄ±f metodlarÄ±, sÄ±nÄ±fÄ±n davranÄ±ÅŸlarÄ±nÄ± tanÄ±mlar
Inheritance - KalÄ±tÄ±m, bir sÄ±nÄ±fÄ±n baÅŸka sÄ±nÄ±ftan Ã¶zellik almasÄ±
this - SÄ±nÄ±f referansÄ±, sÄ±nÄ±fÄ±n kendisini iÅŸaret eder

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir oyun uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Oyuncu sÄ±nÄ±fÄ±: Constructor ile oyuncu bilgileri, method'larla hareket ve aksiyonlar
- DÃ¼ÅŸman sÄ±nÄ±fÄ±: Oyuncu sÄ±nÄ±fÄ±ndan kalÄ±tÄ±m alarak benzer Ã¶zellikler
- Power-up sÄ±nÄ±fÄ±: FarklÄ± gÃ¼Ã§lendirici Ã¶ÄŸeler iÃ§in ayrÄ± sÄ±nÄ±flar
- Oyun yÃ¶neticisi: TÃ¼m sÄ±nÄ±flarÄ± koordine eden ana sÄ±nÄ±f

Modern React'te KullanÄ±m

Modern React geliÅŸtirmede class component'ler artÄ±k Ã¶nerilmez:

- Functional component'ler daha basit ve anlaÅŸÄ±lÄ±r
- Hook'lar ile state yÃ¶netimi daha kolay
- Performance aÃ§Ä±sÄ±ndan daha iyi
- Kod daha az ve temiz

Ne Zaman Class KullanÄ±lÄ±r

Class component'ler sadece ÅŸu durumlarda kullanÄ±lÄ±r:
- Legacy projelerde mevcut kod
- Error boundary'ler iÃ§in
- Ã‡ok Ã¶zel durumlar iÃ§in

Best Practices

1. Yeni projelerde functional component kullanÄ±n
2. Class component'leri functional'a Ã§evirin
3. Hook'lar ile state yÃ¶netimi yapÄ±n
4. Class syntax'Ä±nÄ± anlayÄ±n ama kullanmayÄ±n
5. Modern JavaScript Ã¶zelliklerini tercih edin`,
      codeExamples: [],
      relatedProjects: ["class-practice", "functional-components"],
      resources: [
        {
          id: "classes-docs",
          title: "MDN - JavaScript Class DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
          type: "documentation",
        },
        {
          id: "class-vs-functional",
          title: "Class vs Functional Component KarÅŸÄ±laÅŸtÄ±rmasÄ±",
          url: "https://react.dev/learn/your-first-component",
          type: "article",
        },
        {
          id: "modern-react-patterns",
          title: "Modern React GeliÅŸtirme Desenleri",
          url: "https://react.dev/learn/thinking-in-react",
          type: "tutorial",
        },
      ],
    },
    {
      id: "spread-rest",
      title: "Spread ve Rest OperatÃ¶rleri",
      description:
        "JavaScript spread ve rest operatÃ¶rleri ve React'te kullanÄ±mÄ±",
      content: `Spread ve Rest OperatÃ¶rleri

JavaScript'te veri manipÃ¼lasyonu iÃ§in gÃ¼Ã§lÃ¼ operatÃ¶rler. Modern React geliÅŸtirmede props geÃ§me, state gÃ¼ncelleme ve array/object iÅŸlemlerinde nasÄ±l kullanÄ±lacaÄŸÄ±nÄ± Ã¶ÄŸrenin.

Spread OperatÃ¶rÃ¼

Array'lerde - Array'leri birleÅŸtirme, kopyalama ve yeni array oluÅŸturma
Object'lerde - Object'leri birleÅŸtirme, kopyalama ve yeni object oluÅŸturma
Fonksiyon Ã§aÄŸrÄ±larÄ±nda - Array elemanlarÄ±nÄ± ayrÄ± parametreler olarak geÃ§me
React'te - Props geÃ§me, state gÃ¼ncelleme, array/object manipÃ¼lasyonu

Rest OperatÃ¶rÃ¼

Fonksiyon parametrelerinde - SÄ±nÄ±rsÄ±z sayÄ±da parametre alma
Destructuring'de - Kalan elemanlarÄ± toplama
Array/object iÅŸlemlerinde - Belirli elemanlarÄ± ayÄ±rma

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir sosyal medya uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- KullanÄ±cÄ± profili: Spread ile mevcut bilgileri koruyarak yeni bilgiler ekleme
- Post listesi: Rest ile belirli post'larÄ± ayÄ±rÄ±p kalanlarÄ± gÃ¶sterme
- Yorum sistemi: Spread ile yeni yorumlarÄ± mevcut listeye ekleme
- Bildirimler: Rest ile okunmamÄ±ÅŸ bildirimleri ayÄ±rma

React'te KullanÄ±m

Modern React geliÅŸtirmede Ã§ok Ã¶nemlidir:

- Props geÃ§me: Spread ile tÃ¼m props'larÄ± component'e geÃ§me
- State gÃ¼ncelleme: Spread ile immutable state gÃ¼ncellemeleri
- Array iÅŸlemleri: Spread ile yeni array'ler oluÅŸturma
- Object iÅŸlemleri: Spread ile yeni object'ler oluÅŸturma

Best Practices

1. State gÃ¼ncellemelerinde spread kullanÄ±n
2. Props geÃ§erken spread kullanÄ±n
3. Array/object kopyalarken spread kullanÄ±n
4. Rest ile gereksiz parametreleri toplayÄ±n
5. Immutable updates iÃ§in spread kullanÄ±n

Ne Zaman KullanÄ±lÄ±r

Spread: Array/object birleÅŸtirme, kopyalama, props geÃ§me
Rest: SÄ±nÄ±rsÄ±z parametre alma, destructuring, kalan elemanlarÄ± toplama`,
      codeExamples: [],
      relatedProjects: ["spread-rest-practice", "react-props-patterns"],
      resources: [
        {
          id: "spread-rest-docs",
          title: "MDN - Spread/Rest DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
          type: "documentation",
        },
        {
          id: "react-spread-patterns",
          title: "React'te Spread KullanÄ±m Desenleri",
          url: "https://react.dev/learn/passing-props-to-a-component",
          type: "article",
        },
        {
          id: "immutable-updates",
          title: "Immutable State GÃ¼ncellemeleri",
          url: "https://react.dev/learn/updating-objects-in-state",
          type: "tutorial",
        },
      ],
    },
    {
      id: "destructuring",
      title: "Destructuring",
      description: "JavaScript destructuring yapÄ±sÄ± ve React'te kullanÄ±mÄ±",
      content: `Destructuring

JavaScript'te veri yapÄ±larÄ±ndan deÄŸer Ã§Ä±karma yÃ¶ntemi. Modern React geliÅŸtirmede props, state ve array/object iÅŸlemlerinde nasÄ±l kullanÄ±lacaÄŸÄ±nÄ± Ã¶ÄŸrenin.

Destructuring TÃ¼rleri

Array Destructuring - Array elemanlarÄ±nÄ± ayrÄ± deÄŸiÅŸkenlere atama
Object Destructuring - Object Ã¶zelliklerini ayrÄ± deÄŸiÅŸkenlere atama
Nested Destructuring - Ä°Ã§ iÃ§e yapÄ±lardan deÄŸer Ã§Ä±karma
Default Values - VarsayÄ±lan deÄŸerler atama
Rest Destructuring - Kalan elemanlarÄ± toplama

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- ÃœrÃ¼n bilgileri: Object destructuring ile Ã¼rÃ¼n Ã¶zelliklerini ayrÄ± deÄŸiÅŸkenlere atama
- SipariÅŸ listesi: Array destructuring ile ilk Ã¼Ã§ Ã¼rÃ¼nÃ¼ ayrÄ± deÄŸiÅŸkenlere atama
- KullanÄ±cÄ± profili: Nested destructuring ile iÃ§ iÃ§e kullanÄ±cÄ± bilgilerini Ã§Ä±karma
- API yanÄ±tlarÄ±: Destructuring ile API'den gelen verileri organize etme

React'te KullanÄ±m

Modern React geliÅŸtirmede Ã§ok Ã¶nemlidir:

- Props destructuring: Component props'larÄ±nÄ± ayrÄ± deÄŸiÅŸkenlere atama
- State destructuring: useState hook'undan gelen deÄŸerleri ayrÄ± deÄŸiÅŸkenlere atama
- Array destructuring: useState ile array state'ini yÃ¶netme
- Object destructuring: useState ile object state'ini yÃ¶netme

Best Practices

1. Props'larÄ± destructure edin
2. State'i destructure edin
3. Default values kullanÄ±n
4. Nested destructuring'i dikkatli kullanÄ±n
5. Rest destructuring ile kalan elemanlarÄ± toplayÄ±n

Ne Zaman KullanÄ±lÄ±r

Array Destructuring: useState, array iÅŸlemleri, API yanÄ±tlarÄ±
Object Destructuring: Props, state, API yanÄ±tlarÄ±, configuration
Nested Destructuring: KarmaÅŸÄ±k veri yapÄ±larÄ±, API yanÄ±tlarÄ±
Default Values: Opsiyonel props, API yanÄ±tlarÄ±`,
      codeExamples: [],
      relatedProjects: ["destructuring-practice", "react-props-destructuring"],
      resources: [
        {
          id: "destructuring-docs",
          title: "MDN - Destructuring DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
          type: "documentation",
        },
        {
          id: "react-destructuring-patterns",
          title: "React'te Destructuring Desenleri",
          url: "https://react.dev/learn/passing-props-to-a-component",
          type: "article",
        },
        {
          id: "javascript-destructuring-guide",
          title: "JavaScript Destructuring KÄ±lavuzu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
          type: "tutorial",
        },
      ],
    },
    {
      id: "reference-primitive",
      title: "Reference ve Primitive Tipler",
      description: "JavaScript veri tipleri ve React'te state yÃ¶netimi",
      content: `Reference ve Primitive Tipler

JavaScript'te veri tipleri ve bellek yÃ¶netimi. Modern React geliÅŸtirmede state gÃ¼ncellemelerinde neden dikkat edilmesi gerektiÄŸini Ã¶ÄŸrenin.

Primitive Tipler

string - Metin verileri
number - SayÄ±sal veriler
boolean - DoÄŸru/yanlÄ±ÅŸ deÄŸerleri
undefined - TanÄ±msÄ±z deÄŸerler
null - BoÅŸ deÄŸerler
symbol - Benzersiz deÄŸerler

Reference Tipler

Object - Nesne verileri
Array - Dizi verileri
Function - Fonksiyon verileri

Farklar

Primitive - DeÄŸer kopyalama, her deÄŸiÅŸken kendi deÄŸerine sahip
Reference - Referans kopyalama, tÃ¼m deÄŸiÅŸkenler aynÄ± bellek adresini iÅŸaret eder

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- KullanÄ±cÄ± adÄ±: Primitive (string) - her kullanÄ±cÄ±nÄ±n kendi adÄ±
- Post sayÄ±sÄ±: Primitive (number) - her kullanÄ±cÄ±nÄ±n kendi sayÄ±sÄ±
- KullanÄ±cÄ± profili: Reference (object) - tÃ¼m referanslar aynÄ± profili iÅŸaret eder
- Post listesi: Reference (array) - tÃ¼m referanslar aynÄ± listeyi iÅŸaret eder

React'te KullanÄ±m

Modern React geliÅŸtirmede Ã§ok Ã¶nemlidir:

- State gÃ¼ncellemeleri: Reference tiplerde dikkatli olun
- Immutable updates: Spread operatÃ¶rÃ¼ ile yeni referanslar oluÅŸturun
- Performance: Gereksiz re-render'larÄ± Ã¶nleyin
- Bug prevention: Beklenmeyen deÄŸiÅŸiklikleri Ã¶nleyin

Best Practices

1. State gÃ¼ncellemelerinde spread kullanÄ±n
2. Reference tipleri dikkatli kopyalayÄ±n
3. Immutable updates yapÄ±n
4. Shallow comparison'larÄ± anlayÄ±n
5. useCallback ve useMemo kullanÄ±n

Ne Zaman Dikkat Edilmeli

Primitive: GÃ¼venli, deÄŸer kopyalama
Reference: Dikkatli, referans kopyalama
State Updates: Her zaman yeni referans oluÅŸturun
Props: Reference tipleri dikkatli geÃ§in`,
      codeExamples: [],
      relatedProjects: ["types-practice", "react-state-management"],
      resources: [
        {
          id: "types-docs",
          title: "MDN - JavaScript Tipler DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",
          type: "documentation",
        },
        {
          id: "react-state-updates",
          title: "React State GÃ¼ncellemeleri",
          url: "https://react.dev/learn/updating-objects-in-state",
          type: "article",
        },
        {
          id: "immutable-patterns",
          title: "Immutable State Desenleri",
          url: "https://react.dev/learn/updating-arrays-in-state",
          type: "tutorial",
        },
      ],
    },
    {
      id: "console-usage",
      title: "Console KullanÄ±mÄ± ve Debugging",
      description:
        "JavaScript console metodlarÄ± ve React geliÅŸtirmede debugging",
      content: `Console KullanÄ±mÄ± ve Debugging

JavaScript console metodlarÄ± ve React geliÅŸtirmede debugging tekniklerini Ã¶ÄŸrenelim. Modern React geliÅŸtirmede console kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Console Nedir?

Browser Developer Tools - Browser'Ä±n geliÅŸtirici araÃ§larÄ±, debugging iÃ§in kullanÄ±lÄ±r, JavaScript kodunu test etmek iÃ§in, development sÄ±rasÄ±nda bilgi almak iÃ§in
KullanÄ±m AmacÄ± - Debugging, logging, testing, development, performance monitoring

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- console.log: KullanÄ±cÄ± sepete Ã¼rÃ¼n eklediÄŸinde log yazma
- console.error: API isteÄŸi baÅŸarÄ±sÄ±z olduÄŸunda hata loglama
- console.warn: KullanÄ±cÄ± geÃ§ersiz veri girdiÄŸinde uyarÄ±
- console.table: ÃœrÃ¼n listesini tablo formatÄ±nda gÃ¶sterme

Temel Console MetodlarÄ±

1. console.log() - Genel bilgi loglama, debug mesajlarÄ±, deÄŸiÅŸken deÄŸerleri, development bilgileri
2. console.error() - Hata mesajlarÄ±, exception handling, critical errors, user feedback
3. console.warn() - UyarÄ± mesajlarÄ±, deprecated features, potential issues, development warnings
4. console.info() - Bilgi mesajlarÄ±, general information, status updates, system messages

GeliÅŸmiÅŸ Console MetodlarÄ±

1. console.table() - Array ve object'leri tablo formatÄ±nda gÃ¶sterme, data visualization, debugging complex data
2. console.group() - Log'larÄ± gruplama, organized debugging, hierarchical information, clean output
3. console.time() - Performance measurement, execution time tracking, optimization, benchmarking
4. console.trace() - Call stack tracking, function call history, debugging flow, error tracing

React'te Console KullanÄ±mÄ±

1. Component Lifecycle - Component mount/unmount tracking, render cycle monitoring, state changes
2. State Debugging - State deÄŸiÅŸikliklerini takip etme, props changes, hook dependencies
3. API Debugging - Request/response logging, error tracking, performance monitoring
4. User Interaction - Event handling, form submissions, navigation tracking

Console Best Practices

1. Development vs Production - Development'ta detaylÄ± loglar, production'da minimal logging, environment-based logging
2. Log Levels - Error, warn, info, debug seviyeleri, appropriate usage, consistent logging
3. Performance - Console.log performance impact, production optimization, logging overhead
4. Security - Sensitive data logging, user information protection, data privacy

Modern React GeliÅŸtirmede

Console Debugging - Console debugging
Development Tools - Development araÃ§larÄ±
Error Tracking - Hata takibi
Performance Monitoring - Performance monitoring
User Experience - KullanÄ±cÄ± deneyimi

Best Practices

1. Development'ta detaylÄ± loglar kullanÄ±n
2. Production'da minimal logging yapÄ±n
3. Sensitive data loglamayÄ±n
4. Performance'Ä± dikkate alÄ±n
5. Consistent logging yapÄ±n

Ne Zaman Console KullanÄ±n

Debugging yaparken
Development sÄ±rasÄ±nda
Error tracking yaparken
Performance monitoring yaparken
User interaction tracking yaparken`,
      codeExamples: [],
      relatedProjects: [
        "console-debugging",
        "react-debugging",
        "console-usage-patterns",
      ],
      resources: [
        {
          id: "console-docs",
          title: "MDN - Console API DokÃ¼mantasyonu",
          url: "https://developer.mozilla.org/en-US/docs/Web/API/Console",
          type: "documentation",
        },
        {
          id: "console-guide",
          title: "Console KullanÄ±m KÄ±lavuzu",
          url: "https://developer.mozilla.org/en-US/docs/Web/API/Console",
          type: "tutorial",
        },
        {
          id: "react-debugging",
          title: "React Debugging Teknikleri",
          url: "https://react.dev/learn/react-developer-tools",
          type: "article",
        },
      ],
    },
  ],
};
