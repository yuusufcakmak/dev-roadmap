import { Category } from '../../../types/roadmap';

export const keysAndConditional: Category = {
  id: 'keys-and-conditional',
  name: 'REACT KEYS VE CONDITIONAL CONTENT',
  icon: 'ğŸ”‘',
  description: 'React listelerinde key kullanÄ±mÄ± ve koÅŸullu iÃ§erik',
  topics: [
    {
      id: 'javascript-map-method',
      title: 'JavaScript Map Metodunu Ä°yi Anlamak',
      description: 'JavaScript map metodunun React\'te kullanÄ±mÄ±',
      content: `JavaScript Map Metodunu Ä°yi Anlamak

JavaScript map metodu, React'te listeleri render etmek iÃ§in kritik Ã¶neme sahiptir. Modern React geliÅŸtirmede map metodu kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Map Metodu Nedir?

Array Method - Array Ã¼zerinde dÃ¶ngÃ¼ yapar
Yeni Array - Orijinal array'i deÄŸiÅŸtirmez
Transform - Her elemanÄ± dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r
Return - Yeni array dÃ¶ndÃ¼rÃ¼r

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- ÃœrÃ¼n listesi: map ile Ã¼rÃ¼n verilerini JSX elementlerine dÃ¶nÃ¼ÅŸtÃ¼rme
- KullanÄ±cÄ± listesi: map ile kullanÄ±cÄ± verilerini kartlara dÃ¶nÃ¼ÅŸtÃ¼rme
- Yorum listesi: map ile yorum verilerini yorum kartlarÄ±na dÃ¶nÃ¼ÅŸtÃ¼rme
- Kategori listesi: map ile kategori verilerini butonlara dÃ¶nÃ¼ÅŸtÃ¼rme

React'te KullanÄ±mÄ±

Liste Render Etme - Array'deki verileri JSX elementlerine dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r
Key Prop - Her element iÃ§in benzersiz key saÄŸlar
Conditional Rendering - Map iÃ§inde koÅŸullu render yapabilirsiniz

Modern React GeliÅŸtirmede

Performance Optimization - Gereksiz re-render'larÄ± Ã¶nleme
Key Prop - Her liste elemanÄ± iÃ§in unique key kullanma
Conditional Rendering - KoÅŸullu liste render etme
Data Transformation - Veri dÃ¶nÃ¼ÅŸÃ¼mÃ¼ ve filtreleme
Error Handling - Liste render hatalarÄ±nÄ± yÃ¶netme

Best Practices

1. Her zaman key prop kullanÄ±n
2. Key'ler benzersiz olmalÄ±
3. Index'i key olarak kullanmaktan kaÃ§Ä±nÄ±n
4. Stable key'ler kullanÄ±n
5. Performance'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun

Ne Zaman Map Metodu KullanÄ±n

Liste render etmede
Veri dÃ¶nÃ¼ÅŸÃ¼mÃ¼nde
Array manipÃ¼lasyonunda
Conditional rendering'de
Data filtering'de`,
      codeExamples: [],
      relatedProjects: ['todo-list', 'user-list', 'list-rendering'],
      resources: [
        {
          id: 'javascript-map-docs',
          title: 'MDN - JavaScript Map Metodu DokÃ¼mantasyonu',
          url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map',
          type: 'documentation'
        },
        {
          id: 'react-list-rendering',
          title: 'React Liste Rendering KÄ±lavuzu',
          url: 'https://react.dev/learn/rendering-lists',
          type: 'tutorial'
        },
        {
          id: 'array-methods-react',
          title: 'React\'te Array MetodlarÄ±',
          url: 'https://react.dev/learn/rendering-lists',
          type: 'article'
        }
      ]
    },
    {
      id: 'react-key-prop',
      title: 'React Key Ã–zelliÄŸi',
      description: 'React listelerinde key prop kullanÄ±mÄ±',
      content: `React Key Ã–zelliÄŸi

React'te listelerde key prop kullanÄ±mÄ± performans ve doÄŸru render iÃ§in kritiktir. Modern React geliÅŸtirmede key prop kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Key Nedir?

Benzersiz TanÄ±mlayÄ±cÄ± - Her element iÃ§in benzersiz ID
React Optimizasyonu - Hangi elementlerin deÄŸiÅŸtiÄŸini bilir
Re-render Optimizasyonu - Gereksiz re-render'larÄ± Ã¶nler
State KorunmasÄ± - Component state'ini korur

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Post listesi: Her post iÃ§in unique ID key kullanma
- Yorum listesi: Her yorum iÃ§in unique ID key kullanma
- Kategori listesi: Her kategori iÃ§in unique ID key kullanma
- Tag listesi: Her tag iÃ§in unique ID key kullanma

Key KullanÄ±m KurallarÄ±

DoÄŸru Key KullanÄ±mÄ± - Benzersiz olmalÄ±, stable olmalÄ± (deÄŸiÅŸmemeli), predictable olmalÄ±
YanlÄ±ÅŸ Key KullanÄ±mÄ± - Index kullanmak (liste deÄŸiÅŸirse sorun), random deÄŸerler, duplicate key'ler

Modern React GeliÅŸtirmede

Performance Optimization - Gereksiz re-render'larÄ± Ã¶nleme
State Preservation - Component state'ini koruma
Virtual DOM Optimization - Virtual DOM diffing optimizasyonu
Memory Management - Bellek yÃ¶netimi ve garbage collection
Error Prevention - Render hatalarÄ±nÄ± Ã¶nleme

Best Practices

1. Key prop'u en dÄ±ÅŸtaki element'e verin
2. Key'ler sadece aynÄ± seviyedeki elementler iÃ§in benzersiz olmalÄ±
3. Key deÄŸiÅŸirse component yeniden mount edilir
4. Stable key'ler kullanÄ±n
5. Performance'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun

Ne Zaman Key KullanÄ±n

Liste render etmede
Dynamic listelerde
Conditional rendering'de
State preservation'da
Performance optimization'da`,
      codeExamples: [],
      relatedProjects: ['dynamic-list', 'sortable-list', 'key-optimization'],
      resources: [
        {
          id: 'react-key-docs',
          title: 'React.dev - React Key DokÃ¼mantasyonu',
          url: 'https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key',
          type: 'documentation'
        },
        {
          id: 'react-keys-guide',
          title: 'React Keys KÄ±lavuzu',
          url: 'https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key',
          type: 'tutorial'
        },
        {
          id: 'key-best-practices',
          title: 'React Key Best Practices',
          url: 'https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key',
          type: 'article'
        }
      ]
    },
    {
      id: 'react-conditional-content',
      title: 'React Conditional Content',
      description: 'React\'te koÅŸullu iÃ§erik render etme',
      content: `React Conditional Content

React'te koÅŸullu iÃ§erik render etmek iÃ§in birkaÃ§ yÃ¶ntem vardÄ±r. Modern React geliÅŸtirmede conditional rendering ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

KoÅŸullu Render YÃ¶ntemleri

1. if/else Statement - Component seviyesinde koÅŸullu render
2. Ternary Operator - Tek satÄ±rda koÅŸullu render
3. Logical AND (&&) - KoÅŸul true ise render et
4. Switch Statement - Ã‡oklu koÅŸullar iÃ§in

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Loading state: Veri yÃ¼klenirken loading spinner gÃ¶sterimi
- Error message: Hata durumunda error message gÃ¶sterimi
- User authentication: GiriÅŸ yapmÄ±ÅŸ kullanÄ±cÄ± iÃ§in farklÄ± iÃ§erik
- Feature toggle: Ã–zellik aÃ§Ä±k/kapalÄ± durumuna gÃ¶re iÃ§erik

Modern React GeliÅŸtirmede

Performance Optimization - Gereksiz re-render'larÄ± Ã¶nleme
State Management - State'e gÃ¶re koÅŸullu render
Component Composition - Component'leri koÅŸullu birleÅŸtirme
Error Boundaries - Hata durumlarÄ±nÄ± yÃ¶netme
Accessibility - EriÅŸilebilirlik standartlarÄ±

Best Practices

1. Falsy deÄŸerlere dikkat edin (0, false, null)
2. Ternary operator daha okunabilir
3. Complex koÅŸullar iÃ§in ayrÄ± fonksiyon yazÄ±n
4. Performance'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun
5. Accessibility standartlarÄ±na uyun

Ne Zaman Conditional Content KullanÄ±n

Loading state'lerde
Error handling'de
User authentication'da
Feature toggle'larda
Dynamic content'te`,
      codeExamples: [],
      relatedProjects: ['conditional-ui', 'loading-states', 'dynamic-content'],
      resources: [
        {
          id: 'conditional-content-docs',
          title: 'React.dev - Conditional Content DokÃ¼mantasyonu',
          url: 'https://react.dev/learn/conditional-rendering',
          type: 'documentation'
        },
        {
          id: 'conditional-rendering-guide',
          title: 'React Conditional Rendering KÄ±lavuzu',
          url: 'https://react.dev/learn/conditional-rendering',
          type: 'tutorial'
        },
        {
          id: 'conditional-patterns',
          title: 'React Conditional Patterns',
          url: 'https://react.dev/learn/conditional-rendering',
          type: 'article'
        }
      ]
    }
  ]
};
