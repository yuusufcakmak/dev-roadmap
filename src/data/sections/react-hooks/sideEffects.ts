import { Category } from '../../../types/roadmap';

export const sideEffects: Category = {
  id: 'side-effects',
  name: 'SIDE EFFECTS KULLANIMI',
  icon: 'ğŸ”„',
  description: 'React\'te side effects ve useEffect hook kullanÄ±mÄ±',
  topics: [
    {
      id: 'side-effects-concept',
      title: 'Side Effects Nedir?',
      description: 'React\'te side effects kavramÄ± ve kullanÄ±mÄ±',
      content: `Side Effects Nedir?

Side effects, component'in render dÃ¶ngÃ¼sÃ¼ dÄ±ÅŸÄ±nda gerÃ§ekleÅŸen iÅŸlemlerdir. Modern React geliÅŸtirmede side effects kavramÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Side Effects Nedir?

Render DÄ±ÅŸÄ± Ä°ÅŸlemler - Component render'Ä±ndan baÄŸÄ±msÄ±z iÅŸlemler
DÄ±ÅŸ DÃ¼nya EtkileÅŸimi - API Ã§aÄŸrÄ±larÄ±, DOM manipÃ¼lasyonu
ZamanlayÄ±cÄ±lar - setTimeout, setInterval
Event Listener'lar - Window event'leri

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- API Ã§aÄŸrÄ±larÄ±: Blog postlarÄ±nÄ± sunucudan Ã§ekme
- DOM manipÃ¼lasyonu: Sayfa baÅŸlÄ±ÄŸÄ±nÄ± gÃ¼ncelleme
- ZamanlayÄ±cÄ±lar: Otomatik kaydetme iÅŸlemi
- Event listener'lar: Klavye kÄ±sayollarÄ±

Side Effects TÃ¼rleri

1. API Ã‡aÄŸrÄ±larÄ± - Veri Ã§ekme, veri gÃ¶nderme, veri gÃ¼ncelleme
2. DOM ManipÃ¼lasyonu - Document title deÄŸiÅŸtirme, scroll pozisyonu, focus yÃ¶netimi
3. Subscription'lar - WebSocket baÄŸlantÄ±larÄ±, event listener'lar, timer'lar

Modern React GeliÅŸtirmede

useEffect Hook - Side effects yÃ¶netimi
Cleanup Functions - Memory leak'leri Ã¶nleme
Dependency Arrays - Effect'lerin ne zaman Ã§alÄ±ÅŸacaÄŸÄ±nÄ± kontrol etme
Custom Hooks - Side effects logic'ini paylaÅŸma
Error Handling - Side effects hatalarÄ±nÄ± yÃ¶netme

Best Practices

1. Side effects render sÄ±rasÄ±nda yapÄ±lmamalÄ±
2. useEffect hook'u kullanÄ±lmalÄ±
3. Cleanup iÅŸlemleri unutulmamalÄ±
4. Memory leak'lerden kaÃ§Ä±nÄ±n
5. Error handling ekleyin

Ne Zaman Side Effects KullanÄ±n

API Ã§aÄŸrÄ±larÄ±nda
DOM manipÃ¼lasyonunda
ZamanlayÄ±cÄ±larda
Event listener'larda
Subscription'larda`,
      codeExamples: [],
      relatedProjects: ['api-integration', 'timer-app', 'side-effects-management'],
      resources: [
        {
          id: 'side-effects-docs',
          title: 'React.dev - Side Effects DokÃ¼mantasyonu',
          url: 'https://react.dev/learn/synchronizing-with-effects',
          type: 'documentation'
        },
        {
          id: 'side-effects-guide',
          title: 'React Side Effects KÄ±lavuzu',
          url: 'https://react.dev/learn/synchronizing-with-effects',
          type: 'tutorial'
        },
        {
          id: 'side-effects-patterns',
          title: 'React Side Effects Desenleri',
          url: 'https://react.dev/learn/synchronizing-with-effects',
          type: 'article'
        }
      ]
    },
    {
      id: 'useeffect-hook',
      title: 'useEffect Nedir?',
      description: 'useEffect hook ile side effects yÃ¶netimi',
      content: `useEffect Nedir?

useEffect, React'te side effects yÃ¶netimi iÃ§in kullanÄ±lan hook'tur. Modern React geliÅŸtirmede useEffect hook kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

useEffect Nedir?

Side Effects Hook - Side effects yÃ¶netimi iÃ§in
Lifecycle - Component lifecycle'Ä±nÄ± yÃ¶netir
Dependencies - BaÄŸÄ±mlÄ±lÄ±k array'i ile kontrol edilir
Cleanup - Temizlik iÅŸlemleri yapabilir

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Component mount: Blog postlarÄ±nÄ± API'den Ã§ekme
- State deÄŸiÅŸikliÄŸi: Arama terimi deÄŸiÅŸtiÄŸinde filtreleme
- Component unmount: Event listener'larÄ± temizleme
- Dependency deÄŸiÅŸikliÄŸi: KullanÄ±cÄ± ID deÄŸiÅŸtiÄŸinde profil gÃ¼ncelleme

useEffect Syntax

useEffect(() => {
  // Side effect kodlarÄ±
  return () => {
    // Cleanup kodlarÄ±
  };
}, [dependencies]);

Modern React GeliÅŸtirmede

Dependency Arrays - Effect'lerin ne zaman Ã§alÄ±ÅŸacaÄŸÄ±nÄ± kontrol etme
Cleanup Functions - Memory leak'leri Ã¶nleme
Custom Hooks - useEffect logic'ini paylaÅŸma
Error Handling - Effect hatalarÄ±nÄ± yÃ¶netme
Performance Optimization - Gereksiz effect'leri Ã¶nleme

Best Practices

1. Her render'da Ã§alÄ±ÅŸabilir
2. Dependencies array'i Ã¶nemli
3. Cleanup fonksiyonu optional
4. Memory leak'lerden kaÃ§Ä±nÄ±n
5. Error handling ekleyin

Ne Zaman useEffect KullanÄ±n

API Ã§aÄŸrÄ±larÄ±nda
DOM manipÃ¼lasyonunda
Subscription'larda
Timer'larda
Event listener'larda`,
      codeExamples: [],
      relatedProjects: ['data-fetching', 'timer-app', 'useeffect-patterns'],
      resources: [
        {
          id: 'useeffect-docs',
          title: 'React.dev - useEffect DokÃ¼mantasyonu',
          url: 'https://react.dev/reference/react/useEffect',
          type: 'documentation'
        },
        {
          id: 'useeffect-guide',
          title: 'useEffect Hook KÄ±lavuzu',
          url: 'https://react.dev/reference/react/useEffect',
          type: 'tutorial'
        },
        {
          id: 'useeffect-patterns',
          title: 'useEffect Hook Desenleri',
          url: 'https://react.dev/reference/react/useEffect',
          type: 'article'
        }
      ]
    },
    {
      id: 'useeffect-dependencies',
      title: 'useEffect ve Dependencies',
      description: 'useEffect dependency array kullanÄ±mÄ±',
      content: `useEffect ve Dependencies

useEffect dependency array'i, hook'un ne zaman Ã§alÄ±ÅŸacaÄŸÄ±nÄ± kontrol eder. Modern React geliÅŸtirmede dependency array kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Dependency Array Nedir?

Kontrol MekanizmasÄ± - Hook'un ne zaman Ã§alÄ±ÅŸacaÄŸÄ±nÄ± belirler
Optimizasyon - Gereksiz Ã§alÄ±ÅŸmalarÄ± Ã¶nler
BaÄŸÄ±mlÄ±lÄ±k - Effect'in hangi deÄŸerlere baÄŸÄ±mlÄ± olduÄŸunu gÃ¶sterir

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- BoÅŸ array: Component mount'ta blog postlarÄ±nÄ± Ã§ekme
- DeÄŸerler iÃ§eren array: Arama terimi deÄŸiÅŸtiÄŸinde filtreleme
- Array yok: Her render'da sayfa baÅŸlÄ±ÄŸÄ±nÄ± gÃ¼ncelleme
- Dependency deÄŸiÅŸikliÄŸi: KullanÄ±cÄ± ID deÄŸiÅŸtiÄŸinde profil gÃ¼ncelleme

Dependency Array TÃ¼rleri

1. BoÅŸ Array [] - Sadece mount'ta Ã§alÄ±ÅŸÄ±r, unmount'ta cleanup yapar, component lifecycle yÃ¶netimi
2. DeÄŸerler Ä°Ã§eren Array [value1, value2] - Belirtilen deÄŸerler deÄŸiÅŸtiÄŸinde Ã§alÄ±ÅŸÄ±r, selective re-execution, performance optimization
3. Array Yok - Her render'da Ã§alÄ±ÅŸÄ±r, dikkatli kullanÄ±lmalÄ±, infinite loop riski

Modern React GeliÅŸtirmede

ESLint Rules - useEffect exhaustive-deps kuralÄ±
Performance Optimization - Gereksiz effect'leri Ã¶nleme
Memory Management - Memory leak'leri Ã¶nleme
Custom Hooks - Dependency logic'ini paylaÅŸma
Error Handling - Dependency hatalarÄ±nÄ± yÃ¶netme

Best Practices

1. Dependencies'i doÄŸru belirleyin
2. Missing dependencies warning'lerini dikkate alÄ±n
3. Object ve function dependencies'te dikkatli olun
4. ESLint kurallarÄ±na uyun
5. Performance'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun

Ne Zaman Dependency Array KullanÄ±n

API Ã§aÄŸrÄ±larÄ±nda
State deÄŸiÅŸikliklerinde
Props deÄŸiÅŸikliklerinde
Timer'larda
Event listener'larda`,
      codeExamples: [],
      relatedProjects: ['optimized-effects', 'dependency-management', 'useeffect-optimization'],
      resources: [
        {
          id: 'useeffect-dependencies-docs',
          title: 'React.dev - useEffect Dependencies DokÃ¼mantasyonu',
          url: 'https://react.dev/reference/react/useEffect#specifying-reactive-dependencies',
          type: 'documentation'
        },
        {
          id: 'dependency-array-guide',
          title: 'useEffect Dependency Array KÄ±lavuzu',
          url: 'https://react.dev/reference/react/useEffect#specifying-reactive-dependencies',
          type: 'tutorial'
        },
        {
          id: 'dependency-optimization',
          title: 'useEffect Dependency Optimizasyonu',
          url: 'https://react.dev/reference/react/useEffect#specifying-reactive-dependencies',
          type: 'article'
        }
      ]
    },
    {
      id: 'useeffect-cleanup',
      title: 'useEffect Cleanup Fonksiyonu KullanÄ±mÄ±',
      description: 'useEffect cleanup fonksiyonu ile temizlik iÅŸlemleri',
      content: `useEffect Cleanup Fonksiyonu KullanÄ±mÄ±

useEffect cleanup fonksiyonu, side effects'lerin temizlenmesi iÃ§in kullanÄ±lÄ±r. Modern React geliÅŸtirmede cleanup fonksiyonu kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Cleanup Nedir?

Temizlik Ä°ÅŸlemi - Side effect'lerin geri alÄ±nmasÄ±
Memory Leak Ã–nleme - Bellek sÄ±zÄ±ntÄ±larÄ±nÄ± Ã¶nler
Resource Management - KaynaklarÄ± serbest bÄ±rakÄ±r
Event Listener TemizliÄŸi - Event listener'larÄ± kaldÄ±rÄ±r

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Timer'lar: Otomatik kaydetme timer'Ä±nÄ± temizleme
- Event listener'lar: Klavye kÄ±sayollarÄ± event listener'larÄ±nÄ± kaldÄ±rma
- Subscription'lar: WebSocket baÄŸlantÄ±sÄ±nÄ± kapatma
- API Ã§aÄŸrÄ±larÄ±: Devam eden API Ã§aÄŸrÄ±larÄ±nÄ± iptal etme

Cleanup KullanÄ±m SenaryolarÄ±

1. Timer'lar - setTimeout temizliÄŸi, setInterval temizliÄŸi, clearTimeout, clearInterval
2. Event Listener'lar - Window event'leri, document event'leri, custom event'ler
3. Subscription'lar - WebSocket baÄŸlantÄ±larÄ±, API subscription'larÄ±, observer pattern
4. DOM ManipÃ¼lasyonu - Focus yÃ¶netimi, scroll pozisyonu, document title

Modern React GeliÅŸtirmede

Memory Management - Bellek yÃ¶netimi ve garbage collection
Resource Cleanup - Kaynak temizliÄŸi ve serbest bÄ±rakma
Error Handling - Cleanup hatalarÄ±nÄ± yÃ¶netme
Performance Optimization - Gereksiz cleanup'larÄ± Ã¶nleme
Custom Hooks - Cleanup logic'ini paylaÅŸma

Best Practices

1. Cleanup fonksiyonu optional
2. Component unmount'ta otomatik Ã§alÄ±ÅŸÄ±r
3. Dependencies deÄŸiÅŸtiÄŸinde de Ã§alÄ±ÅŸÄ±r
4. Memory leak'leri Ã¶nler
5. Error handling ekleyin

Ne Zaman Cleanup KullanÄ±n

Timer'larda
Event listener'larda
Subscription'larda
API Ã§aÄŸrÄ±larÄ±nda
DOM manipÃ¼lasyonunda`,
      codeExamples: [],
      relatedProjects: ['timer-cleanup', 'event-cleanup', 'cleanup-patterns'],
      resources: [
        {
          id: 'useeffect-cleanup-docs',
          title: 'React.dev - useEffect Cleanup DokÃ¼mantasyonu',
          url: 'https://react.dev/reference/react/useEffect#cleaning-up-an-effect',
          type: 'documentation'
        },
        {
          id: 'cleanup-functions-guide',
          title: 'useEffect Cleanup Functions KÄ±lavuzu',
          url: 'https://react.dev/reference/react/useEffect#cleaning-up-an-effect',
          type: 'tutorial'
        },
        {
          id: 'memory-leak-prevention',
          title: 'React Memory Leak Ã–nleme',
          url: 'https://react.dev/reference/react/useEffect#cleaning-up-an-effect',
          type: 'article'
        }
      ]
    },
    {
      id: 'useeffect-summary',
      title: 'useEffect Ã–zet',
      description: 'useEffect hook kullanÄ±mÄ±nÄ±n Ã¶zeti',
      content: `useEffect Ã–zet

useEffect hook'unun temel kullanÄ±mÄ±nÄ± Ã¶zetleyelim. Modern React geliÅŸtirmede useEffect hook Ã¶zeti ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

useEffect Temel Konseptler

1. Side Effects YÃ¶netimi - API Ã§aÄŸrÄ±larÄ±, DOM manipÃ¼lasyonu, timer'lar ve subscription'lar
2. Lifecycle YÃ¶netimi - Component mount/unmount, state ve props deÄŸiÅŸiklikleri, cleanup iÅŸlemleri
3. Dependency Array - BoÅŸ array: sadece mount'ta, deÄŸerler: belirtilen deÄŸerler deÄŸiÅŸtiÄŸinde, array yok: her render'da

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Side effects: Blog postlarÄ±nÄ± API'den Ã§ekme, sayfa baÅŸlÄ±ÄŸÄ±nÄ± gÃ¼ncelleme
- Lifecycle: Component mount'ta veri Ã§ekme, unmount'ta temizlik
- Dependencies: Arama terimi deÄŸiÅŸtiÄŸinde filtreleme

Modern React GeliÅŸtirmede

Performance Optimization - Gereksiz effect'leri Ã¶nleme
Memory Management - Memory leak'leri Ã¶nleme
Error Handling - Effect hatalarÄ±nÄ± yÃ¶netme
Custom Hooks - useEffect logic'ini paylaÅŸma
Testing - Effect'leri test etme

Best Practices

1. Dependencies'i doÄŸru belirleyin
2. Cleanup fonksiyonunu kullanÄ±n
3. Memory leak'leri Ã¶nleyin
4. Performance'Ä± optimize edin
5. Error handling ekleyin

Ne Zaman useEffect KullanÄ±n

API Ã§aÄŸrÄ±larÄ±nda
DOM manipÃ¼lasyonunda
Timer'larda
Event listener'larda
Subscription'larda`,
      codeExamples: [],
      relatedProjects: ['useeffect-practice', 'side-effects-mastery', 'useeffect-complete-guide'],
      resources: [
        {
          id: 'useeffect-summary-docs',
          title: 'React.dev - useEffect Ã–zet DokÃ¼mantasyonu',
          url: 'https://react.dev/learn/synchronizing-with-effects',
          type: 'documentation'
        },
        {
          id: 'useeffect-complete-guide',
          title: 'useEffect Tam KÄ±lavuzu',
          url: 'https://react.dev/learn/synchronizing-with-effects',
          type: 'tutorial'
        },
        {
          id: 'useeffect-best-practices',
          title: 'useEffect Best Practices',
          url: 'https://react.dev/learn/synchronizing-with-effects',
          type: 'article'
        }
      ]
    }
  ]
};
