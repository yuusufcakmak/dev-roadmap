import { Category } from '../../../types/roadmap';

export const useReducerState: Category = {
  id: 'usereducer-state',
  name: 'USEREDUCER Ä°LE STATE MANAGEMENT',
  icon: 'ğŸ”„',
  description: 'useReducer hook ile karmaÅŸÄ±k state yÃ¶netimi',
  topics: [
    {
      id: 'usereducer-hook',
      title: 'useReducer Nedir?',
      description: 'useReducer hook ile karmaÅŸÄ±k state yÃ¶netimi',
      content: `useReducer Nedir?

useReducer, useState'e alternatif olarak karmaÅŸÄ±k state yÃ¶netimi iÃ§in kullanÄ±lan hook'tur. Modern React geliÅŸtirmede useReducer hook kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

useReducer Nedir?

Complex State - KarmaÅŸÄ±k state yÃ¶netimi iÃ§in
Reducer Pattern - Redux benzeri pattern
Predictable Updates - State gÃ¼ncellemeleri Ã¶ngÃ¶rÃ¼lebilir
Multiple Actions - Birden fazla action tÃ¼rÃ¼

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret sepet uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- ÃœrÃ¼n ekleme: ADD_ITEM action ile sepete Ã¼rÃ¼n ekleme
- ÃœrÃ¼n Ã§Ä±karma: REMOVE_ITEM action ile sepetten Ã¼rÃ¼n Ã§Ä±karma
- Miktar gÃ¼ncelleme: UPDATE_QUANTITY action ile Ã¼rÃ¼n miktarÄ±nÄ± gÃ¼ncelleme
- Sepeti temizleme: CLEAR_CART action ile tÃ¼m sepeti temizleme

useReducer vs useState

useReducer - KarmaÅŸÄ±k state, multiple actions, predictable, reducer function
useState - Basit state, single update, direct update, direct setter

Modern React GeliÅŸtirmede

State Management - KarmaÅŸÄ±k state yÃ¶netimi
Action Dispatching - Action'larÄ± dispatch etme
Reducer Pattern - Reducer pattern kullanÄ±mÄ±
State Immutability - Immutable state gÃ¼ncellemeleri
Performance Optimization - State gÃ¼ncellemelerini optimize etme

Best Practices

1. KarmaÅŸÄ±k state logic iÃ§in kullanÄ±n
2. Reducer pure function olmalÄ±
3. State'i mutate etmeyin
4. Action type'larÄ± consistent olmalÄ±
5. Performance'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun

Ne Zaman useReducer KullanÄ±n

State gÃ¼ncellemeleri karmaÅŸÄ±ksa
Birden fazla sub-value varsa
State logic karmaÅŸÄ±ksa
useState yeterli deÄŸilse
Redux benzeri pattern istiyorsanÄ±z`,
      codeExamples: [],
      relatedProjects: ['todo-app', 'shopping-cart', 'complex-state-management'],
      resources: [
        {
          id: 'usereducer-docs',
          title: 'React.dev - useReducer Hook DokÃ¼mantasyonu',
          url: 'https://react.dev/reference/react/useReducer',
          type: 'documentation'
        },
        {
          id: 'usereducer-patterns',
          title: 'useReducer Hook Desenleri',
          url: 'https://react.dev/reference/react/useReducer',
          type: 'tutorial'
        },
        {
          id: 'usereducer-vs-usestate',
          title: 'useReducer vs useState KÄ±lavuzu',
          url: 'https://react.dev/reference/react/useReducer',
          type: 'article'
        }
      ]
    },
    {
      id: 'usestate-state-management',
      title: 'useState ile State YÃ¶netimi',
      description: 'useState hook ile basit state yÃ¶netimi',
      content: `useState ile State YÃ¶netimi

useState hook'u ile basit state yÃ¶netimi nasÄ±l yapÄ±lÄ±r? Modern React geliÅŸtirmede useState hook kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

useState Temel KullanÄ±m

Basit State - Tek deÄŸerli state'ler iÃ§in
Direct Updates - DoÄŸrudan gÃ¼ncelleme
Easy to Use - Kolay kullanÄ±m
Performance - KÃ¼Ã§Ã¼k state'ler iÃ§in hÄ±zlÄ±

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir blog uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- SayaÃ§: useState(0) ile beÄŸeni sayÄ±sÄ±nÄ± takip etme
- Toggle: useState(false) ile modal aÃ§Ä±k/kapalÄ± durumu
- String: useState('') ile arama terimini saklama
- Number: useState(1) ile sayfa numarasÄ±nÄ± takip etme

KullanÄ±m SenaryolarÄ±

Basit DeÄŸerler - Counter, Toggle (true/false), String deÄŸerler, Number deÄŸerler
Object State - Form data, User preferences, Simple configurations

Modern React GeliÅŸtirmede

State Management - Basit state yÃ¶netimi
Direct Updates - DoÄŸrudan state gÃ¼ncellemeleri
Performance Optimization - KÃ¼Ã§Ã¼k state'ler iÃ§in optimize edilmiÅŸ
State Immutability - Immutable state gÃ¼ncellemeleri
Hook Rules - Hook kullanÄ±m kurallarÄ±

Best Practices

1. Basit state'ler iÃ§in useState kullanÄ±n
2. Object state'lerde spread operator kullanÄ±n
3. Functional update kullanÄ±n
4. State'i mÃ¼mkÃ¼n olduÄŸunca basit tutun
5. Performance'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun

Ne Zaman useState KullanÄ±n

Basit state yÃ¶netiminde
Tek deÄŸerli state'lerde
KÃ¼Ã§Ã¼k uygulamalarda
HÄ±zlÄ± prototiplemede
KarmaÅŸÄ±k logic gerektirmeyen durumlarda`,
      codeExamples: [],
      relatedProjects: ['counter-app', 'simple-form', 'basic-state-management'],
      resources: [
        {
          id: 'usestate-state-docs',
          title: 'React.dev - useState Hook DokÃ¼mantasyonu',
          url: 'https://react.dev/reference/react/useState',
          type: 'documentation'
        },
        {
          id: 'usestate-basic-usage',
          title: 'useState Temel KullanÄ±m KÄ±lavuzu',
          url: 'https://react.dev/reference/react/useState',
          type: 'tutorial'
        },
        {
          id: 'usestate-best-practices',
          title: 'useState Best Practices',
          url: 'https://react.dev/reference/react/useState',
          type: 'article'
        }
      ]
    },
    {
      id: 'usereducer-state-management',
      title: 'useReducer ile State YÃ¶netimi',
      description: 'useReducer hook ile karmaÅŸÄ±k state yÃ¶netimi',
      content: `useReducer ile State YÃ¶netimi

useReducer hook'u ile karmaÅŸÄ±k state yÃ¶netimi nasÄ±l yapÄ±lÄ±r? Modern React geliÅŸtirmede useReducer hook kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

useReducer YapÄ±sÄ±

1. Reducer Function - State ve action alÄ±r, yeni state dÃ¶ndÃ¼rÃ¼r, pure function olmalÄ±, side effect iÃ§ermemeli
2. Initial State - BaÅŸlangÄ±Ã§ state deÄŸeri, object veya primitive olabilir, reducer'Ä±n ilk Ã§aÄŸrÄ±sÄ±nda kullanÄ±lÄ±r
3. Dispatch Function - Action'larÄ± gÃ¶nderir, reducer'Ä± tetikler, state gÃ¼ncellemesi yapar

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir todo uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- ADD_TODO: Yeni gÃ¶rev ekleme action'Ä±
- REMOVE_TODO: GÃ¶rev silme action'Ä±
- TOGGLE_TODO: GÃ¶rev tamamlama action'Ä±
- CLEAR_COMPLETED: Tamamlanan gÃ¶revleri temizleme action'Ä±

Action TÃ¼rleri

1. String Actions - Basit string action'lar
2. Object Actions - Type ve payload iÃ§eren action'lar
3. Multiple Actions - Birden fazla action tÃ¼rÃ¼

KullanÄ±m Ã–rnekleri

Todo List - ADD_TODO, REMOVE_TODO, TOGGLE_TODO, CLEAR_COMPLETED
Form Management - UPDATE_FIELD, VALIDATE_FORM, RESET_FORM, SUBMIT_FORM

Modern React GeliÅŸtirmede

State Management - KarmaÅŸÄ±k state yÃ¶netimi
Action Dispatching - Action'larÄ± dispatch etme
Reducer Pattern - Reducer pattern kullanÄ±mÄ±
State Immutability - Immutable state gÃ¼ncellemeleri
Performance Optimization - State gÃ¼ncellemelerini optimize etme

Best Practices

1. Reducer pure function olmalÄ±
2. State'i mutate etmeyin
3. Spread operator kullanÄ±n
4. Action type'larÄ± consistent olmalÄ±
5. Performance'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun

Ne Zaman useReducer ile State YÃ¶netimi KullanÄ±n

KarmaÅŸÄ±k state logic'inde
Birden fazla action tÃ¼rÃ¼nde
State gÃ¼ncellemeleri karmaÅŸÄ±ksa
useState yeterli deÄŸilse
Redux benzeri pattern istiyorsanÄ±z`,
      codeExamples: [],
      relatedProjects: ['advanced-todo', 'complex-form', 'usereducer-patterns'],
      resources: [
        {
          id: 'usereducer-state-docs',
          title: 'React.dev - useReducer State YÃ¶netimi DokÃ¼mantasyonu',
          url: 'https://react.dev/reference/react/useReducer',
          type: 'documentation'
        },
        {
          id: 'usereducer-advanced-patterns',
          title: 'useReducer GeliÅŸmiÅŸ Desenleri',
          url: 'https://react.dev/reference/react/useReducer',
          type: 'tutorial'
        },
        {
          id: 'usereducer-complex-state',
          title: 'useReducer ile KarmaÅŸÄ±k State YÃ¶netimi',
          url: 'https://react.dev/reference/react/useReducer',
          type: 'article'
        }
      ]
    }
  ]
};
