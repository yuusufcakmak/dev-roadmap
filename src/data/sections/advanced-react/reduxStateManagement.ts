import { Category } from "../../../types/roadmap";

export const reduxStateManagement: Category = {
  id: "redux-state-management",
  name: "REDUX Ä°LE STATE MANAGEMENT",
  icon: "ğŸ”„",
  description: "Redux ile global state yÃ¶netimi ve React entegrasyonu",
  topics: [
    {
      id: "redux-introduction",
      title: "Redux Nedir?",
      description: "Redux state management kÃ¼tÃ¼phanesinin temelleri",
      content: `Redux Nedir?

Redux state management kÃ¼tÃ¼phanesinin temellerini ve React ile entegrasyonunu Ã¶ÄŸrenelim. Modern React geliÅŸtirmede Redux kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Redux Nedir?

State Management Library - Predictable state container, JavaScript uygulamalarÄ± iÃ§in, centralized state management, time-travel debugging
KullanÄ±m AmacÄ± - Global state yÃ¶netimi, complex application state, predictable state updates, debugging kolaylÄ±ÄŸÄ±

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Store: TÃ¼m uygulama state'i (kullanÄ±cÄ± bilgileri, sepet, Ã¼rÃ¼nler, filtreler)
- Actions: KullanÄ±cÄ± sepet Ã¼rÃ¼n ekleme, Ã¼rÃ¼n silme, filtreleme
- Reducers: State gÃ¼ncellemelerini yapan pure function'lar
- Dispatch: Action'larÄ± store'a gÃ¶nderen fonksiyon

Redux Temel Kavramlar

1. Store - UygulamanÄ±n state'ini tutar, single source of truth, immutable state, centralized data
2. Actions - State deÄŸiÅŸikliklerini tanÄ±mlar, plain JavaScript objects, type ve payload iÃ§erir, state'i deÄŸiÅŸtirmez
3. Reducers - State gÃ¼ncellemelerini yapar, pure functions, previous state + action = new state, immutable updates
4. Dispatch - Action'larÄ± store'a gÃ¶nderir, state gÃ¼ncellemesini tetikler, synchronous operation, predictable flow

Redux Data Flow

1. Component Dispatch - Component action dispatch eder, user interaction sonucu, event handler'lar, form submissions
2. Store Processing - Store action'Ä± alÄ±r, reducer'Ä± Ã§aÄŸÄ±rÄ±r, state gÃ¼ncellemesi, new state oluÅŸturur
3. Component Update - Store deÄŸiÅŸikliÄŸi, component re-render, UI gÃ¼ncellemesi, user feedback

Redux vs Context API

Redux AvantajlarÄ± - Time-travel debugging, DevTools support, middleware ecosystem, predictable updates
Context API AvantajlarÄ± - Built-in React feature, simpler setup, less boilerplate, native integration
Ne Zaman Redux? - Complex state logic, large applications, multiple state slices, advanced debugging needs
Ne Zaman Context API? - Simple global state, small applications, basic state sharing, quick implementation

Modern React GeliÅŸtirmede

Redux State Management - Redux state yÃ¶netimi
Global State - Global state
Predictable Updates - Ã–ngÃ¶rÃ¼lebilir gÃ¼ncellemeler
Debugging - Debugging
Performance Optimization - Performance optimizasyonu

Best Practices

1. Single source of truth kullanÄ±n
2. Immutable state updates yapÄ±n
3. Pure functions yazÄ±n
4. Predictable updates saÄŸlayÄ±n
5. DevTools kullanÄ±n

Ne Zaman Redux KullanÄ±n

Complex state logic gerektiÄŸinde
Large applications geliÅŸtirirken
Multiple state slices gerektiÄŸinde
Advanced debugging gerektiÄŸinde
Team collaboration gerektiÄŸinde`,
      codeExamples: [],
      relatedProjects: [
        "redux-introduction",
        "state-management-comparison",
        "redux-patterns",
      ],
      resources: [
        {
          id: "redux-introduction-docs",
          title: "Redux.js - Redux Nedir DokÃ¼mantasyonu",
          url: "https://redux.js.org/introduction/getting-started",
          type: "documentation",
        },
        {
          id: "redux-introduction-guide",
          title: "Redux Nedir KÄ±lavuzu",
          url: "https://redux.js.org/introduction/getting-started",
          type: "tutorial",
        },
        {
          id: "redux-introduction-patterns",
          title: "Redux Nedir Desenleri",
          url: "https://redux.js.org/introduction/getting-started",
          type: "article",
        },
      ],
    },
    {
      id: "react-vs-context-api",
      title: "React vs Context API",
      description: "Redux ve Context API karÅŸÄ±laÅŸtÄ±rmasÄ±",
      content: `React vs Context API

Redux ve Context API arasÄ±ndaki farklarÄ± ve ne zaman hangisini kullanacaÄŸÄ±mÄ±zÄ± Ã¶ÄŸrenelim. Modern React geliÅŸtirmede Redux vs Context API karÅŸÄ±laÅŸtÄ±rmasÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

KarÅŸÄ±laÅŸtÄ±rma Analizi

Redux Ã–zellikleri - External library, complex setup, powerful features, learning curve
Context API Ã–zellikleri - Built-in React, simple setup, basic features, easy to learn

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Redux KullanÄ±mÄ±: BÃ¼yÃ¼k e-ticaret uygulamasÄ±, karmaÅŸÄ±k sepet yÃ¶netimi, Ã§oklu geliÅŸtirici takÄ±mÄ±
- Context API KullanÄ±mÄ±: KÃ¼Ã§Ã¼k blog uygulamasÄ±, basit theme yÃ¶netimi, hÄ±zlÄ± prototip
- Performance: Redux selective subscriptions, Context API tÃ¼m consumer'lar re-render
- Developer Experience: Redux DevTools, Context API basic debugging

DetaylÄ± KarÅŸÄ±laÅŸtÄ±rma

1. Setup Complexity - Redux: Complex boilerplate, Context API: Simple setup, Redux: Multiple files, Context API: Single file
2. Performance - Redux: Optimized updates, Context API: Re-render issues, Redux: Selective subscriptions, Context API: All consumers re-render
3. Developer Experience - Redux: DevTools support, Context API: Basic debugging, Redux: Time-travel debugging, Context API: Limited debugging
4. Ecosystem - Redux: Rich ecosystem, Context API: Limited ecosystem, Redux: Middleware support, Context API: No middleware

KullanÄ±m SenaryolarÄ±

Redux KullanÄ±mÄ± - Large applications, complex state logic, multiple developers, advanced debugging needs
Context API KullanÄ±mÄ± - Small applications, simple state sharing, quick prototypes, basic global state

Performance Considerations

Redux Performance - Selective subscriptions, optimized re-renders, memoization support, middleware optimization
Context API Performance - All consumers re-render, no selective subscriptions, manual optimization needed, potential performance issues

Migration Strategies

Context API to Redux - Gradual migration, state extraction, action creation, reducer implementation
Redux to Context API - State simplification, context creation, provider setup, consumer implementation

Decision Matrix

Choose Redux When: Complex state logic, large team, advanced debugging, performance critical
Choose Context API When: Simple state, small team, quick development, basic requirements

Modern React GeliÅŸtirmede

Redux vs Context API - Redux vs Context API karÅŸÄ±laÅŸtÄ±rmasÄ±
State Management - State yÃ¶netimi
Performance Optimization - Performance optimizasyonu
Developer Experience - Developer experience
Decision Making - Karar verme

Best Practices

1. Proje bÃ¼yÃ¼klÃ¼ÄŸÃ¼nÃ¼ deÄŸerlendirin
2. State complexity'yi analiz edin
3. Team size'Ä± gÃ¶z Ã¶nÃ¼nde bulundurun
4. Performance requirements'Ä± deÄŸerlendirin
5. Development timeline'Ä± dÃ¼ÅŸÃ¼nÃ¼n

Ne Zaman Redux vs Context API Karar Verin

Proje baÅŸlangÄ±cÄ±nda
State management gereksinimlerini deÄŸerlendirirken
Performance kritik uygulamalarda
Team collaboration gerektiÄŸinde
Long-term maintenance dÃ¼ÅŸÃ¼nÃ¼rken`,
      codeExamples: [],
      relatedProjects: [
        "redux-context-comparison",
        "state-management-decision",
        "redux-context-patterns",
      ],
      resources: [
        {
          id: "redux-context-comparison-docs",
          title: "Redux.js - Redux vs Context API DokÃ¼mantasyonu",
          url: "https://redux.js.org/understanding/thinking-in-redux/motivation",
          type: "documentation",
        },
        {
          id: "redux-context-comparison-guide",
          title: "Redux vs Context API KÄ±lavuzu",
          url: "https://redux.js.org/understanding/thinking-in-redux/motivation",
          type: "tutorial",
        },
        {
          id: "redux-context-comparison-patterns",
          title: "Redux vs Context API Desenleri",
          url: "https://redux.js.org/understanding/thinking-in-redux/motivation",
          type: "article",
        },
      ],
    },
    {
      id: "redux-how-it-works",
      title: "Redux NasÄ±l Ã‡alÄ±ÅŸÄ±r?",
      description: "Redux'un Ã§alÄ±ÅŸma prensipleri ve data flow",
      content: `Redux NasÄ±l Ã‡alÄ±ÅŸÄ±r?

Redux'un Ã§alÄ±ÅŸma prensiplerini ve data flow'unu detaylÄ± olarak inceleyelim. Modern React geliÅŸtirmede Redux Ã§alÄ±ÅŸma prensipleri ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Redux Architecture

Unidirectional Data Flow - Single direction data flow, predictable state updates, clear data flow, easy to debug
Core Principles - Single source of truth, state is read-only, changes via pure functions, immutable updates

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Action Creation: KullanÄ±cÄ± sepete Ã¼rÃ¼n ekleme butonuna tÄ±kladÄ±ÄŸÄ±nda
- Action Dispatch: dispatch() fonksiyonu ile action store'a gÃ¶nderilir
- Reducer Processing: Reducer pure function olarak yeni state oluÅŸturur
- Store Update: Yeni state store'da saklanÄ±r ve component'ler gÃ¼ncellenir

Redux Data Flow

1. Action Creation - User interaction, action creator functions, action objects, type ve payload
2. Action Dispatch - dispatch() function, store'a action gÃ¶nderme, middleware processing, reducer invocation
3. Reducer Processing - Pure function, previous state + action, new state creation, immutable updates
4. Store Update - New state storage, subscriber notification, component re-render, UI update

Redux Components

1. Store - State container, dispatch method, getState method, subscribe method
2. Actions - Plain objects, type property, payload data, action creators
3. Reducers - Pure functions, state transformation, immutable updates, no side effects
4. Middleware - Action processing, async operations, logging, DevTools integration

Redux Principles

1. Single Source of Truth - One store, centralized state, consistent data, easy debugging
2. State is Read-Only - No direct mutations, actions only way to change, immutable updates, predictable changes
3. Pure Functions - Reducers are pure, no side effects, same input = same output, testable functions

Advanced Concepts

1. Middleware - Action processing pipeline, async operations, logging middleware, DevTools middleware
2. Selectors - State derivation, computed values, memoization, performance optimization
3. Normalization - Flat state structure, entity relationships, efficient updates, data consistency
4. Time Travel - State history, action replay, debugging, development tools

Modern React GeliÅŸtirmede

Redux Architecture - Redux mimarisi
Data Flow - Veri akÄ±ÅŸÄ±
State Management - State yÃ¶netimi
Performance Optimization - Performance optimizasyonu
Debugging - Debugging

Best Practices

1. Unidirectional data flow kullanÄ±n
2. Pure functions yazÄ±n
3. Immutable updates yapÄ±n
4. Single source of truth saÄŸlayÄ±n
5. Middleware kullanÄ±n

Ne Zaman Redux Ã‡alÄ±ÅŸma Prensiplerini AnlayÄ±n

Redux implementasyonu yaparken
State management tasarlarken
Performance optimizasyonu yaparken
Debugging yaparken
Team collaboration yaparken`,
      codeExamples: [],
      relatedProjects: [
        "redux-architecture",
        "data-flow-analysis",
        "redux-principles-patterns",
      ],
      resources: [
        {
          id: "redux-how-it-works-docs",
          title: "Redux.js - Redux NasÄ±l Ã‡alÄ±ÅŸÄ±r DokÃ¼mantasyonu",
          url: "https://redux.js.org/understanding/thinking-in-redux/three-principles",
          type: "documentation",
        },
        {
          id: "redux-how-it-works-guide",
          title: "Redux NasÄ±l Ã‡alÄ±ÅŸÄ±r KÄ±lavuzu",
          url: "https://redux.js.org/understanding/thinking-in-redux/three-principles",
          type: "tutorial",
        },
        {
          id: "redux-how-it-works-patterns",
          title: "Redux NasÄ±l Ã‡alÄ±ÅŸÄ±r Desenleri",
          url: "https://redux.js.org/understanding/thinking-in-redux/three-principles",
          type: "article",
        },
      ],
    },
    {
      id: "redux-dispatch-usage",
      title: "Redux dispatch KullanÄ±mÄ±",
      description: "Redux dispatch fonksiyonu ile action gÃ¶nderme",
      content: `Redux dispatch KullanÄ±mÄ±

Redux dispatch fonksiyonu ile action'larÄ± nasÄ±l gÃ¶ndereceÄŸimizi Ã¶ÄŸrenelim. Modern React geliÅŸtirmede Redux dispatch kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

dispatch Nedir?

Store Method - Store'un dispatch method'u, action'larÄ± store'a gÃ¶nderir, state gÃ¼ncellemesini tetikler, synchronous operation
KullanÄ±m AmacÄ± - State deÄŸiÅŸiklikleri, user interactions, API calls, side effects

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Basic Dispatch: KullanÄ±cÄ± sepete Ã¼rÃ¼n ekleme butonuna tÄ±kladÄ±ÄŸÄ±nda
- Action Creators: ÃœrÃ¼n ekleme action'Ä± parametreli olarak oluÅŸturulur
- Async Actions: API'den Ã¼rÃ¼n bilgileri Ã§ekme iÅŸlemi
- Batch Actions: Sepete Ã¼rÃ¼n ekleme ve sepet sayÄ±sÄ±nÄ± gÃ¼ncelleme

dispatch KullanÄ±mÄ±

1. Basic Dispatch - store.dispatch(action), direct store access, simple action dispatch, immediate execution
2. Action Creators - Function-based actions, parameterized actions, reusable actions, type safety
3. Async Actions - Thunk middleware, async operations, API calls, side effects

dispatch Patterns

1. Synchronous Actions - Immediate state updates, simple data changes, user interactions, form submissions
2. Asynchronous Actions - API calls, data fetching, file uploads, background operations
3. Batch Actions - Multiple actions, atomic operations, transaction-like behavior, consistency

Best Practices

Action Design - Descriptive action types, minimal payload, consistent structure, type safety
Error Handling - Error actions, error states, user feedback, recovery mechanisms
Performance - Action batching, selective updates, memoization, optimization

Advanced Usage

1. Middleware Integration - Thunk middleware, saga middleware, custom middleware, action processing
2. Action Creators - Parameterized creators, async creators, conditional actions, complex logic
3. Batch Dispatching - Multiple actions, atomic operations, performance optimization, consistency
4. Conditional Dispatching - Conditional logic, state-based actions, user permissions, feature flags

Modern React GeliÅŸtirmede

Redux Dispatch - Redux dispatch
Action Management - Action yÃ¶netimi
State Updates - State gÃ¼ncellemeleri
Performance Optimization - Performance optimizasyonu
Error Handling - Hata yÃ¶netimi

Best Practices

1. Descriptive action types kullanÄ±n
2. Minimal payload gÃ¶nderin
3. Error handling ekleyin
4. Performance'Ä± optimize edin
5. Type safety saÄŸlayÄ±n

Ne Zaman Redux dispatch KullanÄ±n

State deÄŸiÅŸiklikleri gerektiÄŸinde
User interactions yÃ¶netirken
API calls yaparken
Side effects yÃ¶netirken
Action'larÄ± store'a gÃ¶nderirken`,
      codeExamples: [],
      relatedProjects: [
        "redux-dispatch",
        "action-management",
        "redux-dispatch-patterns",
      ],
      resources: [
        {
          id: "redux-dispatch-docs",
          title: "Redux.js - Redux dispatch DokÃ¼mantasyonu",
          url: "https://redux.js.org/api/store#dispatchaction",
          type: "documentation",
        },
        {
          id: "redux-dispatch-guide",
          title: "Redux dispatch KÄ±lavuzu",
          url: "https://redux.js.org/api/store#dispatchaction",
          type: "tutorial",
        },
        {
          id: "redux-dispatch-patterns",
          title: "Redux dispatch Desenleri",
          url: "https://redux.js.org/api/store#dispatchaction",
          type: "article",
        },
      ],
    },
    {
      id: "redux-project-setup",
      title: "React Projesine Redux Kurulumu - BaÅŸlangÄ±Ã§ Projesi",
      description: "Mevcut React projesine Redux kurulumu",
      content: `React Projesine Redux Kurulumu - BaÅŸlangÄ±Ã§ Projesi

Mevcut React projesine Redux nasÄ±l kurulur? Modern React geliÅŸtirmede Redux kurulumu ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Redux Kurulumu

Package Installation - npm install redux react-redux, Redux core library, React bindings, development tools
KullanÄ±m AmacÄ± - State management, global state, predictable updates, debugging tools

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Package Installation: Redux core library ve React bindings kurulumu
- Project Structure: Store configuration, reducer organization, action definitions
- Basic Setup: Store creation, provider setup, basic reducer, initial state
- Development Tools: Redux DevTools, TypeScript support, debugging tools

Kurulum AdÄ±mlarÄ±

1. Package Installation - Redux core package, React-Redux bindings, Redux DevTools, TypeScript types
2. Project Structure - Store configuration, reducer organization, action definitions, component integration
3. Basic Setup - Store creation, provider setup, basic reducer, initial state

Kurulum KomutlarÄ±

NPM Installation - npm install redux, npm install react-redux, npm install @reduxjs/toolkit, npm install --save-dev redux-devtools-extension
Yarn Installation - yarn add redux react-redux, yarn add @reduxjs/toolkit, yarn add -D redux-devtools-extension

Kurulum SonrasÄ±

Project Structure - src/store/ klasÃ¶rÃ¼, reducer dosyalarÄ±, action dosyalarÄ±, type definitions
Next Steps - Store configuration, reducer creation, provider setup, component integration

Development Tools

Redux DevTools - Browser extension, time-travel debugging, action inspection, state monitoring
TypeScript Support - Type definitions, type safety, IntelliSense, error prevention

Modern React GeliÅŸtirmede

Redux Installation - Redux kurulumu
Project Setup - Proje kurulumu
Development Tools - Development araÃ§larÄ±
TypeScript Integration - TypeScript entegrasyonu
Best Practices - En iyi uygulamalar

Best Practices

1. Redux DevTools kurun
2. TypeScript kullanÄ±n
3. Project structure'Ä± organize edin
4. Development tools'larÄ± aktif edin
5. Best practices uygulayÄ±n

Ne Zaman Redux Kurulumu YapÄ±n

Global state management gerektiÄŸinde
Complex state logic gerektiÄŸinde
Large applications geliÅŸtirirken
Team collaboration gerektiÄŸinde
Advanced debugging gerektiÄŸinde`,
      codeExamples: [],
      relatedProjects: [
        "redux-setup",
        "project-configuration",
        "redux-setup-patterns",
      ],
      resources: [
        {
          id: "redux-setup-docs",
          title: "Redux.js - Redux Kurulumu DokÃ¼mantasyonu",
          url: "https://redux.js.org/introduction/getting-started#installation",
          type: "documentation",
        },
        {
          id: "redux-setup-guide",
          title: "Redux Kurulumu KÄ±lavuzu",
          url: "https://redux.js.org/introduction/getting-started#installation",
          type: "tutorial",
        },
        {
          id: "redux-setup-patterns",
          title: "Redux Kurulumu Desenleri",
          url: "https://redux.js.org/introduction/getting-started#installation",
          type: "article",
        },
      ],
    },
    {
      id: "redux-store-creation",
      title: "Redux Store OluÅŸturma",
      description: "Redux store yapÄ±landÄ±rmasÄ± ve oluÅŸturma",
      content: `Redux Store OluÅŸturma

Redux store'u nasÄ±l oluÅŸturup yapÄ±landÄ±racaÄŸÄ±mÄ±zÄ± Ã¶ÄŸrenelim. Modern React geliÅŸtirmede Redux store oluÅŸturma ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Redux Store

Store Definition - State container, single source of truth, centralized data, immutable state
KullanÄ±m AmacÄ± - Global state management, data centralization, predictable updates, debugging support

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Store Definition: TÃ¼m uygulama state'i tek bir yerde saklanÄ±r
- Store Configuration: Reducer combination, middleware setup, DevTools integration
- Store Methods: getState(), dispatch(), subscribe(), replaceReducer()
- Store Structure: Root reducer, middleware setup, initial state

Store Creation

1. createStore Function - Redux core function, reducer parameter, initial state, middleware support
2. Store Configuration - Reducer combination, middleware setup, DevTools integration, initial state
3. Store Methods - getState(), dispatch(), subscribe(), replaceReducer()

Store Structure

1. Root Reducer - Combined reducers, state slices, modular structure, scalable architecture
2. Middleware Setup - Thunk middleware, DevTools middleware, logging middleware, custom middleware
3. Initial State - Default values, state structure, data initialization, fallback values

Store Configuration

1. Reducer Combination - combineReducers, state slices, modular reducers, scalable structure
2. Middleware Integration - applyMiddleware, thunk support, DevTools integration, custom middleware
3. DevTools Setup - Development tools, time-travel debugging, action inspection, state monitoring

Advanced Configuration

1. State Persistence - Local storage, session storage, state hydration, data recovery
2. Hot Reloading - Development setup, state preservation, code changes, development experience
3. TypeScript Integration - Type definitions, type safety, IntelliSense, error prevention
4. Production Optimization - Bundle optimization, performance tuning, memory management, error handling

Modern React GeliÅŸtirmede

Redux Store Creation - Redux store oluÅŸturma
Store Configuration - Store yapÄ±landÄ±rmasÄ±
Middleware Integration - Middleware entegrasyonu
DevTools Integration - DevTools entegrasyonu
Performance Optimization - Performance optimizasyonu

Best Practices

1. Single source of truth saÄŸlayÄ±n
2. Middleware kullanÄ±n
3. DevTools entegre edin
4. TypeScript kullanÄ±n
5. Performance'Ä± optimize edin

Ne Zaman Redux Store OluÅŸturun

Global state management gerektiÄŸinde
Complex state logic gerektiÄŸinde
Large applications geliÅŸtirirken
Team collaboration gerektiÄŸinde
Advanced debugging gerektiÄŸinde`,
      codeExamples: [],
      relatedProjects: [
        "redux-store",
        "store-configuration",
        "redux-store-patterns",
      ],
      resources: [
        {
          id: "redux-store-docs",
          title: "Redux.js - Redux Store DokÃ¼mantasyonu",
          url: "https://redux.js.org/api/createstore",
          type: "documentation",
        },
        {
          id: "redux-store-guide",
          title: "Redux Store KÄ±lavuzu",
          url: "https://redux.js.org/api/createstore",
          type: "tutorial",
        },
        {
          id: "redux-store-patterns",
          title: "Redux Store Desenleri",
          url: "https://redux.js.org/api/createstore",
          type: "article",
        },
      ],
    },
    {
      id: "redux-provider-usage",
      title: "Redux Provider KullanÄ±mÄ±",
      description: "React uygulamasÄ±nda Redux Provider kurulumu",
      content: `Redux Provider KullanÄ±mÄ±

React uygulamasÄ±nda Redux Provider'Ä± nasÄ±l kuracaÄŸÄ±mÄ±zÄ± Ã¶ÄŸrenelim. Modern React geliÅŸtirmede Redux Provider kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Redux Provider

Provider Component - React-Redux component, store'u uygulamaya saÄŸlar, context-based distribution, component tree wrapping
KullanÄ±m AmacÄ± - Store access, component integration, state distribution, global state availability

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- Provider Setup: App component'i Provider ile sarmalayarak store'u tÃ¼m uygulamaya saÄŸlama
- Store Integration: Store prop ile Provider'a store'u geÃ§me
- App Structure: Root component'te Provider wrapping, component hierarchy
- State Access: useSelector ve useDispatch hook'larÄ± ile state eriÅŸimi

Provider Setup

1. Provider Import - react-redux import, Provider component, store import, App component wrapping
2. Store Integration - Store prop, provider configuration, component tree wrapping, state availability
3. App Structure - Root component, provider wrapping, component hierarchy, state access

Provider Configuration

1. Basic Setup - Provider component, store prop, children components, state distribution
2. Advanced Configuration - Multiple stores, store isolation, context customization, performance optimization
3. Error Handling - Error boundaries, store errors, component errors, fallback UI

Best Practices

1. Provider Placement - Root level placement, single provider, store isolation, performance optimization
2. Store Access - useSelector hook, useDispatch hook, component integration, state consumption
3. Performance - Selective subscriptions, memoization, component optimization, re-render prevention

Advanced Usage

1. Multiple Providers - Store separation, feature isolation, performance optimization, complex architectures
2. Custom Context - Context customization, store isolation, feature-specific stores, advanced patterns
3. Provider Composition - Provider nesting, store hierarchy, feature organization, scalable architecture
4. Testing - Provider mocking, store testing, component testing, integration testing

Modern React GeliÅŸtirmede

Redux Provider - Redux Provider
Provider Setup - Provider kurulumu
Store Integration - Store entegrasyonu
Performance Optimization - Performance optimizasyonu
Error Handling - Hata yÃ¶netimi

Best Practices

1. Root level'de provider kullanÄ±n
2. Single provider kullanÄ±n
3. Performance'Ä± optimize edin
4. Error handling ekleyin
5. Testing yapÄ±n

Ne Zaman Redux Provider KullanÄ±n

Store'u uygulamaya saÄŸlarken
Component integration gerektiÄŸinde
State distribution gerektiÄŸinde
Global state availability gerektiÄŸinde
Redux entegrasyonu yaparken`,
      codeExamples: [],
      relatedProjects: [
        "redux-provider",
        "app-integration",
        "redux-provider-patterns",
      ],
      resources: [
        {
          id: "redux-provider-docs",
          title: "React-Redux - Redux Provider DokÃ¼mantasyonu",
          url: "https://react-redux.js.org/api/provider",
          type: "documentation",
        },
        {
          id: "redux-provider-guide",
          title: "Redux Provider KÄ±lavuzu",
          url: "https://react-redux.js.org/api/provider",
          type: "tutorial",
        },
        {
          id: "redux-provider-patterns",
          title: "Redux Provider Desenleri",
          url: "https://react-redux.js.org/api/provider",
          type: "article",
        },
      ],
    },
    {
      id: "useselector-usedispatch",
      title: "useSelector ve useDispatch KullanÄ±mÄ±",
      description: "React-Redux hook'larÄ± ile state eriÅŸimi ve action dispatch",
      content: `useSelector ve useDispatch KullanÄ±mÄ±

React-Redux hook'larÄ± ile Redux state'ine nasÄ±l eriÅŸeceÄŸimizi ve action'larÄ± nasÄ±l dispatch edeceÄŸimizi Ã¶ÄŸrenelim. Modern React geliÅŸtirmede useSelector ve useDispatch kullanÄ±mÄ± ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

React-Redux Hooks

useSelector Hook - State'e eriÅŸim, selective subscriptions, re-render optimization, component integration
useDispatch Hook - Action dispatch, store method access, event handling, state updates

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- useSelector KullanÄ±mÄ±: Sepet Ã¼rÃ¼n sayÄ±sÄ±nÄ± state'ten okuma, kullanÄ±cÄ± bilgilerini state'ten okuma
- useDispatch KullanÄ±mÄ±: Sepete Ã¼rÃ¼n ekleme action'Ä± dispatch etme, kullanÄ±cÄ± giriÅŸ action'Ä± dispatch etme
- Selector Functions: Sepet toplam fiyatÄ±nÄ± hesaplama, kullanÄ±cÄ± durumunu kontrol etme
- Action Creators: ÃœrÃ¼n ekleme action'Ä± oluÅŸturma, kullanÄ±cÄ± giriÅŸ action'Ä± oluÅŸturma

useSelector KullanÄ±mÄ±

1. Basic Usage - State selection, component integration, re-render optimization, selective subscriptions
2. Selector Functions - State derivation, computed values, memoization, performance optimization
3. Multiple Selectors - Multiple state slices, combined selectors, complex state access, modular approach

useDispatch KullanÄ±mÄ±

1. Basic Dispatch - Action dispatch, event handlers, user interactions, state updates
2. Action Creators - Function-based actions, parameterized actions, reusable actions, type safety
3. Async Actions - Thunk actions, API calls, side effects, error handling

Best Practices

1. Selector Optimization - Memoized selectors, shallow equality, performance optimization, re-render prevention
2. Dispatch Optimization - useCallback usage, action memoization, event handler optimization, performance tuning
3. Error Handling - Error boundaries, action errors, state errors, user feedback

Advanced Patterns

1. Custom Hooks - Reusable logic, state abstraction, component simplification, logic extraction
2. Selector Composition - Complex selectors, state derivation, computed values, performance optimization
3. Action Batching - Multiple actions, atomic operations, performance optimization, consistency
4. Conditional Logic - Conditional dispatch, state-based actions, feature flags, user permissions

Modern React GeliÅŸtirmede

useSelector ve useDispatch - useSelector ve useDispatch
State Access - State eriÅŸimi
Action Dispatch - Action dispatch
Performance Optimization - Performance optimizasyonu
Error Handling - Hata yÃ¶netimi

Best Practices

1. Memoized selectors kullanÄ±n
2. useCallback ile dispatch optimize edin
3. Error handling ekleyin
4. Performance'Ä± optimize edin
5. Custom hooks oluÅŸturun

Ne Zaman useSelector ve useDispatch KullanÄ±n

Redux state'ine eriÅŸim gerektiÄŸinde
Action dispatch gerektiÄŸinde
Component integration gerektiÄŸinde
State updates gerektiÄŸinde
Redux hook'larÄ± kullanÄ±rken`,
      codeExamples: [],
      relatedProjects: ["redux-hooks", "state-access", "redux-hooks-patterns"],
      resources: [
        {
          id: "redux-hooks-docs",
          title: "React-Redux - useSelector ve useDispatch DokÃ¼mantasyonu",
          url: "https://react-redux.js.org/api/hooks",
          type: "documentation",
        },
        {
          id: "redux-hooks-guide",
          title: "useSelector ve useDispatch KÄ±lavuzu",
          url: "https://react-redux.js.org/api/hooks",
          type: "tutorial",
        },
        {
          id: "redux-hooks-patterns",
          title: "useSelector ve useDispatch Desenleri",
          url: "https://react-redux.js.org/api/hooks",
          type: "article",
        },
      ],
    },
    {
      id: "redux-multiple-state",
      title: "Action'a Yeni Veri GÃ¶nderme ve Ã‡oklu State ile Ã‡alÄ±ÅŸma",
      description: "Redux'ta Ã§oklu state yÃ¶netimi ve action payload",
      content: `Action'a Yeni Veri GÃ¶nderme ve Ã‡oklu State ile Ã‡alÄ±ÅŸma

Redux'ta Ã§oklu state yÃ¶netimi ve action'lara veri gÃ¶nderme tekniklerini Ã¶ÄŸrenelim. Modern React geliÅŸtirmede Ã§oklu state yÃ¶netimi ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Ã‡oklu State YÃ¶netimi

State Slices - Modular state structure, feature-based organization, scalable architecture, maintainable code
Action Payload - Data transmission, state updates, complex data structures, type safety

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- State Slices: User slice (kullanÄ±cÄ± bilgileri), Product slice (Ã¼rÃ¼n bilgileri), Cart slice (sepet bilgileri), UI slice (UI durumu)
- Action Payload: Sepete Ã¼rÃ¼n ekleme action'Ä±na Ã¼rÃ¼n bilgileri gÃ¶nderme
- Reducer Combination: combineReducers ile tÃ¼m slice'larÄ± birleÅŸtirme
- Action Types: Namespaced actions, feature-specific actions

State Organization

1. State Slices - User slice, product slice, cart slice, UI slice
2. Reducer Combination - combineReducers, modular reducers, state isolation, feature separation
3. Action Types - Namespaced actions, feature-specific actions, global actions, consistent naming

Action Payload Patterns

1. Simple Payload - Primitive values, simple objects, direct updates, basic operations
2. Complex Payload - Nested objects, arrays, complex data structures, advanced operations
3. Conditional Payload - Conditional data, dynamic updates, feature flags, user permissions

Best Practices

1. State Structure - Flat state structure, normalized data, entity relationships, efficient updates
2. Action Design - Descriptive action types, minimal payload, consistent structure, type safety
3. Reducer Logic - Pure functions, immutable updates, no side effects, predictable behavior

Advanced Patterns

1. Normalization - Flat data structure, entity management, relationship handling, efficient updates
2. Computed Values - Derived state, selector functions, memoization, performance optimization
3. State Synchronization - Multiple state slices, cross-slice updates, data consistency, conflict resolution
4. Batch Updates - Multiple actions, atomic operations, performance optimization, consistency

State Management Strategies

1. Feature-based - Feature slices, isolated state, modular architecture, team collaboration
2. Domain-based - Business domains, domain slices, cross-cutting concerns, enterprise architecture
3. Hybrid Approach - Combined strategies, flexible organization, scalable architecture, maintainable code

Modern React GeliÅŸtirmede

Ã‡oklu State YÃ¶netimi - Ã‡oklu state yÃ¶netimi
Action Payload - Action payload
State Organization - State organizasyonu
Performance Optimization - Performance optimizasyonu
Best Practices - En iyi uygulamalar

Best Practices

1. Flat state structure kullanÄ±n
2. Normalized data yapÄ±sÄ± oluÅŸturun
3. Descriptive action types kullanÄ±n
4. Pure functions yazÄ±n
5. Performance'Ä± optimize edin

Ne Zaman Ã‡oklu State YÃ¶netimi KullanÄ±n

Large applications geliÅŸtirirken
Complex state logic gerektiÄŸinde
Multiple features gerektiÄŸinde
Team collaboration gerektiÄŸinde
Scalable architecture gerektiÄŸinde`,
      codeExamples: [],
      relatedProjects: [
        "multi-state-management",
        "action-payloads",
        "redux-multiple-state-patterns",
      ],
      resources: [
        {
          id: "redux-multiple-state-docs",
          title: "Redux.js - Ã‡oklu State YÃ¶netimi DokÃ¼mantasyonu",
          url: "https://redux.js.org/usage/structuring-reducers/structuring-reducers",
          type: "documentation",
        },
        {
          id: "redux-multiple-state-guide",
          title: "Ã‡oklu State YÃ¶netimi KÄ±lavuzu",
          url: "https://redux.js.org/usage/structuring-reducers/structuring-reducers",
          type: "tutorial",
        },
        {
          id: "redux-multiple-state-patterns",
          title: "Ã‡oklu State YÃ¶netimi Desenleri",
          url: "https://redux.js.org/usage/structuring-reducers/structuring-reducers",
          type: "article",
        },
      ],
    },
    {
      id: "redux-correct-implementation",
      title: "Redux'Ä± DoÄŸru Ã‡alÄ±ÅŸtÄ±rmak",
      description: "Redux best practices ve doÄŸru implementasyon",
      content: `Redux'Ä± DoÄŸru Ã‡alÄ±ÅŸtÄ±rmak

Redux'Ä± doÄŸru ÅŸekilde nasÄ±l implement edeceÄŸimizi ve best practice'leri Ã¶ÄŸrenelim. Modern React geliÅŸtirmede Redux best practices ve en iyi uygulamalarÄ± Ã¶ÄŸrenin.

Redux Best Practices

Architecture Principles - Single source of truth, immutable state, pure functions, predictable updates
Implementation Guidelines - Proper structure, type safety, performance optimization, error handling

GÃ¼nlÃ¼k Hayattan Ã–rnek

Bir e-ticaret uygulamasÄ± geliÅŸtirdiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n:

- State Structure: Flat state structure, normalized data, entity relationships
- Action Design: Descriptive action types, minimal payload, consistent structure
- Reducer Implementation: Pure functions, immutable updates, no side effects
- Component Integration: Selective subscriptions, memoized selectors, optimized re-renders

DoÄŸru Implementasyon

1. State Structure - Flat state structure, normalized data, entity relationships, efficient updates
2. Action Design - Descriptive action types, minimal payload, consistent structure, type safety
3. Reducer Implementation - Pure functions, immutable updates, no side effects, predictable behavior
4. Component Integration - Selective subscriptions, memoized selectors, optimized re-renders, performance tuning

Best Practices

1. Code Organization - Feature-based structure, modular architecture, clear separation, maintainable code
2. Type Safety - TypeScript integration, action types, state types, selector types
3. Performance - Memoized selectors, optimized re-renders, batch updates, memory management
4. Error Handling - Error boundaries, action errors, state errors, user feedback

Common Mistakes

1. State Mutations - Direct state modification, mutable updates, side effects in reducers, impure functions
2. Over-engineering - Unnecessary complexity, premature optimization, over-abstraction, complex patterns
3. Performance Issues - Unnecessary re-renders, large state objects, inefficient selectors, memory leaks
4. Poor Structure - Unclear organization, tight coupling, hard to test, difficult maintenance

Advanced Best Practices

1. Testing - Unit tests, integration tests, reducer testing, action testing
2. Development Tools - Redux DevTools, time-travel debugging, action inspection, state monitoring
3. Production Optimization - Bundle optimization, performance tuning, error monitoring, analytics integration
4. Team Collaboration - Code standards, documentation, code reviews, knowledge sharing

Implementation Checklist

Do's: Use TypeScript, implement proper error handling, write tests, use DevTools, follow naming conventions
Don'ts: Mutate state directly, put side effects in reducers, over-engineer simple cases, ignore performance, skip error handling

Modern React GeliÅŸtirmede

Redux Best Practices - Redux best practices
Proper Implementation - DoÄŸru implementasyon
Performance Optimization - Performance optimizasyonu
Error Handling - Hata yÃ¶netimi
Team Collaboration - Team collaboration

Best Practices

1. TypeScript kullanÄ±n
2. Proper error handling implement edin
3. Test yazÄ±n
4. DevTools kullanÄ±n
5. Naming conventions takip edin

Ne Zaman Redux Best Practices UygulayÄ±n

Redux implementasyonu yaparken
Large applications geliÅŸtirirken
Team collaboration yaparken
Performance kritik uygulamalarda
Production deployment yaparken`,
      codeExamples: [],
      relatedProjects: [
        "redux-best-practices",
        "proper-implementation",
        "redux-best-practices-patterns",
      ],
      resources: [
        {
          id: "redux-correct-implementation-docs",
          title: "Redux.js - Redux DoÄŸru Implementasyon DokÃ¼mantasyonu",
          url: "https://redux.js.org/style-guide/style-guide",
          type: "documentation",
        },
        {
          id: "redux-correct-implementation-guide",
          title: "Redux DoÄŸru Implementasyon KÄ±lavuzu",
          url: "https://redux.js.org/style-guide/style-guide",
          type: "tutorial",
        },
        {
          id: "redux-correct-implementation-patterns",
          title: "Redux DoÄŸru Implementasyon Desenleri",
          url: "https://redux.js.org/style-guide/style-guide",
          type: "article",
        },
      ],
    },
  ],
};
