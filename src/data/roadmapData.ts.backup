// React öğrenme roadmap verisi
export interface Topic {
  id: string;
  title: string;
  description: string;
  duration: string;
  difficulty: 'easy' | 'medium' | 'hard';
  content: string;
  codeExamples: {
    id: string;
    title: string;
    code: string;
    language: string;
    description: string;
  }[];
  relatedProjects: string[];
  resources: {
    id: string;
    title: string;
    url: string;
    type: 'documentation' | 'tutorial' | 'article' | 'video';
  }[];
}

export interface Category {
  id: string;
  name: string;
  icon: string;
  description: string;
  topics: Topic[];
}

export interface Level {
  id: string;
  name: string;
  order: number;
  icon?: string;
  categories: Category[];
}

export const roadmapData: Level[] = [
  {
    id: 'react-101',
    name: 'React 101 - Başlangıç Seviyesi',
    order: 1,
    categories: [
      {
        id: 'temel-kavramlar',
        name: 'React ile İlgili Temel Kavramlar',
        icon: '📘',
        description: 'React\'in temel kavramları ve felsefesi',
        topics: [
          {
            id: 'react-nedir',
            title: 'React Nedir?',
            description: 'React kütüphanesinin temellerini öğrenin',
            duration: '30 dakika',
            difficulty: 'easy',
            content: `# React Nedir? 🚀

React, kullanıcı arayüzleri (UI) oluşturmak için **Facebook (Meta)** tarafından geliştirilen açık kaynaklı bir JavaScript kütüphanesidir. 2013 yılında piyasaya sürülen React, günümüzde en popüler frontend kütüphanelerinden biridir.

## 📊 React İstatistikleri

- **⭐ GitHub Stars**: 200,000+ (2024)
- **📦 NPM İndirme**: 20+ milyon/hafta
- **🏢 Kullanan Şirketler**: Netflix, Airbnb, Instagram, WhatsApp, Discord
- **👥 Topluluk**: 2+ milyon geliştirici

## 🎯 React'ın Temel Özellikleri

### 1. **🧩 Component Tabanlı Mimari**
React, uygulamaları küçük, yeniden kullanılabilir parçalara (component'lere) böler. Her component kendi mantığını ve görünümünü içerir.

**Avantajları:**
- ✅ Kod tekrarını önler
- ✅ Bakımı kolaylaştırır
- ✅ Test edilebilirlik artar
- ✅ Takım çalışmasını iyileştirir

### 2. **⚡ Virtual DOM (Sanal DOM)**
React, performansı artırmak için Virtual DOM kullanır. Gerçek DOM'u değiştirmek yerine, önce sanal bir kopyasında değişiklikleri yapar.

**Nasıl Çalışır:**
1. State değiştiğinde yeni Virtual DOM oluşturur
2. Eski ve yeni Virtual DOM'u karşılaştırır (Diffing)
3. Sadece değişen kısımları gerçek DOM'a uygular (Reconciliation)

### 3. **📤 Tek Yönlü Veri Akışı (One-Way Data Flow)**
Veriler üst component'lerden alt component'lere akar. Bu, veri akışını öngörülebilir hale getirir.

**Avantajları:**
- 🔍 Debug etmesi kolay
- 🐛 Hata ayıklama basit
- 📈 Performans optimizasyonu
- 🧪 Test yazması kolay

### 4. **📝 JSX (JavaScript XML)**
HTML benzeri syntax ile JavaScript kodunu birleştirme imkanı sağlar. JSX, React elementleri oluşturmanın kolay yoludur.

**Örnek:**
\`\`\`jsx
const element = <h1>Merhaba, {name}!</h1>;
\`\`\`

## 🆚 React vs Diğer Framework'ler

| Özellik | React | Angular | Vue.js |
|---------|-------|---------|--------|
| **Tip** | Kütüphane | Framework | Framework |
| **Öğrenme Eğrisi** | Orta | Zor | Kolay |
| **Performans** | Yüksek | Yüksek | Yüksek |
| **Topluluk** | Çok Büyük | Büyük | Büyük |
| **Esneklik** | Yüksek | Orta | Yüksek |

## 🌟 Neden React?

### ✅ **Avantajları**
- **🚀 Performans**: Virtual DOM sayesinde hızlı
- **🔧 Esneklik**: Sadece View katmanıyla ilgilenir
- **👥 Topluluk**: Büyük ve aktif geliştirici topluluğu
- **📚 Ekosistem**: Zengin kütüphane ve araç desteği
- **📱 Mobil**: React Native ile mobil uygulama geliştirme
- **🔄 Hot Reload**: Anlık kod değişikliği görüntüleme
- **🧪 Test**: Kolay test yazma imkanı

### ❌ **Dezavantajları**
- **📖 Öğrenme Eğrisi**: Başlangıçta karmaşık gelebilir
- **🔧 Konfigürasyon**: Bazen manuel kurulum gerekir
- **📚 Dokümantasyon**: Hızlı değişim nedeniyle güncel tutma zorluğu

## 🏗️ React Ekosistemi

### **🔧 Temel Araçlar**
- **Create React App**: Hızlı proje başlatma
- **Vite**: Modern build tool
- **Webpack**: Module bundler
- **Babel**: JavaScript compiler

### **📦 Popüler Kütüphaneler**
- **React Router**: Sayfa yönlendirme
- **Redux**: State yönetimi
- **Axios**: HTTP istekleri
- **Material-UI**: UI component kütüphanesi
- **Styled Components**: CSS-in-JS

### **🧪 Test Araçları**
- **Jest**: Test framework
- **React Testing Library**: Component testleri
- **Cypress**: E2E testleri

## 🎯 React Kullanım Alanları

### **🌐 Web Uygulamaları**
- **SPA (Single Page Application)**: Tek sayfa uygulamaları
- **Dashboard**: Yönetim panelleri
- **E-commerce**: E-ticaret siteleri
- **Social Media**: Sosyal medya platformları

### **📱 Mobil Uygulamalar**
- **React Native**: iOS ve Android uygulamaları
- **Expo**: Hızlı mobil geliştirme

### **🖥️ Desktop Uygulamaları**
- **Electron**: Masaüstü uygulamaları
- **Proton Native**: Native desktop uygulamaları

## 🚀 React Öğrenme Yolculuğu

### **📚 Başlangıç Seviyesi**
1. JavaScript ES6+ temelleri
2. HTML/CSS bilgisi
3. Component kavramı
4. JSX syntax
5. Props ve State

### **📈 Orta Seviye**
1. React Hooks
2. Event Handling
3. Form yönetimi
4. API entegrasyonu
5. Routing

### **🎯 İleri Seviye**
1. Performance optimizasyonu
2. State management (Redux)
3. Testing
4. Deployment
5. Advanced patterns

## 💡 React Best Practices

### **✅ Yapılması Gerekenler**
- Component'leri küçük ve odaklanmış tutun
- Props'ları destructure edin
- Key prop'unu liste render'larında kullanın
- Functional component'leri tercih edin
- Custom hook'lar yazın

### **❌ Yapılmaması Gerekenler**
- State'i doğrudan değiştirmeyin
- Component içinde render'da hesaplama yapmayın
- Props drilling'den kaçının
- Gereksiz re-render'lara neden olmayın

## 🔮 React'ın Geleceği

### **🚀 Yeni Özellikler**
- **Concurrent Features**: Eşzamanlı rendering
- **Suspense**: Veri yükleme yönetimi
- **Server Components**: Sunucu tarafı component'ler
- **Automatic Batching**: Otomatik batch işlemleri

### **📈 Trendler**
- **TypeScript**: Tip güvenliği
- **Next.js**: Full-stack React framework
- **Remix**: Modern web framework
- **Turbopack**: Hızlı bundler

## 🎓 Sonuç

React, modern web geliştirmenin vazgeçilmez araçlarından biridir. Component tabanlı mimarisi, güçlü ekosistemi ve sürekli gelişen özellikleri ile hem yeni başlayanlar hem de deneyimli geliştiriciler için mükemmel bir seçimdir.

**React öğrenmeye başlamak için:**
1. JavaScript temellerini güçlendirin
2. Resmi dokümantasyonu inceleyin
3. Küçük projeler yapın
4. Toplulukla etkileşime geçin
5. Sürekli pratik yapın

**Unutmayın:** React sadece bir araçtır. Asıl önemli olan problem çözme becerilerinizi geliştirmektir! 🎯`,
            codeExamples: [
              {
                id: 'hello-react',
                title: 'İlk React Component',
                code: `import React from 'react';

function HelloReact() {
  return <h1>Merhaba React!</h1>;
}

export default HelloReact;`,
                language: 'jsx',
                description: 'Basit bir React component örneği'
              }
            ],
            relatedProjects: ['hello-world-app'],
            resources: [
              {
                id: 'react-docs',
                title: 'React Resmi Dokümantasyonu (Türkçe)',
                url: 'https://tr.react.dev',
                type: 'documentation'
              },
              {
                id: 'react-tutorial',
                title: 'React Tutorial - Tic Tac Toe',
                url: 'https://tr.react.dev/learn/tutorial-tic-tac-toe',
                type: 'tutorial'
              },
              {
                id: 'react-blog',
                title: 'React Blog - En Son Haberler',
                url: 'https://react.dev/blog',
                type: 'article'
              },
              {
                id: 'react-community',
                title: 'React Topluluğu',
                url: 'https://react.dev/community/versioning-policy',
                type: 'article'
              },
              {
                id: 'react-github',
                title: 'React GitHub Repository',
                url: 'https://github.com/facebook/react',
                type: 'documentation'
              },
              {
                id: 'react-stackoverflow',
                title: 'React Stack Overflow',
                url: 'https://stackoverflow.com/questions/tagged/reactjs',
                type: 'article'
              },
              {
                id: 'react-discord',
                title: 'React Discord Topluluğu',
                url: 'https://discord.gg/react',
                type: 'article'
              },
              {
                id: 'react-youtube',
                title: 'React YouTube Kanalı',
                url: 'https://www.youtube.com/c/ReactConf',
                type: 'video'
              }
            ]
          }
        ]
      },
      {
        id: 'gelistirme-ortami',
        name: 'Geliştirme Ortamının Hazırlanması',
        icon: '⚙️',
        description: 'React geliştirme için gerekli araçlar ve kurulumlar',
        topics: [
          {
            id: 'nelere-ihtiyacimiz-var',
            title: 'Nelere İhtiyacımız Olacak?',
            description: 'React geliştirme için gerekli araçlar ve önkoşullar',
            duration: '15 dakika',
            difficulty: 'easy',
            content: `# Nelere İhtiyacımız Olacak? 🛠️

React geliştirmeye başlamadan önce hangi araçlara ve bilgilere ihtiyacımız olduğunu bilmek çok önemlidir. İşte React geliştirme yolculuğunuz için gerekli her şey:

## 🎯 React Geliştirme Gereksinimleri

**📊 Geliştirme Süreci Şeması yukarıda görüntülenmektedir.**

## 🎯 1. Editör Seçimi

React geliştirme yaparken kullanabileceğiniz editörler:

### **💻 Visual Studio Code (Önerilen)**
- **Ücretsiz** ve açık kaynak
- **Zengin eklenti** ekosistemi
- **React için özel** eklentiler
- **IntelliSense** desteği
- **Git entegrasyonu**

### **🚀 WebStorm (IDE)**
- **JetBrains** ürünü
- **Öğrenciler için ücretsiz**
- **Güçlü debugging** araçları
- **Refactoring** desteği
- **Database** entegrasyonu

### **⚛️ Atom**
- **GitHub** tarafından geliştirildi
- **Hackable** editör
- **Paket sistemi**
- **Teletype** işbirliği

### **💎 Sublime Text**
- **Hızlı** ve hafif
- **Çoklu seçim** özelliği
- **Paket kontrolü**
- **Ücretli** lisans

### **🎨 Brackets**
- **Adobe** tarafından geliştirildi
- **Live Preview** özelliği
- **CSS** odaklı
- **Ücretsiz**

## 🛠️ 2. Gerekli Yazılımlar

### **📦 Node.js ve NPM**
- **Node.js**: JavaScript runtime ortamı
- **NPM**: Paket yöneticisi
- **NPX**: Paket çalıştırıcı
- **Platform bağımsız** kurulum

### **📁 Git**
- **Versiyon kontrolü**
- **Proje yönetimi**
- **İşbirliği** araçları
- **GitHub/GitLab** entegrasyonu

## 📚 3. Önkoşul Bilgiler

React öğrenmeye başlamadan önce şunları bilmelisiniz:

### **🌐 HTML (HyperText Markup Language)**
- **Semantic HTML** yapısı
- **Form** elementleri
- **Accessibility** temelleri
- **SEO** optimizasyonu

### **🎨 CSS (Cascading Style Sheets)**
- **Flexbox** ve **Grid** layout
- **Responsive** tasarım
- **CSS Variables**
- **Animasyonlar** ve **transitions**

### **⚡ JavaScript**
- **ES6+** özellikleri
- **Arrow functions**
- **Destructuring**
- **Template literals**
- **Modules** (import/export)

### **🔄 ECMAScript**
- **Async/await**
- **Promises**
- **Classes**
- **Spread/Rest** operatörleri
- **Map/Set** veri yapıları

## ⏱️ 4. Zaman Çizelgesi

| Aşama | Süre | Zorluk | Açıklama |
|-------|------|--------|----------|
| **Kurulum** | 1 saat | ⭐ | Tüm araçların kurulumu |
| **İlk Proje** | 30 dk | ⭐⭐ | Create React App ile başlangıç |
| **Temel Kavramlar** | 1 hafta | ⭐⭐ | Component, JSX, Props |
| **State Yönetimi** | 1 hafta | ⭐⭐⭐ | useState, useEffect |
| **Routing** | 3 gün | ⭐⭐ | React Router |
| **API Entegrasyonu** | 1 hafta | ⭐⭐⭐ | Axios, Fetch |
| **Deployment** | 30 dk | ⭐⭐ | Netlify, Vercel |

## 💡 5. Öneriler

### **🎓 Öğrenciler İçin:**
- **WebStorm** kullanın (ücretsiz lisans)
- **GitHub Student Pack**'ten yararlanın
- **Stack Overflow**'da aktif olun
- **Discord** topluluklarına katılın

### **💼 Profesyoneller İçin:**
- **VS Code** ile başlayın
- **TypeScript** öğrenin
- **Testing** araçlarını kullanın
- **CI/CD** pipeline'ları kurun

### **🚀 Hızlı Başlangıç:**
- **CodeSandbox** ile deneme yapın
- **Create React App** kullanın
- **Resmi dokümantasyonu** takip edin
- **Pratik projeler** yapın

## 🔍 6. Kontrol Listesi

Kuruluma başlamadan önce kontrol edin:

- [ ] **Node.js** kurulu mu? (\`node --version\`)
- [ ] **NPM** çalışıyor mu? (\`npm --version\`)
- [ ] **Git** kurulu mu? (\`git --version\`)
- [ ] **Editör** seçildi mi?
- [ ] **HTML/CSS/JS** bilgisi var mı?
- [ ] **İnternet bağlantısı** stabil mi?

## 🎯 Sonraki Adım

Tüm gereksinimler hazır! Şimdi **Node.js Kurulumu** ile başlayabiliriz.

**Hazır mısınız? Node.js kurulumuna geçelim! 🚀**`,
            codeExamples: [
              {
                id: 'prerequisites-check',
                title: 'Önkoşul Kontrolü',
                code: `// Node.js versiyon kontrolü
node --version
// Beklenen: v18.17.0 veya üzeri

// NPM versiyon kontrolü
npm --version
// Beklenen: 9.6.7 veya üzeri

// Git versiyon kontrolü
git --version
// Beklenen: git version 2.x.x

// Editör kontrolü (VS Code)
code --version
// Beklenen: VS Code versiyonu`,
                language: 'bash',
                description: 'Gerekli araçların kurulum kontrolü'
              },
              {
                id: 'editor-setup',
                title: 'VS Code Eklenti Kurulumu',
                code: `# VS Code eklentileri (komut satırından)
code --install-extension ms-vscode.vscode-typescript-next
code --install-extension bradlc.vscode-tailwindcss
code --install-extension esbenp.prettier-vscode
code --install-extension ms-vscode.vscode-eslint
code --install-extension formulahendry.auto-rename-tag
code --install-extension ms-vscode.vscode-json

# Veya VS Code içinden:
# Ctrl+Shift+X -> Eklenti arama -> Kurulum`,
                language: 'bash',
                description: 'VS Code için gerekli eklentilerin kurulumu'
              }
            ],
            relatedProjects: ['prerequisites-setup'],
            resources: [
              {
                id: 'vscode-download',
                title: 'VS Code İndirme',
                url: 'https://code.visualstudio.com/download',
                type: 'documentation'
              },
              {
                id: 'webstorm-download',
                title: 'WebStorm İndirme',
                url: 'https://www.jetbrains.com/webstorm/download/',
                type: 'documentation'
              },
              {
                id: 'nodejs-download',
                title: 'Node.js İndirme',
                url: 'https://nodejs.org/en/download/',
                type: 'documentation'
              },
              {
                id: 'git-download',
                title: 'Git İndirme',
                url: 'https://git-scm.com/downloads',
                type: 'documentation'
              },
              {
                id: 'html-tutorial',
                title: 'HTML Tutorial',
                url: 'https://developer.mozilla.org/en-US/docs/Web/HTML',
                type: 'tutorial'
              },
              {
                id: 'css-tutorial',
                title: 'CSS Tutorial',
                url: 'https://developer.mozilla.org/en-US/docs/Web/CSS',
                type: 'tutorial'
              },
              {
                id: 'javascript-tutorial',
                title: 'JavaScript Tutorial',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript',
                type: 'tutorial'
              }
            ]
          },
          {
            id: 'node-js-kurulumu',
            title: 'Node.js Kurulumu',
            description: 'Node.js ve NPM kurulumu',
            duration: '15 dakika',
            difficulty: 'easy',
            content: `# Node.js Kurulumu 🛠️

Node.js, React geliştirmek için gerekli olan JavaScript runtime ortamıdır. Node.js olmadan React uygulamaları geliştiremezsiniz.

## 🎯 Node.js Nedir?

Node.js, JavaScript'i tarayıcı dışında çalıştırmamızı sağlayan bir runtime ortamıdır. V8 JavaScript engine'ini kullanır ve asenkron, event-driven mimariye sahiptir.

## 📊 Node.js İstatistikleri

- **⭐ GitHub Stars**: 100,000+
- **📦 NPM Paketleri**: 2+ milyon
- **🏢 Kullanan Şirketler**: Netflix, Uber, LinkedIn, PayPal
- **👥 Topluluk**: 30+ milyon geliştirici

## 🚀 Kurulum Adımları

### 1. **Resmi Siteden İndirin**
- **URL**: https://nodejs.org/
- **LTS Versiyonu** seçin (Long Term Support)
- **Current Versiyonu** değil, **LTS** versiyonunu indirin

### 2. **Kurulum Dosyasını Çalıştırın**
- İndirilen dosyayı çalıştırın
- Kurulum sihirbazını takip edin
- Varsayılan ayarları kabul edin

### 3. **Kurulumu Doğrulayın**
\`\`\`bash
node --version
npm --version
\`\`\`

**Beklenen Çıktı:**
\`\`\`bash
v18.17.0
9.6.7
\`\`\`

## 📦 NPM Nedir?

NPM (Node Package Manager), JavaScript paketlerini yönetmek için kullanılan araçtır.

### **NPM'in Özellikleri:**
- **📦 Paket Yönetimi**: Kütüphaneleri kurma/kaldırma
- **📋 Bağımlılık Yönetimi**: Proje bağımlılıklarını takip
- **🔧 Script Yönetimi**: Otomatik görevler
- **🌐 Registry**: 2+ milyon paket

### **Temel NPM Komutları:**
\`\`\`bash
# Paket kurma
npm install package-name

# Global paket kurma
npm install -g package-name

# Paket kaldırma
npm uninstall package-name

# Bağımlılıkları kurma
npm install

# Script çalıştırma
npm run script-name
\`\`\`

## 🔧 Node.js Versiyonları

### **LTS (Long Term Support)**
- **Önerilen versiyon**
- 30 ay destek
- Kararlı ve güvenli
- Production için ideal

### **Current**
- En son özellikler
- 8 ay destek
- Deneysel özellikler
- Geliştirme için uygun

## 🛠️ Node.js Araçları

### **NPX (Node Package Execute)**
- Paketleri global kurmadan çalıştırma
- Geçici paket kullanımı
- Create React App için gerekli

\`\`\`bash
# NPX kullanımı
npx create-react-app my-app
npx eslint --init
\`\`\`

### **NVM (Node Version Manager)**
- Birden fazla Node.js versiyonu yönetme
- Proje bazlı versiyon değiştirme
- Kolay versiyon güncelleme

\`\`\`bash
# NVM kurulumu (macOS/Linux)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash

# Node.js versiyonu değiştirme
nvm install 18.17.0
nvm use 18.17.0
\`\`\`

## 🎯 React için Node.js Gereksinimleri

### **Minimum Gereksinimler:**
- **Node.js**: 16.0.0 veya üzeri
- **NPM**: 7.0.0 veya üzeri
- **RAM**: 4GB (önerilen 8GB)
- **Disk**: 1GB boş alan

### **Önerilen Gereksinimler:**
- **Node.js**: 18.17.0 LTS
- **NPM**: 9.6.7
- **RAM**: 8GB
- **Disk**: 5GB boş alan

## 🔍 Sorun Giderme

### **Yaygın Sorunlar:**

#### 1. **"node is not recognized"**
\`\`\`bash
# Çözüm: PATH'e Node.js ekleyin
# Windows: Sistem değişkenlerine ekleyin
# macOS/Linux: ~/.bashrc veya ~/.zshrc'ye ekleyin
export PATH="/usr/local/bin:$PATH"
\`\`\`

#### 2. **NPM Permission Hatası**
\`\`\`bash
# Çözüm: NPM prefix'i değiştirin
npm config set prefix ~/.npm-global
export PATH=~/.npm-global/bin:$PATH
\`\`\`

#### 3. **Cache Sorunları**
\`\`\`bash
# Çözüm: NPM cache'i temizleyin
npm cache clean --force
\`\`\`

## 💡 İpuçları

- **LTS versiyonunu kullanın**: Kararlılık için
- **NVM kullanın**: Versiyon yönetimi için
- **NPX kullanın**: Global kurulum yerine
- **Cache'i temizleyin**: Sorun yaşadığınızda
- **Dokümantasyonu okuyun**: Her zaman güncel bilgi

## 🎓 Sonraki Adım

Node.js kurulumu tamamlandı! Şimdi sırada **VS Code ve Eklentiler** var. Doğru editör ve eklentilerle geliştirme hızınızı %300 artırabilirsiniz.

**Hazır mısınız? VS Code kurulumuna geçelim! 💻**`,
            codeExamples: [
              {
                id: 'nodejs-install-example',
                title: 'Node.js Kurulum Kontrolü',
                code: `# Node.js ve NPM versiyonlarını kontrol etme
node --version
npm --version

# NPM cache durumunu kontrol etme
npm cache verify

# Global paketleri listeleme
npm list -g --depth=0

# NPM konfigürasyonunu görüntüleme
npm config list

# NPM registry'yi kontrol etme
npm config get registry`,
                language: 'bash',
                description: 'Node.js kurulumunu doğrulama komutları'
              },
              {
                id: 'npx-example',
                title: 'NPX Kullanım Örnekleri',
                code: `# Create React App ile proje oluşturma
npx create-react-app my-react-app

# ESLint kurulumu
npx eslint --init

# Prettier kurulumu
npx prettier --init

# TypeScript kurulumu
npx tsc --init

# Paket güncelleme kontrolü
npx npm-check-updates`,
                language: 'bash',
                description: 'NPX ile paket yönetimi örnekleri'
              }
            ],
            relatedProjects: ['nodejs-setup'],
            resources: [
              {
                id: 'nodejs-docs',
                title: 'Node.js Resmi Dokümantasyonu',
                url: 'https://nodejs.org/docs/',
                type: 'documentation'
              },
              {
                id: 'npm-docs',
                title: 'NPM Dokümantasyonu',
                url: 'https://docs.npmjs.com/',
                type: 'documentation'
              },
              {
                id: 'nvm-docs',
                title: 'NVM Kurulum Rehberi',
                url: 'https://github.com/nvm-sh/nvm',
                type: 'documentation'
              },
              {
                id: 'nodejs-tutorial',
                title: 'Node.js Tutorial',
                url: 'https://nodejs.org/en/learn/',
                type: 'tutorial'
              }
            ]
          },
          {
            id: 'create-react-app',
            title: 'Create React App ile Proje Oluşturma',
            description: 'NPX kullanarak ilk React uygulamanızı oluşturun',
            duration: '20 dakika',
            difficulty: 'easy',
            content: `# Create React App ile Proje Oluşturma

Create React App, React uygulamaları oluşturmak için resmi bir araçtır.

## Proje Oluşturma

\`\`\`bash
npx create-react-app my-react-app
cd my-react-app
npm start
\`\`\`

## Proje Yapısı

\`\`\`
my-react-app/
├── public/
├── src/
├── package.json
└── README.md
\`\`\``,
            codeExamples: [
              {
                id: 'basic-app',
                title: 'Temel App.js',
                code: `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <h1>Merhaba React!</h1>
    </div>
  );
}

export default App;`,
                language: 'jsx',
                description: 'Basit React uygulaması'
              }
            ],
            relatedProjects: ['first-react-app'],
            resources: [
              {
                id: 'cra-docs',
                title: 'Create React App Dokümantasyonu',
                url: 'https://create-react-app.dev/',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'gelistirme-sureci',
            title: 'React Geliştirme Süreci',
            description: 'React geliştirme sürecinin adım adım şeması',
            duration: '10 dakika',
            difficulty: 'easy',
            content: `# React Geliştirme Süreci 🚀

React geliştirme sürecini anlamak, başarılı projeler oluşturmanın ilk adımıdır. İşte React geliştirme yolculuğunuzun haritası:

## 📊 Geliştirme Süreci Şeması

**📊 Geliştirme Süreci Şeması yukarıda görüntülenmektedir.**

## 🎯 7 Adımlı Geliştirme Süreci

### 1. **🛠️ Node.js Kurulumu**
- JavaScript runtime ortamı
- NPM paket yöneticisi
- Modern JavaScript özellikleri

### 2. **💻 VS Code ve Eklentiler**
- Kod editörü kurulumu
- React eklentileri
- Geliştirici araçları

### 3. **📁 Git Repository**
- Versiyon kontrolü
- Proje yönetimi
- İşbirliği araçları

### 4. **📦 NPM Paketleri**
- Bağımlılık yönetimi
- Kütüphane kurulumu
- Script yönetimi

### 5. **⚛️ React Projesi**
- Create React App
- Proje yapısı
- İlk component

### 6. **🎨 Geliştirme**
- Component geliştirme
- State yönetimi
- API entegrasyonu

### 7. **🚀 Deployment**
- Production build
- Hosting seçenekleri
- Performans optimizasyonu

## ⏱️ Zaman Çizelgesi

| Adım | Süre | Zorluk |
|------|------|--------|
| Node.js Kurulumu | 15 dk | ⭐ |
| VS Code Kurulumu | 10 dk | ⭐ |
| Git Repository | 5 dk | ⭐ |
| NPM Paketleri | 10 dk | ⭐⭐ |
| React Projesi | 20 dk | ⭐⭐ |
| Geliştirme | 2-4 hafta | ⭐⭐⭐ |
| Deployment | 30 dk | ⭐⭐ |

## 🎯 Her Adımın Önemi

### **🛠️ Node.js - Temel**
React uygulamaları Node.js üzerinde çalışır. Bu olmadan hiçbir şey yapamazsınız.

### **💻 VS Code - Verimlilik**
Doğru eklentilerle %300 daha hızlı kod yazabilirsiniz.

### **📁 Git - Güvenlik**
Kodunuzu kaybetmek istemiyorsanız Git şarttır.

### **📦 NPM - Bağımlılıklar**
Modern React projeleri yüzlerce paket kullanır.

### **⚛️ React - Ana Konu**
Asıl geliştirme burada başlar.

### **🎨 Geliştirme - Yaratıcılık**
Hayal gücünüzü kodla buluşturduğunuz yer.

### **🚀 Deployment - Sonuç**
Çalışan uygulamanızı dünyayla paylaşın.

## 💡 İpuçları

- **Adım adım ilerleyin**: Her adımı tamamlamadan diğerine geçmeyin
- **Dokümantasyon okuyun**: Her araç için resmi dokümantasyonu inceleyin
- **Pratik yapın**: Teorik bilgiyi pratikle pekiştirin
- **Topluluktan yardım alın**: Stack Overflow, Discord, GitHub
- **Sürekli öğrenin**: Teknoloji hızla değişiyor

## 🎓 Sonraki Adımlar

Bu şemayı takip ederek React geliştirme yolculuğunuza başlayabilirsiniz. Her adımda detaylı rehberler ve örnekler bulacaksınız.

**Hazır mısınız? İlk adıma geçelim! 🚀**`,
            codeExamples: [
              {
                id: 'development-process-example',
                title: 'Geliştirme Süreci Örneği',
                code: `// 1. Node.js kurulumu kontrolü
node --version
npm --version

// 2. React projesi oluşturma
npx create-react-app my-app
cd my-app

// 3. Geliştirme sunucusunu başlatma
npm start

// 4. Git repository oluşturma
git init
git add .
git commit -m "Initial commit"

// 5. Production build
npm run build`,
                language: 'bash',
                description: 'React geliştirme sürecinin temel komutları'
              }
            ],
            relatedProjects: ['development-setup'],
            resources: [
              {
                id: 'react-dev-process',
                title: 'React Geliştirme Süreci Rehberi',
                url: 'https://tr.react.dev/learn',
                type: 'documentation'
              },
              {
                id: 'nodejs-install',
                title: 'Node.js Kurulum Rehberi',
                url: 'https://nodejs.org/en/download/',
                type: 'documentation'
              },
              {
                id: 'vscode-setup',
                title: 'VS Code React Kurulumu',
                url: 'https://code.visualstudio.com/docs/languages/javascript',
                type: 'tutorial'
              }
            ]
          }
        ]
      },
      {
        id: 'react-icin-javascript',
        name: 'React İçin JavaScript',
        icon: '⚡',
        description: 'React geliştirme için gerekli JavaScript temelleri',
        topics: [
          {
            id: 'var-let-const',
            title: 'Var, Let ve Const Keywords',
            description: 'JavaScript değişken tanımlama anahtar kelimeleri',
            duration: '20 dakika',
            difficulty: 'easy',
            content: `# Var, Let ve Const Keywords 🔑

JavaScript'de değişken tanımlama için üç anahtar kelime kullanılır: **var**, **let** ve **const**. Bu anahtar kelimelerin her biri, değişkenlerin nasıl tanımlanacağını ve nasıl kullanılacağını belirler.

## 1. **Var** - Eski Yöntem

\`var\` anahtar kelimesi, JavaScript'in eski sürümlerinde en yaygın olarak kullanılan anahtar kelime olan var, değişken tanımlamak için kullanılır.

\`\`\`javascript
var x = 5;
var y = "Merhaba";
\`\`\`

### Var'ın Özellikleri:
- ✅ **Hoisting**: Değişken tanımlaması yapılmadan önce bile kullanılabilir
- ✅ **Function Scope**: Sadece fonksiyon içinde geçerli
- ✅ **Redeclaration**: Aynı değişken tekrar tanımlanabilir

\`\`\`javascript
console.log(a); // undefined (hoisting)
var a = 10;
var a = 20; // Tekrar tanımlanabilir
\`\`\`

## 2. **Let** - Modern Yöntem

ES6 sürümünde eklenen \`let\` anahtar kelimesi, \`var\` anahtar kelimesine benzer şekilde değişken tanımlamak için kullanılır.

\`\`\`javascript
let a = 7;
let b = 8;
\`\`\`

### Let'in Özellikleri:
- ❌ **Hoisting Yok**: Değişken tanımlaması yapılmadan önce kullanılamaz
- ✅ **Block Scope**: Sadece tanımlandığı blok içinde geçerli
- ❌ **Redeclaration**: Aynı değişken tekrar tanımlanamaz

\`\`\`javascript
console.log(a); // ReferenceError
let a = 10;
let a = 20; // SyntaxError: Identifier 'a' has already been declared

if (true) {
  let c = a - b;
  console.log(c); // 1
}
console.log(c); // ReferenceError: c is not defined
\`\`\`

## 3. **Const** - Sabit Değerler

ES6 sürümünde eklenen \`const\` anahtar kelimesi, sabit değerler için kullanılır.

\`\`\`javascript
const PI = 3.14;
const API_URL = "https://api.example.com";
\`\`\`

### Const'un Özellikleri:
- ❌ **Hoisting Yok**: Değişken tanımlaması yapılmadan önce kullanılamaz
- ✅ **Block Scope**: Sadece tanımlandığı blok içinde geçerli
- ❌ **Redeclaration**: Aynı değişken tekrar tanımlanamaz
- ❌ **Reassignment**: Değer değiştirilemez

\`\`\`javascript
const PI = 3.14;
PI = 3.15; // TypeError: Assignment to constant variable

const user = { name: "John" };
user.name = "Jane"; // ✅ Obje içeriği değiştirilebilir
user = {}; // ❌ Obje referansı değiştirilemez
\`\`\`

## 🎯 React'te Kullanım

### **useState Hook'unda:**
\`\`\`javascript
const [count, setCount] = useState(0); // const kullanılır
\`\`\`

### **Component Props'unda:**
\`\`\`javascript
const MyComponent = ({ name, age }) => { // const kullanılır
  return <div>{name} - {age}</div>;
};
\`\`\`

### **Event Handler'larda:**
\`\`\`javascript
const handleClick = () => { // const kullanılır
  setCount(count + 1);
};
\`\`\`

## 📋 Özet

| Özellik | var | let | const |
|---------|-----|-----|-------|
| Hoisting | ✅ | ❌ | ❌ |
| Block Scope | ❌ | ✅ | ✅ |
| Redeclaration | ✅ | ❌ | ❌ |
| Reassignment | ✅ | ✅ | ❌ |

## 💡 React'te Önerilen Kullanım

- **const**: Çoğu durumda (component'ler, fonksiyonlar, sabitler)
- **let**: Döngülerde ve koşullu değişkenlerde
- **var**: Kullanmayın (eski yöntem)

**Sonuç**: Modern JavaScript ve React geliştirmede \`const\` ve \`let\` kullanın, \`var\` kullanmaktan kaçının!`,
            codeExamples: [
              {
                id: 'var-let-const-examples',
                title: 'Var, Let, Const Örnekleri',
                code: `// Var örneği
var name = "John";
var name = "Jane"; // Tekrar tanımlanabilir
console.log(name); // "Jane"

// Let örneği
let age = 25;
// let age = 30; // Hata: Tekrar tanımlanamaz
age = 30; // Değer değiştirilebilir

// Const örneği
const PI = 3.14;
// PI = 3.15; // Hata: Değer değiştirilemez

// React'te kullanım
const [count, setCount] = useState(0);
const handleClick = () => setCount(count + 1);`,
                language: 'javascript',
                description: 'Var, let ve const kullanım örnekleri'
              }
            ],
            relatedProjects: ['javascript-basics'],
            resources: [
              {
                id: 'mdn-var-let-const',
                title: 'MDN: Var, Let, Const',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'export-import',
            title: 'Export ve Import (Modules)',
            description: 'JavaScript modül sistemi ve import/export kullanımı',
            duration: '25 dakika',
            difficulty: 'easy',
            content: `# Export ve Import (Modules) 📦

JavaScript'te modülerliği sağlamak için \`export\` ve \`import\` anahtar kelimeleri kullanılır. Bu anahtar kelimeler sayesinde, bir JavaScript dosyasındaki değişkenleri, fonksiyonları veya sınıfları başka bir dosyada kullanabiliriz.

## 🎯 Modül Sistemi Nedir?

Modül sistemi, kodunuzu daha organize ve yeniden kullanılabilir hale getirir. Her dosya bir modül olarak çalışır ve diğer dosyalarla veri paylaşabilir.

## 📤 Export (Dışa Aktarma)

### **Named Export:**
\`\`\`javascript
// dosya1.js
export const name = "John";
export const age = 30;
export function greet() {
  return "Hello!";
}
\`\`\`

### **Default Export:**
\`\`\`javascript
// dosya1.js
export default function sayHello() {
  console.log("Hello!");
}
\`\`\`

### **Mixed Export:**
\`\`\`javascript
// dosya1.js
export const name = "John";
export const age = 30;

export default function sayHello() {
  console.log("Hello!");
}
\`\`\`

## 📥 Import (İçe Aktarma)

### **Named Import:**
\`\`\`javascript
// dosya2.js
import { name, age } from './dosya1.js';
console.log(name); // "John"
console.log(age); // 30
\`\`\`

### **Default Import:**
\`\`\`javascript
// dosya2.js
import sayHello from './dosya1.js';
sayHello(); // "Hello!"
\`\`\`

### **Mixed Import:**
\`\`\`javascript
// dosya2.js
import sayHello, { name, age } from './dosya1.js';
sayHello(); // "Hello!"
console.log(name); // "John"
\`\`\`

### **Alias Import:**
\`\`\`javascript
// dosya2.js
import { name as userName, age as userAge } from './dosya1.js';
console.log(userName); // "John"
console.log(userAge); // 30
\`\`\`

### **Namespace Import:**
\`\`\`javascript
// dosya2.js
import * as utils from './dosya1.js';
console.log(utils.name); // "John"
console.log(utils.age); // 30
utils.greet(); // "Hello!"
\`\`\`

## ⚛️ React'te Kullanım

### **Component Export:**
\`\`\`javascript
// UserCard.jsx
import React from 'react';

const UserCard = ({ name, email }) => {
  return (
    <div>
      <h2>{name}</h2>
      <p>{email}</p>
    </div>
  );
};

export default UserCard;
\`\`\`

### **Component Import:**
\`\`\`javascript
// App.jsx
import React from 'react';
import UserCard from './UserCard';

function App() {
  return (
    <div>
      <UserCard name="John" email="john@example.com" />
    </div>
  );
}

export default App;
\`\`\`

### **Multiple Components:**
\`\`\`javascript
// components/index.js
export { default as UserCard } from './UserCard';
export { default as ProductCard } from './ProductCard';
export { default as Header } from './Header';
\`\`\`

### **Import Multiple Components:**
\`\`\`javascript
// App.jsx
import React from 'react';
import { UserCard, ProductCard, Header } from './components';

function App() {
  return (
    <div>
      <Header />
      <UserCard name="John" email="john@example.com" />
      <ProductCard title="Laptop" price="1000" />
    </div>
  );
}

export default App;
\`\`\`

### **Hook Export/Import:**
\`\`\`javascript
// hooks/useCounter.js
import { useState } from 'react';

export const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  
  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(initialValue);
  
  return { count, increment, decrement, reset };
};
\`\`\`

### **Hook Import:**
\`\`\`javascript
// Counter.jsx
import React from 'react';
import { useCounter } from './hooks/useCounter';

const Counter = () => {
  const { count, increment, decrement, reset } = useCounter(0);
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};

export default Counter;
\`\`\`

### **Utility Functions:**
\`\`\`javascript
// utils/helpers.js
export const formatDate = (date) => {
  return new Date(date).toLocaleDateString();
};

export const capitalize = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

export const debounce = (func, delay) => {
  let timeoutId;
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func.apply(null, args), delay);
  };
};
\`\`\`

### **Utility Import:**
\`\`\`javascript
// UserProfile.jsx
import React from 'react';
import { formatDate, capitalize } from '../utils/helpers';

const UserProfile = ({ user }) => {
  return (
    <div>
      <h2>{capitalize(user.name)}</h2>
      <p>Joined: {formatDate(user.joinDate)}</p>
    </div>
  );
};

export default UserProfile;
\`\`\`

## 🔄 Dynamic Import

### **Lazy Loading:**
\`\`\`javascript
// App.jsx
import React, { Suspense, lazy } from 'react';

const LazyComponent = lazy(() => import('./LazyComponent'));

function App() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <LazyComponent />
      </Suspense>
    </div>
  );
}

export default App;
\`\`\`

### **Conditional Import:**
\`\`\`javascript
// utils/loadFeature.js
export const loadFeature = async (featureName) => {
  try {
    const module = await import(\`./features/\${featureName}\`);
    return module.default;
  } catch (error) {
    console.error(\`Failed to load feature: \${featureName}\`, error);
    return null;
  }
};
\`\`\`

## 💡 Avantajları

- ✅ **Modülerlik**: Kodunuzu organize eder
- ✅ **Yeniden kullanılabilirlik**: Aynı kodu farklı yerlerde kullanabilirsiniz
- ✅ **Performans**: Sadece ihtiyaç duyulan kod yüklenir
- ✅ **Bakım kolaylığı**: Değişiklikler tek yerden yapılır
- ✅ **Tree shaking**: Kullanılmayan kod otomatik olarak kaldırılır

## ⚠️ Dikkat Edilecekler

- ❌ **Circular dependencies**: Döngüsel bağımlılıklardan kaçının
- ❌ **File extensions**: .js, .jsx, .ts, .tsx uzantılarını belirtin
- ❌ **Path resolution**: Doğru dosya yollarını kullanın

## 🎯 Sonuç

Export ve Import, modern JavaScript ve React geliştirmede vazgeçilmez araçlardır. Kodunuzu daha organize, modüler ve yeniden kullanılabilir hale getirir. React'te component'ler, hook'lar ve utility fonksiyonları için yaygın olarak kullanılır.`,
            codeExamples: [
              {
                id: 'export-import-examples',
                title: 'Export/Import Örnekleri',
                code: `// Named export
export const name = "John";
export const age = 30;

// Default export
export default function greet() {
  return "Hello!";
}

// Named import
import { name, age } from './utils';

// Default import
import greet from './utils';

// React component export
const UserCard = ({ name, email }) => (
  <div>
    <h2>{name}</h2>
    <p>{email}</p>
  </div>
);

export default UserCard;

// React component import
import UserCard from './UserCard';`,
                language: 'javascript',
                description: 'Export ve import kullanım örnekleri'
              }
            ],
            relatedProjects: ['javascript-basics'],
            resources: [
              {
                id: 'mdn-modules',
                title: 'MDN: JavaScript Modules',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'arrow-functions',
            title: 'Arrow Functions',
            description: 'JavaScript arrow function\'larının kullanımı',
            duration: '25 dakika',
            difficulty: 'easy',
            content: `# Arrow Functions 🏹

JavaScript'te Arrow Functions, yazdığınız kodun daha okunaklı ve kısa olmasını sağlar. Aynı işlemi yaparken daha az kod yazmanıza olanak tanır.

## 🎯 Arrow Function Nedir?

Arrow Functions, bir fonksiyon tanımlamak için kullanılan \`function\` anahtar kelimesi yerine \`=>\` işareti kullanılır.

### **Geleneksel Fonksiyon:**
\`\`\`javascript
function topla(a, b) {
  return a + b;
}
\`\`\`

### **Arrow Function:**
\`\`\`javascript
const topla = (a, b) => a + b;
\`\`\`

## 📝 Arrow Function Sözdizimi

### **1. Tek Parametre:**
\`\`\`javascript
// Geleneksel
function greet(name) {
  return \`Hello \${name}\`;
}

// Arrow Function
const greet = name => \`Hello \${name}\`;
\`\`\`

### **2. Çoklu Parametre:**
\`\`\`javascript
// Geleneksel
function multiply(a, b) {
  return a * b;
}

// Arrow Function
const multiply = (a, b) => a * b;
\`\`\`

### **3. Parametresiz:**
\`\`\`javascript
// Geleneksel
function sayHello() {
  return "Hello World!";
}

// Arrow Function
const sayHello = () => "Hello World!";
\`\`\`

### **4. Çok Satırlı:**
\`\`\`javascript
// Geleneksel
function processData(data) {
  const result = data.map(item => item * 2);
  return result.filter(item => item > 10);
}

// Arrow Function
const processData = (data) => {
  const result = data.map(item => item * 2);
  return result.filter(item => item > 10);
};
\`\`\`

## 🔄 Array Methods ile Kullanım

Arrow Functions, genellikle callback fonksiyonları olarak kullanılır.

### **Map Method:**
\`\`\`javascript
let numbers = [1, 2, 3, 4, 5];

// Geleneksel
let doubledNumbers = numbers.map(function(number) {
  return number * 2;
});

// Arrow Function
let doubledNumbers = numbers.map(number => number * 2);
\`\`\`

### **Filter Method:**
\`\`\`javascript
let numbers = [1, 2, 3, 4, 5];

// Geleneksel
let evenNumbers = numbers.filter(function(number) {
  return number % 2 === 0;
});

// Arrow Function
let evenNumbers = numbers.filter(number => number % 2 === 0);
\`\`\`

### **Reduce Method:**
\`\`\`javascript
let numbers = [1, 2, 3, 4, 5];

// Geleneksel
let sum = numbers.reduce(function(acc, current) {
  return acc + current;
}, 0);

// Arrow Function
let sum = numbers.reduce((acc, current) => acc + current, 0);
\`\`\`

## 🎯 This Binding

Arrow Functions, \`this\` anahtar kelimesinin kapsamını belirli bir değere bağlamaz.

### **Geleneksel Fonksiyon:**
\`\`\`javascript
const obj = {
  name: 'John',
  greet: function() {
    setTimeout(function() {
      console.log(\`Hello, my name is \${this.name}.\`);
    }, 1000);
  }
};

obj.greet(); // "Hello, my name is undefined."
\`\`\`

### **Arrow Function:**
\`\`\`javascript
const obj = {
  name: 'John',
  greet: function() {
    setTimeout(() => {
      console.log(\`Hello, my name is \${this.name}.\`);
    }, 1000);
  }
};

obj.greet(); // "Hello, my name is John."
\`\`\`

## ⚛️ React'te Kullanım

### **Event Handler:**
\`\`\`javascript
// Geleneksel
function MyComponent() {
  function handleClick() {
    console.log('Button clicked!');
  }
  
  return <button onClick={handleClick}>Click me</button>;
}

// Arrow Function
const MyComponent = () => {
  const handleClick = () => {
    console.log('Button clicked!');
  };
  
  return <button onClick={handleClick}>Click me</button>;
};
\`\`\`

### **useState Hook:**
\`\`\`javascript
const Counter = () => {
  const [count, setCount] = useState(0);
  
  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
    </div>
  );
};
\`\`\`

### **useEffect Hook:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    const fetchUser = async () => {
      const response = await fetch(\`/api/users/\${userId}\`);
      const userData = await response.json();
      setUser(userData);
    };
    
    fetchUser();
  }, [userId]);
  
  return <div>{user?.name}</div>;
};
\`\`\`

## 💡 Avantajları

- ✅ **Daha kısa kod**: Aynı işlevi daha az kodla yazabilirsiniz
- ✅ **Okunabilirlik**: Kod daha temiz ve anlaşılır
- ✅ **This binding**: \`this\` kapsamı sorunları çözülür
- ✅ **Modern syntax**: ES6+ standartlarına uygun

## ⚠️ Dikkat Edilecekler

- ❌ **Constructor olarak kullanılamaz**: \`new\` anahtar kelimesi ile çağrılamaz
- ❌ **Hoisting yok**: Fonksiyon tanımlanmadan önce kullanılamaz
- ❌ **Arguments objesi yok**: \`arguments\` objesine erişim yok

## 🎯 Sonuç

Arrow Functions, modern JavaScript ve React geliştirmede vazgeçilmez bir araçtır. Daha temiz, okunabilir ve kısa kod yazmanızı sağlar. React'te event handler'lar, hook'lar ve callback fonksiyonları için yaygın olarak kullanılır.`,
            codeExamples: [
              {
                id: 'arrow-function-examples',
                title: 'Arrow Function Örnekleri',
                code: `// Temel kullanım
const add = (a, b) => a + b;
const square = x => x * x;
const greet = () => "Hello World!";

// Array methods ile
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(n => n * 2);
const evens = numbers.filter(n => n % 2 === 0);
const sum = numbers.reduce((acc, n) => acc + n, 0);

// React'te kullanım
const MyComponent = () => {
  const [count, setCount] = useState(0);
  
  const handleClick = () => setCount(count + 1);
  
  return <button onClick={handleClick}>Count: {count}</button>;
};`,
                language: 'javascript',
                description: 'Arrow function kullanım örnekleri'
              }
            ],
            relatedProjects: ['javascript-basics'],
            resources: [
              {
                id: 'mdn-arrow-functions',
                title: 'MDN: Arrow Functions',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'classes',
            title: 'Classes (Sınıflar)',
            description: 'JavaScript ES6 class yapısı ve kullanımı',
            duration: '30 dakika',
            difficulty: 'medium',
            content: `# Classes (Sınıflar) 🏗️

JavaScript ES6 ile gelen class yapısı, nesne yönelimli programlama (OOP) prensiplerini JavaScript'te kullanmamızı sağlar. Class'lar, benzer özellik ve davranışlara sahip objeler oluşturmak için şablon görevi görür.

## 🎯 Class Nedir?

Class, objeler oluşturmak için kullanılan bir şablondur. Her class, özellikler (properties) ve metodlar (methods) içerebilir.

## 📝 Temel Class Yapısı

### **Class Tanımlama:**
\`\`\`javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  
  greet() {
    return \`Hello, my name is \${this.name}\`;
  }
  
  getAge() {
    return this.age;
  }
}
\`\`\`

### **Class Kullanımı:**
\`\`\`javascript
const person1 = new Person("John", 30);
const person2 = new Person("Jane", 25);

console.log(person1.greet()); // "Hello, my name is John"
console.log(person2.getAge()); // 25
\`\`\`

## 🔧 Constructor

Constructor, class'tan yeni bir obje oluşturulduğunda otomatik olarak çalışan özel bir metoddur.

\`\`\`javascript
class Car {
  constructor(brand, model, year) {
    this.brand = brand;
    this.model = model;
    this.year = year;
    this.isRunning = false;
  }
  
  start() {
    this.isRunning = true;
    return \`\${this.brand} \${this.model} started!\`;
  }
  
  stop() {
    this.isRunning = false;
    return \`\${this.brand} \${this.model} stopped!\`;
  }
}

const myCar = new Car("Toyota", "Camry", 2020);
console.log(myCar.start()); // "Toyota Camry started!"
\`\`\`

## 📊 Properties ve Methods

### **Instance Properties:**
\`\`\`javascript
class Rectangle {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }
  
  getArea() {
    return this.width * this.height;
  }
  
  getPerimeter() {
    return 2 * (this.width + this.height);
  }
}

const rect = new Rectangle(10, 5);
console.log(rect.getArea()); // 50
console.log(rect.getPerimeter()); // 30
\`\`\`

### **Static Methods:**
\`\`\`javascript
class MathUtils {
  static add(a, b) {
    return a + b;
  }
  
  static multiply(a, b) {
    return a * b;
  }
  
  static PI = 3.14159;
}

console.log(MathUtils.add(5, 3)); // 8
console.log(MathUtils.multiply(4, 6)); // 24
console.log(MathUtils.PI); // 3.14159
\`\`\`

## 🔄 Inheritance (Kalıtım)

### **Extends Kullanımı:**
\`\`\`javascript
class Animal {
  constructor(name) {
    this.name = name;
  }
  
  speak() {
    return \`\${this.name} makes a sound\`;
  }
}

class Dog extends Animal {
  constructor(name, breed) {
    super(name); // Parent class constructor'ını çağır
    this.breed = breed;
  }
  
  speak() {
    return \`\${this.name} barks!\`;
  }
  
  getBreed() {
    return this.breed;
  }
}

const dog = new Dog("Buddy", "Golden Retriever");
console.log(dog.speak()); // "Buddy barks!"
console.log(dog.getBreed()); // "Golden Retriever"
\`\`\`

### **Method Overriding:**
\`\`\`javascript
class Shape {
  constructor(color) {
    this.color = color;
  }
  
  getInfo() {
    return \`This is a \${this.color} shape\`;
  }
}

class Circle extends Shape {
  constructor(color, radius) {
    super(color);
    this.radius = radius;
  }
  
  getInfo() {
    return \`This is a \${this.color} circle with radius \${this.radius}\`;
  }
  
  getArea() {
    return Math.PI * this.radius * this.radius;
  }
}

const circle = new Circle("red", 5);
console.log(circle.getInfo()); // "This is a red circle with radius 5"
console.log(circle.getArea()); // 78.54
\`\`\`

## 🔒 Encapsulation (Kapsülleme)

### **Private Properties (ES2022):**
\`\`\`javascript
class BankAccount {
  #balance = 0; // Private property
  
  constructor(initialBalance) {
    this.#balance = initialBalance;
  }
  
  deposit(amount) {
    if (amount > 0) {
      this.#balance += amount;
      return \`Deposited \${amount}. New balance: \${this.#balance}\`;
    }
    return "Invalid amount";
  }
  
  withdraw(amount) {
    if (amount > 0 && amount <= this.#balance) {
      this.#balance -= amount;
      return \`Withdrew \${amount}. New balance: \${this.#balance}\`;
    }
    return "Insufficient funds";
  }
  
  getBalance() {
    return this.#balance;
  }
}

const account = new BankAccount(1000);
console.log(account.deposit(500)); // "Deposited 500. New balance: 1500"
console.log(account.getBalance()); // 1500
// console.log(account.#balance); // Error: Private field
\`\`\`

## ⚛️ React'te Kullanım

### **Class Components (Eski Yöntem):**
\`\`\`javascript
import React, { Component } from 'react';

class Counter extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }
  
  increment = () => {
    this.setState(prevState => ({
      count: prevState.count + 1
    }));
  }
  
  decrement = () => {
    this.setState(prevState => ({
      count: prevState.count - 1
    }));
  }
  
  render() {
    return (
      <div>
        <h2>Count: {this.state.count}</h2>
        <button onClick={this.increment}>+</button>
        <button onClick={this.decrement}>-</button>
      </div>
    );
  }
}

export default Counter;
\`\`\`

### **Custom Hooks (Modern Yöntem):**
\`\`\`javascript
import { useState } from 'react';

class CounterLogic {
  constructor(initialValue = 0) {
    this.count = initialValue;
  }
  
  increment() {
    this.count += 1;
    return this.count;
  }
  
  decrement() {
    this.count -= 1;
    return this.count;
  }
  
  reset() {
    this.count = 0;
    return this.count;
  }
}

const useCounter = (initialValue = 0) => {
  const [counter] = useState(() => new CounterLogic(initialValue));
  const [count, setCount] = useState(initialValue);
  
  const increment = () => setCount(counter.increment());
  const decrement = () => setCount(counter.decrement());
  const reset = () => setCount(counter.reset());
  
  return { count, increment, decrement, reset };
};

// Kullanım
const Counter = () => {
  const { count, increment, decrement, reset } = useCounter(0);
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};
\`\`\`

### **Utility Classes:**
\`\`\`javascript
class ApiClient {
  constructor(baseURL) {
    this.baseURL = baseURL;
  }
  
  async get(endpoint) {
    const response = await fetch(\`\${this.baseURL}\${endpoint}\`);
    return response.json();
  }
  
  async post(endpoint, data) {
    const response = await fetch(\`\${this.baseURL}\${endpoint}\`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    return response.json();
  }
}

// React'te kullanım
const apiClient = new ApiClient('https://api.example.com');

const UserList = () => {
  const [users, setUsers] = useState([]);
  
  useEffect(() => {
    const fetchUsers = async () => {
      const data = await apiClient.get('/users');
      setUsers(data);
    };
    
    fetchUsers();
  }, []);
  
  return (
    <div>
      {users.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
};
\`\`\`

## 💡 Avantajları

- ✅ **Organizasyon**: Kodunuzu daha organize eder
- ✅ **Yeniden kullanılabilirlik**: Aynı yapıyı farklı yerlerde kullanabilirsiniz
- ✅ **Inheritance**: Kod tekrarını önler
- ✅ **Encapsulation**: Veri güvenliği sağlar
- ✅ **OOP prensipleri**: Nesne yönelimli programlama desteği

## ⚠️ Dikkat Edilecekler

- ❌ **Hoisting yok**: Class'lar hoist edilmez
- ❌ **Strict mode**: Class'lar otomatik olarak strict mode'da çalışır
- ❌ **Function değil**: Class'lar function değildir
- ❌ **React'te tercih edilmez**: Functional components tercih edilir

## 🎯 Sonuç

Class'lar, JavaScript'te nesne yönelimli programlama yapmanızı sağlar. Modern React geliştirmede functional components tercih edilse de, utility class'lar ve API client'lar için hala kullanışlıdır.`,
            codeExamples: [
              {
                id: 'classes-examples',
                title: 'Class Örnekleri',
                code: `// Temel class
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  
  greet() {
    return \`Hello, I'm \${this.name}\`;
  }
}

// Inheritance
class Student extends Person {
  constructor(name, age, grade) {
    super(name, age);
    this.grade = grade;
  }
  
  study() {
    return \`\${this.name} is studying\`;
  }
}

// Static methods
class MathUtils {
  static add(a, b) {
    return a + b;
  }
  
  static PI = 3.14159;
}

// Kullanım
const student = new Student("John", 20, "A");
console.log(student.greet()); // "Hello, I'm John"
console.log(student.study()); // "John is studying"
console.log(MathUtils.add(5, 3)); // 8`,
                language: 'javascript',
                description: 'Class kullanım örnekleri'
              }
            ],
            relatedProjects: ['javascript-basics'],
            resources: [
              {
                id: 'mdn-classes',
                title: 'MDN: Classes',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'destructuring',
            title: 'Destructuring',
            description: 'JavaScript destructuring kullanımı',
            duration: '20 dakika',
            difficulty: 'easy',
            content: `# Destructuring 🎯

JavaScript'te destructuring, veri yapılarının bileşenlerini ayırmak için kullanılan bir yapıdır. Bu yapı sayesinde, veri yapılarının öğelerini tek tek ele almak yerine, tek bir deyim kullanarak birden fazla öğeyi aynı anda ele alabilirsiniz.

## 🎯 Destructuring Nedir?

Destructuring, diziler ve objeler gibi veri yapılarının öğelerini ayırmak için kullanılabilir. Bu sayede kodunuz daha okunaklı ve anlaşılır hale gelir.

## 📋 Diziler için Destructuring

Diziler için destructuring, dizinin öğelerini tek tek ele almak yerine, dizinin öğelerini tek bir deyim kullanarak ele almanızı sağlar.

\`\`\`javascript
const colors = ['red', 'blue', 'green'];
const [firstColor, secondColor, thirdColor] = colors;

console.log(firstColor); // "red"
console.log(secondColor); // "blue"
console.log(thirdColor); // "green"
\`\`\`

### **Atlanan Öğeler:**
\`\`\`javascript
const numbers = [1, 2, 3, 4, 5];
const [first, , third, , fifth] = numbers;

console.log(first); // 1
console.log(third); // 3
console.log(fifth); // 5
\`\`\`

### **Rest Operator ile:**
\`\`\`javascript
const fruits = ['apple', 'banana', 'orange', 'grape'];
const [first, second, ...rest] = fruits;

console.log(first); // "apple"
console.log(second); // "banana"
console.log(rest); // ["orange", "grape"]
\`\`\`

## 🏠 Nesneler İçin Destructuring

Destructuring, objelerin öğelerini de ele alabilir.

\`\`\`javascript
const person = {
  name: 'John Doe',
  age: 30,
  location: 'London'
};

const { name, age, location } = person;

console.log(name); // "John Doe"
console.log(age); // 30
console.log(location); // "London"
\`\`\`

### **Farklı İsimlerle:**
\`\`\`javascript
const person = {
  name: 'John Doe',
  age: 30,
  location: 'London'
};

const { name: fullName, age: userAge } = person;

console.log(fullName); // "John Doe"
console.log(userAge); // 30
\`\`\`

### **Varsayılan Değerler:**
\`\`\`javascript
const person = {
  name: 'John Doe',
  age: 30
};

const { name, age, location = 'Unknown' } = person;

console.log(name); // "John Doe"
console.log(age); // 30
console.log(location); // "Unknown"
\`\`\`

### **Nested Destructuring:**
\`\`\`javascript
const user = {
  name: 'John',
  address: {
    city: 'London',
    country: 'UK'
  }
};

const { name, address: { city, country } } = user;

console.log(name); // "John"
console.log(city); // "London"
console.log(country); // "UK"
\`\`\`

## ⚛️ React'te Kullanım

### **Props Destructuring:**
\`\`\`javascript
// Destructuring olmadan
function UserCard(props) {
  return (
    <div>
      <h2>{props.name}</h2>
      <p>{props.email}</p>
      <p>{props.age}</p>
    </div>
  );
}

// Destructuring ile
function UserCard({ name, email, age }) {
  return (
    <div>
      <h2>{name}</h2>
      <p>{email}</p>
      <p>{age}</p>
    </div>
  );
}
\`\`\`

### **useState Hook:**
\`\`\`javascript
// Destructuring olmadan
function Counter() {
  const countState = useState(0);
  const count = countState[0];
  const setCount = countState[1];
  
  return <button onClick={() => setCount(count + 1)}>{count}</button>;
}

// Destructuring ile
function Counter() {
  const [count, setCount] = useState(0);
  
  return <button onClick={() => setCount(count + 1)}>{count}</button>;
}
\`\`\`

### **useEffect Hook:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchUser = async () => {
      const response = await fetch(\`/api/users/\${userId}\`);
      const userData = await response.json();
      setUser(userData);
      setLoading(false);
    };
    
    fetchUser();
  }, [userId]);
  
  if (loading) return <div>Loading...</div>;
  
  const { name, email, avatar } = user;
  
  return (
    <div>
      <img src={avatar} alt={name} />
      <h2>{name}</h2>
      <p>{email}</p>
    </div>
  );
};
\`\`\`

### **Event Handler'larda:**
\`\`\`javascript
function Form() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    age: ''
  });
  
  const handleChange = ({ target: { name, value } }) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  return (
    <form>
      <input 
        name="name" 
        value={formData.name} 
        onChange={handleChange} 
      />
      <input 
        name="email" 
        value={formData.email} 
        onChange={handleChange} 
      />
    </form>
  );
}
\`\`\`

## 🔄 Function Arguments

Destructuring, function argumentleri için de kullanılabilir.

\`\`\`javascript
// Destructuring olmadan
function logPerson(person) {
  console.log(\`Name: \${person.name}, Age: \${person.age}\`);
}

// Destructuring ile
function logPerson({ name, age }) {
  console.log(\`Name: \${name}, Age: \${age}\`);
}

const person = {
  name: 'John Doe',
  age: 30,
  location: 'London'
};

logPerson(person); // "Name: John Doe, Age: 30"
\`\`\`

## 💡 Avantajları

- ✅ **Daha temiz kod**: Daha okunaklı ve anlaşılır
- ✅ **Daha az kod**: Tek satırda birden fazla değişken atama
- ✅ **Modern syntax**: ES6+ standartlarına uygun
- ✅ **React uyumlu**: Props ve state yönetiminde çok kullanışlı

## 🎯 Sonuç

Destructuring, modern JavaScript ve React geliştirmede vazgeçilmez bir araçtır. Kodunuzu daha temiz, okunaklı ve anlaşılır hale getirir. React'te props, state ve event handler'larda yaygın olarak kullanılır.`,
            codeExamples: [
              {
                id: 'destructuring-examples',
                title: 'Destructuring Örnekleri',
                code: `// Array destructuring
const [first, second, ...rest] = [1, 2, 3, 4, 5];

// Object destructuring
const { name, age, city = 'Unknown' } = { name: 'John', age: 30 };

// React props destructuring
const UserCard = ({ name, email, age }) => (
  <div>
    <h2>{name}</h2>
    <p>{email}</p>
    <p>{age}</p>
  </div>
);

// useState destructuring
const [count, setCount] = useState(0);

// Event handler destructuring
const handleChange = ({ target: { name, value } }) => {
  setFormData(prev => ({ ...prev, [name]: value }));
};`,
                language: 'javascript',
                description: 'Destructuring kullanım örnekleri'
              }
            ],
            relatedProjects: ['javascript-basics'],
            resources: [
              {
                id: 'mdn-destructuring',
                title: 'MDN: Destructuring Assignment',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'spread-rest-operator',
            title: 'Spread ve Rest Operatörü',
            description: 'JavaScript spread ve rest operatörlerinin kullanımı',
            duration: '25 dakika',
            difficulty: 'easy',
            content: `# Spread ve Rest Operatörü 🔄

JavaScript'de Spread ve Rest Operator, programlama dillerinin dinamik ve esnek olmasını sağlayan özelliklerdir. Spread Operator, dizilerin ve obje kalıplarının dağıtılmasına olanak tanırken, Rest Operator, birden fazla argümanı tek bir dizi şeklinde toplamayı sağlar.

## 🎯 Spread Operator (...)

Spread Operator, diziler ve obje kalıplarının elemanlarını dağıtmak için kullanılır.

### **Dizilerde Spread:**
\`\`\`javascript
let numbers = [1, 2, 3, 4];
let newNumbers = [...numbers, 5, 6];

console.log(newNumbers); // [1, 2, 3, 4, 5, 6]
\`\`\`

### **Dizi Kopyalama:**
\`\`\`javascript
let originalArray = [1, 2, 3];
let copiedArray = [...originalArray];

console.log(copiedArray); // [1, 2, 3]
console.log(originalArray === copiedArray); // false (farklı referanslar)
\`\`\`

### **Dizi Birleştirme:**
\`\`\`javascript
let array1 = [1, 2, 3];
let array2 = [4, 5, 6];
let combinedArray = [...array1, ...array2];

console.log(combinedArray); // [1, 2, 3, 4, 5, 6]
\`\`\`

### **Obje Spread:**
\`\`\`javascript
let person = { name: 'John', age: 30 };
let updatedPerson = { ...person, city: 'London' };

console.log(updatedPerson); // { name: 'John', age: 30, city: 'London' }
\`\`\`

### **Obje Kopyalama:**
\`\`\`javascript
let originalObject = { a: 1, b: 2 };
let copiedObject = { ...originalObject };

console.log(copiedObject); // { a: 1, b: 2 }
console.log(originalObject === copiedObject); // false
\`\`\`

### **Obje Birleştirme:**
\`\`\`javascript
let obj1 = { a: 1, b: 2 };
let obj2 = { c: 3, d: 4 };
let combinedObject = { ...obj1, ...obj2 };

console.log(combinedObject); // { a: 1, b: 2, c: 3, d: 4 }
\`\`\`

## 🎯 Rest Operator (...)

Rest Operator, birden fazla argümanı tek bir dizi şeklinde toplamayı sağlar.

### **Function Parameters:**
\`\`\`javascript
function sum(...args) {
  return args.reduce((acc, current) => acc + current, 0);
}

console.log(sum(1, 2, 3, 4)); // 10
console.log(sum(1, 2)); // 3
\`\`\`

### **Destructuring ile:**
\`\`\`javascript
let numbers = [1, 2, 3, 4, 5];
let [first, second, ...rest] = numbers;

console.log(first); // 1
console.log(second); // 2
console.log(rest); // [3, 4, 5]
\`\`\`

### **Object Destructuring ile:**
\`\`\`javascript
let person = { name: 'John', age: 30, city: 'London', country: 'UK' };
let { name, ...rest } = person;

console.log(name); // "John"
console.log(rest); // { age: 30, city: 'London', country: 'UK' }
\`\`\`

## ⚛️ React'te Kullanım

### **Props Spreading:**
\`\`\`javascript
function Button({ children, ...props }) {
  return (
    <button {...props} className="btn">
      {children}
    </button>
  );
}

// Kullanım
<Button onClick={handleClick} disabled={isLoading}>
  Click me
</Button>
\`\`\`

### **State Güncelleme:**
\`\`\`javascript
function UserForm() {
  const [user, setUser] = useState({
    name: '',
    email: '',
    age: ''
  });
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setUser(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  return (
    <form>
      <input 
        name="name" 
        value={user.name} 
        onChange={handleChange} 
      />
      <input 
        name="email" 
        value={user.email} 
        onChange={handleChange} 
      />
    </form>
  );
}
\`\`\`

### **Array State Güncelleme:**
\`\`\`javascript
function TodoList() {
  const [todos, setTodos] = useState([]);
  
  const addTodo = (newTodo) => {
    setTodos(prev => [...prev, newTodo]);
  };
  
  const removeTodo = (id) => {
    setTodos(prev => prev.filter(todo => todo.id !== id));
  };
  
  return (
    <div>
      {todos.map(todo => (
        <div key={todo.id}>
          {todo.text}
          <button onClick={() => removeTodo(todo.id)}>Remove</button>
        </div>
      ))}
    </div>
  );
}
\`\`\`

### **useEffect ile:**
\`\`\`javascript
function UserProfile({ userId, ...otherProps }) {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    const fetchUser = async () => {
      const response = await fetch(\`/api/users/\${userId}\`);
      const userData = await response.json();
      setUser(userData);
    };
    
    fetchUser();
  }, [userId]);
  
  return (
    <div {...otherProps}>
      {user && <h2>{user.name}</h2>}
    </div>
  );
}
\`\`\`

## 🔄 Array Methods ile Kullanım

### **Map ile:**
\`\`\`javascript
let numbers = [1, 2, 3, 4, 5];
let doubled = numbers.map(n => n * 2);
let newArray = [...doubled, 10, 12];

console.log(newArray); // [2, 4, 6, 8, 10, 10, 12]
\`\`\`

### **Filter ile:**
\`\`\`javascript
let numbers = [1, 2, 3, 4, 5];
let evens = numbers.filter(n => n % 2 === 0);
let odds = numbers.filter(n => n % 2 !== 0);
let allNumbers = [...evens, ...odds];

console.log(allNumbers); // [2, 4, 1, 3, 5]
\`\`\`

## 💡 Avantajları

- ✅ **Daha temiz kod**: Daha okunaklı ve anlaşılır
- ✅ **Performans**: Daha verimli veri işleme
- ✅ **Esneklik**: Dinamik veri yapıları
- ✅ **Modern syntax**: ES6+ standartlarına uygun

## ⚠️ Dikkat Edilecekler

- ❌ **Shallow copy**: Nested objeler için derin kopya yapmaz
- ❌ **Performance**: Büyük veri setlerinde dikkatli kullanın
- ❌ **Browser support**: Eski tarayıcılarda desteklenmeyebilir

## 🎯 Sonuç

Spread ve Rest operatörleri, modern JavaScript ve React geliştirmede vazgeçilmez araçlardır. Kodunuzu daha temiz, esnek ve performanslı hale getirir. React'te state yönetimi, props geçirme ve veri işleme için yaygın olarak kullanılır.`,
            codeExamples: [
              {
                id: 'spread-rest-examples',
                title: 'Spread ve Rest Örnekleri',
                code: `// Spread operator
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combined = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]

const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };
const combined = { ...obj1, ...obj2 }; // { a: 1, b: 2, c: 3, d: 4 }

// Rest operator
function sum(...args) {
  return args.reduce((acc, n) => acc + n, 0);
}

const [first, ...rest] = [1, 2, 3, 4, 5];
const { name, ...otherProps } = { name: 'John', age: 30, city: 'London' };

// React'te kullanım
const [todos, setTodos] = useState([]);
const addTodo = (newTodo) => setTodos(prev => [...prev, newTodo]);`,
                language: 'javascript',
                description: 'Spread ve rest operatör kullanım örnekleri'
              }
            ],
            relatedProjects: ['javascript-basics'],
            resources: [
              {
                id: 'mdn-spread-rest',
                title: 'MDN: Spread Syntax',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'reference-primitive-types',
            title: 'Reference ve Primitive Tipler',
            description: 'JavaScript veri tipleri ve referans kavramları',
            duration: '25 dakika',
            difficulty: 'medium',
            content: `# Reference ve Primitive Tipler 🔗

JavaScript'te veri tipleri iki ana kategoriye ayrılır: **Primitive Types** (İlkel Tipler) ve **Reference Types** (Referans Tipler). Bu ayrım, React geliştirme sürecinde çok önemli bir konudur.

## 🎯 Veri Tipleri Kategorileri

### **Primitive Types (İlkel Tipler):**
- ✅ **Number**: Sayılar (1, 2.5, -10)
- ✅ **String**: Metinler ("Hello", 'World')
- ✅ **Boolean**: Mantıksal değerler (true, false)
- ✅ **Undefined**: Tanımsız değer
- ✅ **Null**: Boş değer
- ✅ **Symbol**: Benzersiz tanımlayıcılar (ES6)
- ✅ **BigInt**: Büyük tam sayılar (ES2020)

### **Reference Types (Referans Tipler):**
- ✅ **Object**: Nesneler ({}, new Object())
- ✅ **Array**: Diziler ([], new Array())
- ✅ **Function**: Fonksiyonlar (function, arrow function)
- ✅ **Date**: Tarih nesneleri
- ✅ **RegExp**: Düzenli ifadeler

## 🔍 Primitive Types Özellikleri

Primitive tipler, değer ataması yapılırken **değerin kendisi** atanır.

\`\`\`javascript
// Primitive Type: Number
let primitiveNum = 10;
let primitiveNum2 = primitiveNum;

primitiveNum2 = 20;
console.log(primitiveNum); // 10 (değişmedi)
console.log(primitiveNum2); // 20
\`\`\`

### **String Örneği:**
\`\`\`javascript
let name1 = "John";
let name2 = name1;

name2 = "Jane";
console.log(name1); // "John" (değişmedi)
console.log(name2); // "Jane"
\`\`\`

### **Boolean Örneği:**
\`\`\`javascript
let isActive = true;
let isEnabled = isActive;

isEnabled = false;
console.log(isActive); // true (değişmedi)
console.log(isEnabled); // false
\`\`\`

## 🔗 Reference Types Özellikleri

Reference tipler, değer ataması yapılırken **referans** atanır.

\`\`\`javascript
// Reference Type: Object
let object1 = { value: 10 };
let object2 = object1;

object2.value = 20;
console.log(object1.value); // 20 (değişti!)
console.log(object2.value); // 20
\`\`\`

### **Array Örneği:**
\`\`\`javascript
let array1 = [1, 2, 3];
let array2 = array1;

array2.push(4);
console.log(array1); // [1, 2, 3, 4] (değişti!)
console.log(array2); // [1, 2, 3, 4]
\`\`\`

### **Function Örneği:**
\`\`\`javascript
let func1 = function() { return "Hello"; };
let func2 = func1;

func2 = function() { return "World"; };
console.log(func1()); // "Hello" (değişmedi)
console.log(func2()); // "World"
\`\`\`

## ⚛️ React'te Kullanım

### **State ile Primitive Types:**
\`\`\`javascript
const Counter = () => {
  const [count, setCount] = useState(0); // Primitive type
  
  const increment = () => {
    setCount(count + 1); // Yeni değer atanır
  };
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+</button>
    </div>
  );
};
\`\`\`

### **State ile Reference Types:**
\`\`\`javascript
const UserProfile = () => {
  const [user, setUser] = useState({
    name: "John",
    age: 30
  }); // Reference type
  
  const updateName = (newName) => {
    // ❌ Yanlış: Aynı referansı değiştiriyor
    // user.name = newName;
    // setUser(user);
    
    // ✅ Doğru: Yeni obje oluşturuyor
    setUser(prev => ({
      ...prev,
      name: newName
    }));
  };
  
  return (
    <div>
      <p>Name: {user.name}</p>
      <button onClick={() => updateName("Jane")}>
        Change Name
      </button>
    </div>
  );
};
\`\`\`

### **Array State Güncelleme:**
\`\`\`javascript
const TodoList = () => {
  const [todos, setTodos] = useState([]);
  
  const addTodo = (newTodo) => {
    // ✅ Doğru: Yeni array oluşturuyor
    setTodos(prev => [...prev, newTodo]);
  };
  
  const removeTodo = (id) => {
    // ✅ Doğru: Yeni array oluşturuyor
    setTodos(prev => prev.filter(todo => todo.id !== id));
  };
  
  const updateTodo = (id, updatedTodo) => {
    // ✅ Doğru: Yeni array oluşturuyor
    setTodos(prev => prev.map(todo => 
      todo.id === id ? { ...todo, ...updatedTodo } : todo
    ));
  };
  
  return (
    <div>
      {todos.map(todo => (
        <div key={todo.id}>
          {todo.text}
          <button onClick={() => removeTodo(todo.id)}>Remove</button>
        </div>
      ))}
    </div>
  );
};
\`\`\`

## 🔄 Spread Operator ile Çözüm

Reference type sorununu spread operatörü kullanarak çözebiliriz:

\`\`\`javascript
// Reference Type: Object
let object1 = { value: 10 };
let object2 = { ...object1 }; // Spread ile kopyalama

object2.value = 20;
console.log(object1.value); // 10 (değişmedi)
console.log(object2.value); // 20
\`\`\`

### **Array Kopyalama:**
\`\`\`javascript
let array1 = [1, 2, 3];
let array2 = [...array1]; // Spread ile kopyalama

array2.push(4);
console.log(array1); // [1, 2, 3] (değişmedi)
console.log(array2); // [1, 2, 3, 4]
\`\`\`

### **Nested Object Kopyalama:**
\`\`\`javascript
let user1 = {
  name: "John",
  address: {
    city: "London",
    country: "UK"
  }
};

// ❌ Shallow copy: Nested objeler kopyalanmaz
let user2 = { ...user1 };

// ✅ Deep copy: Tüm nested objeler kopyalanır
let user3 = {
  ...user1,
  address: { ...user1.address }
};

user2.address.city = "Paris";
console.log(user1.address.city); // "Paris" (değişti!)

user3.address.city = "Berlin";
console.log(user1.address.city); // "Paris" (değişmedi)
\`\`\`

## 🎯 React'te Pratik Kullanım

### **Form State Yönetimi:**
\`\`\`javascript
const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // ✅ Doğru: Yeni obje oluşturuyor
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(formData);
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        name="name"
        value={formData.name}
        onChange={handleChange}
        placeholder="Name"
      />
      <input
        name="email"
        value={formData.email}
        onChange={handleChange}
        placeholder="Email"
      />
      <textarea
        name="message"
        value={formData.message}
        onChange={handleChange}
        placeholder="Message"
      />
      <button type="submit">Submit</button>
    </form>
  );
};
\`\`\`

### **useEffect Dependency Array:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    const fetchUser = async () => {
      const response = await fetch(\`/api/users/\${userId}\`);
      const userData = await response.json();
      setUser(userData);
    };
    
    fetchUser();
  }, [userId]); // Primitive type, güvenli
  
  // ❌ Yanlış: Reference type dependency
  // useEffect(() => {
  //   // ...
  // }, [user]); // Her render'da yeni referans
  
  return (
    <div>
      {user && <h2>{user.name}</h2>}
    </div>
  );
};
\`\`\`

## 💡 Avantajları ve Dezavantajları

### **Primitive Types:**
- ✅ **Güvenli**: Değişiklikler diğer değişkenleri etkilemez
- ✅ **Performanslı**: Hafıza kullanımı düşük
- ✅ **Basit**: Anlaşılması kolay
- ❌ **Sınırlı**: Karmaşık veri yapıları için uygun değil

### **Reference Types:**
- ✅ **Esnek**: Karmaşık veri yapıları oluşturabilir
- ✅ **Güçlü**: Nesne yönelimli programlama desteği
- ✅ **Verimli**: Büyük veri setleri için uygun
- ❌ **Riskli**: Yanlış kullanımda beklenmeyen sonuçlar
- ❌ **Karmaşık**: Referans yönetimi zor olabilir

## 🎯 Sonuç

Primitive ve Reference tipler arasındaki fark, React geliştirmede kritik öneme sahiptir. State yönetimi, props geçirme ve performans optimizasyonu için bu kavramları iyi anlamak gerekir. Reference tiplerle çalışırken her zaman yeni obje/array oluşturmayı unutmayın!`,
            codeExamples: [
              {
                id: 'reference-primitive-examples',
                title: 'Reference ve Primitive Örnekleri',
                code: `// Primitive types
let num1 = 10;
let num2 = num1;
num2 = 20;
console.log(num1); // 10 (değişmedi)

// Reference types
let obj1 = { value: 10 };
let obj2 = obj1;
obj2.value = 20;
console.log(obj1.value); // 20 (değişti!)

// Spread ile çözüm
let obj3 = { ...obj1 };
obj3.value = 30;
console.log(obj1.value); // 20 (değişmedi)

// React state güncelleme
const [user, setUser] = useState({ name: "John", age: 30 });

// ✅ Doğru
setUser(prev => ({ ...prev, name: "Jane" }));

// ❌ Yanlış
// user.name = "Jane";
// setUser(user);`,
                language: 'javascript',
                description: 'Reference ve primitive tip örnekleri'
              }
            ],
            relatedProjects: ['javascript-basics'],
            resources: [
              {
                id: 'mdn-data-types',
                title: 'MDN: JavaScript Data Types',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'temel-react-component',
        name: 'TEMEL REACT VE COMPONENT MANTIGI',
        icon: '⚛️',
        description: 'React temel kavramları ve component yapısı',
        topics: [
          {
            id: 'react-component-yapisi',
            title: 'React Component Yapısının Önemi',
            description: 'JavaScript yerine React: Geliştirmeyi Kolaylaştıran Component Yapısı',
            duration: '8 dakika',
            difficulty: 'easy',
            content: `# React Component Yapısının Önemi 🏗️

React, JavaScript dili ile geliştirilen bir JavaScript kütüphanesidir ve uygulama geliştirmek için kullanılan bir araçtır. React, daha verimli ve esnek bir yapı sunması nedeniyle JavaScript'e göre tercih edilir.

## 🎯 React'ın Temel Özellikleri

### **Component Tabanlı Yapı**
React, component tabanlı bir yapıya sahiptir ve bu component'ler fonksiyonel component veya stateful component olarak iki şekilde tanımlanabilir.

### **Function Component**
Function Component, sadece giriş verilerine göre render edilen ve state (durum) değişkenleri olmayan component'lerdir. Bu component'ler, props (özellikler) aracılığıyla veri alır ve bir HTML çıktısı olarak döndürür.

**Avantajları:**
- ✅ **Performans**: Daha hızlı render
- ✅ **Okunabilirlik**: Daha temiz kod
- ✅ **Test edilebilirlik**: Kolay test yazma
- ✅ **Modern yaklaşım**: React Hooks ile güçlü

## 📝 JavaScript vs React Karşılaştırması

### **JavaScript Kodu:**
\`\`\`javascript
function Greeting(props) {
  return <h1>Hello, {props.name}</h1>;
}
\`\`\`

### **React Kodu:**
\`\`\`javascript
import React from 'react';

const Greeting = (props) => {
  return <h1>Hello, {props.name}</h1>;
}

export default Greeting;
\`\`\`

## 🔍 Farklar ve Avantajlar

### **JavaScript Yaklaşımı:**
- ❌ **Tekrar kod**: Aynı kodu birden fazla yerde yazma
- ❌ **Bakım zorluğu**: Değişiklikler için çok yer güncelleme
- ❌ **Organizasyon**: Kodun organize edilmesi zor
- ❌ **Test zorluğu**: Test yazmak karmaşık

### **React Yaklaşımı:**
- ✅ **Modülerlik**: Her component ayrı dosyada
- ✅ **Yeniden kullanılabilirlik**: Aynı component farklı yerlerde
- ✅ **Bakım kolaylığı**: Tek yerden değişiklik
- ✅ **Test kolaylığı**: Her component ayrı test edilebilir

## ⚛️ React Component Yapısı

### **Temel Component:**
\`\`\`javascript
import React from 'react';

const MyComponent = (props) => {
  return (
    <div>
      <h1>My Component</h1>
      <p>{props.message}</p>
    </div>
  );
}

export default MyComponent;
\`\`\`

### **Component Kullanımı:**
\`\`\`javascript
import React from 'react';
import MyComponent from './MyComponent';

function App() {
  return (
    <div>
      <MyComponent message="Hello World!" />
      <MyComponent message="React is awesome!" />
    </div>
  );
}

export default App;
\`\`\`

## 🎯 Component Türleri

### **1. Functional Component (Fonksiyonel Component):**
\`\`\`javascript
const Button = ({ onClick, children }) => {
  return (
    <button onClick={onClick}>
      {children}
    </button>
  );
};
\`\`\`

### **2. Class Component (Sınıf Component):**
\`\`\`javascript
import React, { Component } from 'react';

class Button extends Component {
  render() {
    return (
      <button onClick={this.props.onClick}>
        {this.props.children}
      </button>
    );
  }
}
\`\`\`

## 💡 React'ın Avantajları

### **1. Component Tabanlı Mimari:**
- 🧩 **Modülerlik**: Küçük, yeniden kullanılabilir parçalar
- 🔄 **Yeniden kullanılabilirlik**: Aynı component farklı yerlerde
- 🛠️ **Bakım kolaylığı**: Tek yerden değişiklik
- 🧪 **Test edilebilirlik**: Her component ayrı test

### **2. Virtual DOM:**
- ⚡ **Performans**: Hızlı render
- 🔄 **Efficient Updates**: Sadece değişen kısımlar güncellenir
- 📱 **Responsive**: Mobil uygulamalarda hızlı

### **3. Unidirectional Data Flow:**
- 📤 **Tek yönlü veri akışı**: Öngörülebilir veri akışı
- 🐛 **Debug kolaylığı**: Hata ayıklama basit
- 🔍 **State yönetimi**: Kolay state takibi

## 🚀 Pratik Örnekler

### **Card Component:**
\`\`\`javascript
const Card = ({ title, content, image }) => {
  return (
    <div className="card">
      <img src={image} alt={title} />
      <h3>{title}</h3>
      <p>{content}</p>
    </div>
  );
};

// Kullanım
<Card 
  title="React Öğreniyorum"
  content="React component yapısını öğreniyorum"
  image="/react-logo.png"
/>
\`\`\`

### **List Component:**
\`\`\`javascript
const TodoList = ({ todos }) => {
  return (
    <ul>
      {todos.map(todo => (
        <li key={todo.id}>
          {todo.text}
        </li>
      ))}
    </ul>
  );
};

// Kullanım
const todos = [
  { id: 1, text: "React öğren" },
  { id: 2, text: "Component yaz" },
  { id: 3, text: "Proje yap" }
];

<TodoList todos={todos} />
\`\`\`

## 🎯 Sonuç

React'ın component tabanlı yapısı, modern web geliştirmede vazgeçilmez bir araçtır. Bu yapı sayesinde:

- ✅ **Daha temiz kod** yazabilirsiniz
- ✅ **Daha hızlı geliştirme** yapabilirsiniz
- ✅ **Daha kolay bakım** sağlayabilirsiniz
- ✅ **Daha iyi performans** elde edebilirsiniz

React, JavaScript'in gücünü component yapısı ile birleştirerek, geliştiricilere güçlü ve esnek bir araç sunar.`,
            codeExamples: [
              {
                id: 'component-comparison',
                title: 'JavaScript vs React Karşılaştırması',
                code: `// JavaScript yaklaşımı
function createButton(text, onClick) {
  const button = document.createElement('button');
  button.textContent = text;
  button.onclick = onClick;
  return button;
}

// React yaklaşımı
const Button = ({ text, onClick }) => {
  return <button onClick={onClick}>{text}</button>;
};

// Kullanım
<Button text="Click me" onClick={handleClick} />`,
                language: 'javascript',
                description: 'JavaScript ve React component karşılaştırması'
              }
            ],
            relatedProjects: ['react-basics'],
            resources: [
              {
                id: 'react-components',
                title: 'React Components',
                url: 'https://tr.react.dev/learn/your-first-component',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-kurulumu',
            title: 'React Kurulumu',
            description: 'React: Sıfırdan Kurulum ve İlk Projeniz',
            duration: '14 dakika',
            difficulty: 'easy',
            content: `# React Kurulumu 🚀

React, Facebook tarafından geliştirilen bir JavaScript kütüphanesidir. Reaktif ve esnek web uygulamaları geliştirmek için kullanılır. React, kullanımı kolay ve hızlı bir yapı sunar.

## 🎯 React Kurulum Gereksinimleri

### **Node.js ve NPM**
React kurulumu, Node.js ve npm (Node Package Manager) yüklenmiş bir bilgisayarda yapılabilir. npm, bir komut satırı aracıdır ve React gibi birçok JavaScript paketini yönetmenize olanak tanır.

**Kurulum Linki:** https://nodejs.org/en/download/

### **Sistem Gereksinimleri:**
- ✅ **Node.js**: v14.0.0 veya üzeri
- ✅ **NPM**: v6.0.0 veya üzeri
- ✅ **Modern Tarayıcı**: Chrome, Firefox, Safari, Edge

## 📦 Create React App ile Kurulum

### **1. Proje Oluşturma:**
\`\`\`bash
npx create-react-app my-app
\`\`\`

### **2. Proje Klasörüne Geçiş:**
\`\`\`bash
cd my-app
\`\`\`

### **3. Geliştirme Sunucusunu Başlatma:**
\`\`\`bash
npm start
\`\`\`

## 🎯 Kurulum Adımları Detayı

### **Adım 1: Node.js Kontrolü**
\`\`\`bash
node --version
npm --version
\`\`\`

**Beklenen Çıktı:**
\`\`\`bash
v18.17.0
9.6.7
\`\`\`

### **Adım 2: React Projesi Oluşturma**
\`\`\`bash
npx create-react-app my-react-app
\`\`\`

**Alternatif Seçenekler:**
\`\`\`bash
# TypeScript ile
npx create-react-app my-app --template typescript

# Belirli bir klasöre
npx create-react-app ./my-react-app
\`\`\`

### **Adım 3: Proje Yapısını İnceleme**
\`\`\`bash
cd my-react-app
ls -la
\`\`\`

**Oluşturulan Yapı:**
\`\`\`
my-react-app/
├── public/
│   ├── index.html
│   ├── favicon.ico
│   └── manifest.json
├── src/
│   ├── App.js
│   ├── index.js
│   ├── App.css
│   └── index.css
├── package.json
└── README.md
\`\`\`

## 🚀 İlk React Uygulaması

### **src/index.js:**
\`\`\`javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
\`\`\`

### **src/App.js:**
\`\`\`javascript
import React from 'react';
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;
\`\`\`

## 🎨 İlk Component Oluşturma

### **src/components/Hello.js:**
\`\`\`javascript
import React from 'react';

const Hello = ({ name }) => {
  return (
    <div>
      <h1>Merhaba, {name}!</h1>
      <p>React'e hoş geldiniz!</p>
    </div>
  );
};

export default Hello;
\`\`\`

### **App.js'de Kullanım:**
\`\`\`javascript
import React from 'react';
import Hello from './components/Hello';
import './App.css';

function App() {
  return (
    <div className="App">
      <Hello name="Dünya" />
    </div>
  );
}

export default App;
\`\`\`

## 📱 Geliştirme Sunucusu

### **Başlatma:**
\`\`\`bash
npm start
\`\`\`

**Özellikler:**
- ✅ **Hot Reload**: Kod değişikliklerinde otomatik yenileme
- ✅ **Error Overlay**: Hataları ekranda gösterme
- ✅ **Port 3000**: Varsayılan port
- ✅ **Otomatik Açılma**: Tarayıcıda otomatik açılır

### **Tarayıcıda Görüntüleme:**
- 🌐 **URL**: http://localhost:3000
- 🔄 **Auto-reload**: Kod değişikliklerinde otomatik yenileme
- 🐛 **Error Display**: Hataları ekranda gösterme

## 🛠️ NPM Scripts

### **package.json Scripts:**
\`\`\`json
{
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  }
}
\`\`\`

### **Script Açıklamaları:**

#### **npm start:**
- 🚀 Geliştirme sunucusunu başlatır
- 🔄 Hot reload aktif
- 🌐 Tarayıcıda otomatik açılır

#### **npm run build:**
- 📦 Production build oluşturur
- 🗜️ Dosyaları optimize eder
- 📁 build/ klasörüne çıktı verir

#### **npm test:**
- 🧪 Jest test runner'ı başlatır
- 👀 Watch mode'da çalışır
- 📊 Test sonuçlarını gösterir

## 🎯 İlk Proje Yapısı

### **Önerilen Klasör Yapısı:**
\`\`\`
src/
├── components/
│   ├── Header/
│   │   ├── Header.js
│   │   └── Header.css
│   └── Footer/
│       ├── Footer.js
│       └── Footer.css
├── pages/
│   ├── Home.js
│   └── About.js
├── utils/
│   └── helpers.js
├── App.js
└── index.js
\`\`\`

## 💡 İpuçları ve Best Practices

### **1. Component Organizasyonu:**
- 📁 Her component ayrı klasörde
- 📄 Component ve stil dosyaları birlikte
- 🏷️ Anlamlı isimlendirme

### **2. Import/Export:**
- 📤 Default export kullanın
- 📥 Named import tercih edin
- 🔄 Consistent import sıralaması

### **3. Geliştirme:**
- 🔄 Hot reload'u kullanın
- 🐛 Error overlay'i takip edin
- 📱 Responsive tasarım yapın

## 🎯 Sonraki Adımlar

React kurulumu tamamlandıktan sonra:

1. **Component yapısını** öğrenin
2. **Props ve State** kavramlarını anlayın
3. **Event handling** yapmayı öğrenin
4. **Styling** tekniklerini keşfedin
5. **Routing** ekleyin

## 🎉 Tebrikler!

React kurulumunuz başarıyla tamamlandı! Artık modern web uygulamaları geliştirmeye başlayabilirsiniz. React'ın güçlü component yapısı sayesinde, hızlı ve verimli uygulamalar oluşturabilirsiniz.`,
            codeExamples: [
              {
                id: 'react-setup-example',
                title: 'React Kurulum Örneği',
                code: `# React projesi oluşturma
npx create-react-app my-app
cd my-app

# Geliştirme sunucusunu başlatma
npm start

# Production build
npm run build

# Test çalıştırma
npm test

# İlk component
const Hello = ({ name }) => {
  return <h1>Merhaba, {name}!</h1>;
};

export default Hello;`,
                language: 'bash',
                description: 'React kurulum ve ilk component örneği'
              }
            ],
            relatedProjects: ['react-setup'],
            resources: [
              {
                id: 'create-react-app',
                title: 'Create React App',
                url: 'https://create-react-app.dev/',
                type: 'documentation'
              },
              {
                id: 'nodejs-download',
                title: 'Node.js İndirme',
                url: 'https://nodejs.org/en/download/',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-dosya-yapisi',
            title: 'React Dosya ve Klasör Yapısı',
            description: 'React Projesinde Dosya ve Klasör Yapısı: index.js, src ve public Klasörleri',
            duration: '17 dakika',
            difficulty: 'easy',
            content: `# React Dosya ve Klasör Yapısı 📁

React projelerinde, dosya ve klasör yapısı önemlidir ve projenin düzgün çalışması için doğru şekilde düzenlenmesi gerekir. Bu yazı, bir React projesindeki temel dosya ve klasör yapısını tanımlayacak ve index.js dosyası içerisindeki kodları açıklayacaktır.

## 🎯 React Proje Yapısı

### **Temel Klasör Yapısı:**
\`\`\`
my-react-app/
├── public/
│   ├── index.html
│   ├── favicon.ico
│   ├── manifest.json
│   └── robots.txt
├── src/
│   ├── components/
│   ├── pages/
│   ├── utils/
│   ├── App.js
│   ├── index.js
│   └── index.css
├── node_modules/
├── package.json
├── package-lock.json
└── README.md
\`\`\`

## 📂 Klasör Açıklamaları

### **1. node_modules/ Klasörü**
- 📦 React uygulamasının gerekli olan tüm paket ve modüllerin bulunduğu klasördür
- 🔄 npm kullanarak projeyi oluşturduğunuzda otomatik olarak oluşur
- ⚠️ Genellikle kodlarımızın içinde direk olarak değişiklik yapmamıza gerek yoktur
- 🚫 Git'e commit edilmez (.gitignore'da)

### **2. public/ Klasörü**
- 🌐 Projenin kullanıcı tarafındaki görünür bölümünde bulunan dosyaları içerir
- 📄 HTML, CSS ve JavaScript dosyaları bu klasörde bulunabilir
- 🖼️ Projenin görüntülenmesi için gereken tüm statik dosyalar (resimler, favicon vb.)
- 📱 PWA manifest dosyaları

### **3. src/ Klasörü**
- 💻 Projenin çalışma içeriğini içeren dosyaları içerir
- ⚛️ Uygulamanın işlevselliğini tanımlayan ve React komponentlerini içeren JavaScript dosyalarıdır
- 🎨 CSS dosyaları ve diğer asset'ler
- 🔧 Utility fonksiyonları ve helper'lar

## 📄 Önemli Dosyalar

### **1. index.js - Ana Dosya**
\`\`\`javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
\`\`\`

**Açıklama:**
- 🚀 React uygulamasının ana dosyasıdır
- 🎯 Uygulamanın çalışmasını sağlar
- 🔄 React DOM'u render etme işlemleri yapılır
- 📱 React komponentleri ekrana yansıtılır

### **2. App.js - Ana Component**
\`\`\`javascript
import React from 'react';
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;
\`\`\`

**Açıklama:**
- 🏠 Ana component dosyasıdır
- 🎨 Tüm diğer component'ler burada birleştirilir
- 🔗 Routing ve state yönetimi burada yapılır

### **3. public/index.html - HTML Template**
\`\`\`html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Web site created using create-react-app" />
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
\`\`\`

**Açıklama:**
- 📄 Uygulamanın başlangıç noktasıdır
- 🎯 React uygulaması bu div'e render edilir
- 🔧 Meta tag'ler ve favicon burada tanımlanır

## 🏗️ Önerilen Klasör Yapısı

### **Gelişmiş Proje Yapısı:**
\`\`\`
src/
├── components/
│   ├── common/
│   │   ├── Button/
│   │   │   ├── Button.js
│   │   │   ├── Button.css
│   │   │   └── index.js
│   │   └── Modal/
│   │       ├── Modal.js
│   │       ├── Modal.css
│   │       └── index.js
│   ├── layout/
│   │   ├── Header/
│   │   ├── Footer/
│   │   └── Sidebar/
│   └── forms/
│       ├── LoginForm/
│       └── ContactForm/
├── pages/
│   ├── Home/
│   │   ├── Home.js
│   │   ├── Home.css
│   │   └── index.js
│   ├── About/
│   └── Contact/
├── hooks/
│   ├── useAuth.js
│   ├── useLocalStorage.js
│   └── useApi.js
├── context/
│   ├── AuthContext.js
│   └── ThemeContext.js
├── utils/
│   ├── helpers.js
│   ├── constants.js
│   └── api.js
├── assets/
│   ├── images/
│   ├── icons/
│   └── fonts/
├── styles/
│   ├── globals.css
│   ├── variables.css
│   └── components.css
├── App.js
├── App.css
└── index.js
\`\`\`

## 📁 Klasör Detayları

### **components/ Klasörü**
- 🧩 Uygulamanızda kullanacağınız tüm React component'lerini içerir
- 📂 Alt klasörlerle organize edilir
- 🔄 Her component ayrı klasörde

### **pages/ Klasörü**
- 📄 Sayfa component'leri
- 🎯 Her sayfa ayrı klasörde
- 🔗 Routing ile bağlantılı

### **hooks/ Klasörü**
- 🎣 Custom hook'lar
- 🔄 Yeniden kullanılabilir logic
- ⚛️ React hook'ları

### **context/ Klasörü**
- 🌐 React Context API
- 🔄 Global state yönetimi
- 📤 Veri paylaşımı

### **utils/ Klasörü**
- 🛠️ Yardımcı fonksiyonlar
- 📊 Sabitler ve konfigürasyon
- 🌐 API çağrıları

### **assets/ Klasörü**
- 🖼️ Resimler, ikonlar, fontlar
- 📱 Statik dosyalar
- 🎨 Tasarım asset'leri

## 💡 Best Practices

### **1. Dosya İsimlendirme:**
- ✅ **PascalCase**: Component dosyaları (Button.js)
- ✅ **camelCase**: Utility dosyaları (helpers.js)
- ✅ **kebab-case**: CSS dosyaları (button-styles.css)

### **2. Import/Export:**
- ✅ **Default export**: Component'ler için
- ✅ **Named export**: Utility fonksiyonları için
- ✅ **Index.js**: Klasör export'ları için

### **3. Klasör Organizasyonu:**
- ✅ **Feature-based**: Özellik bazlı klasörleme
- ✅ **Component-based**: Component bazlı klasörleme
- ✅ **Consistent**: Tutarlı yapı

## 🎯 Sonuç

React projelerindeki dosya ve klasör yapısı, projenin başarısı için kritik öneme sahiptir. Doğru organizasyon:

- ✅ **Geliştirme hızını** artırır
- ✅ **Bakım kolaylığı** sağlar
- ✅ **Takım çalışmasını** kolaylaştırır
- ✅ **Kod kalitesini** yükseltir

Bu yapıyı kullanarak, ölçeklenebilir ve sürdürülebilir React uygulamaları geliştirebilirsiniz.`,
            codeExamples: [
              {
                id: 'file-structure-example',
                title: 'Dosya Yapısı Örneği',
                code: `// src/components/Button/Button.js
import React from 'react';
import './Button.css';

const Button = ({ children, onClick, variant = 'primary' }) => {
  return (
    <button 
      className={\`btn btn-\${variant}\`}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

export default Button;

// src/components/Button/index.js
export { default } from './Button';

// src/utils/helpers.js
export const formatDate = (date) => {
  return new Date(date).toLocaleDateString();
};

export const capitalize = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};`,
                language: 'javascript',
                description: 'Dosya yapısı ve organizasyon örneği'
              }
            ],
            relatedProjects: ['react-structure'],
            resources: [
              {
                id: 'react-file-structure',
                title: 'React File Structure',
                url: 'https://react.dev/learn/importing-and-exporting-components',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-calisma-mantigi',
            title: 'React Çalışma Mantığı',
            description: 'React nasıl çalışır ve temel kavramlar',
            duration: '10 dakika',
            difficulty: 'easy',
            content: `# React Çalışma Mantığı ⚛️

React, modern web uygulamaları geliştirmek için kullanılan güçlü bir JavaScript kütüphanesidir. React'ın nasıl çalıştığını anlamak, etkili React uygulamaları geliştirmek için kritik öneme sahiptir.

## 🎯 React'ın Temel Çalışma Prensibi

### **Component Tabanlı Mimari**
React, uygulamaları component'ler halinde organize eder. Her component, kendi state'ini ve render mantığını içerir.

### **Virtual DOM**
React, gerçek DOM yerine Virtual DOM kullanır. Bu sayede performanslı güncellemeler yapılır.

### **Unidirectional Data Flow**
Veri akışı tek yönlüdür - parent component'lerden child component'lere doğru.

## 🔄 React Render Döngüsü

### **1. Initial Render (İlk Render)**
\`\`\`javascript
import React from 'react';
import ReactDOM from 'react-dom/client';

const App = () => {
  return <h1>Merhaba React!</h1>;
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
\`\`\`

**Süreç:**
1. 🎯 React component'i oluşturur
2. 🔄 Virtual DOM'u günceller
3. 📱 Gerçek DOM'u günceller
4. 🖥️ Kullanıcı arayüzünde görüntülenir

### **2. Re-render (Yeniden Render)**
\`\`\`javascript
import React, { useState } from 'react';

const Counter = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count + 1); // State değişir, re-render tetiklenir
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+</button>
    </div>
  );
};
\`\`\`

**Süreç:**
1. 🔄 State değişir
2. 🎯 Component yeniden render edilir
3. 🔍 Virtual DOM karşılaştırılır
4. 📱 Sadece değişen kısımlar güncellenir

## 🧠 Virtual DOM Kavramı

### **Virtual DOM Nedir?**
Virtual DOM, gerçek DOM'un JavaScript objesi olarak temsil edilmesidir.

### **Virtual DOM Avantajları:**
- ⚡ **Hızlı**: JavaScript objesi manipülasyonu
- 🔄 **Efficient**: Sadece değişen kısımlar güncellenir
- 🎯 **Predictable**: Öngörülebilir güncellemeler
- 🐛 **Debug**: Kolay hata ayıklama

### **Virtual DOM Örneği:**
\`\`\`javascript
// Virtual DOM representation
const virtualDOM = {
  type: 'div',
  props: {
    className: 'container',
    children: [
      {
        type: 'h1',
        props: {
          children: 'Merhaba React!'
        }
      }
    ]
  }
};
\`\`\`

## 📤 Props ve State

### **Props (Properties)**
Props, parent component'ten child component'e veri geçirme yöntemidir.

\`\`\`javascript
// Parent Component
const App = () => {
  const user = { name: 'John', age: 30 };
  
  return <UserCard user={user} />;
};

// Child Component
const UserCard = ({ user }) => {
  return (
    <div>
      <h2>{user.name}</h2>
      <p>Yaş: {user.age}</p>
    </div>
  );
};
\`\`\`

### **State**
State, component'in kendi verisini yönetme yöntemidir.

\`\`\`javascript
import React, { useState } from 'react';

const TodoApp = () => {
  const [todos, setTodos] = useState([]);
  const [inputValue, setInputValue] = useState('');

  const addTodo = () => {
    if (inputValue.trim()) {
      setTodos([...todos, inputValue]);
      setInputValue('');
    }
  };

  return (
    <div>
      <input 
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <button onClick={addTodo}>Ekle</button>
      <ul>
        {todos.map((todo, index) => (
          <li key={index}>{todo}</li>
        ))}
      </ul>
    </div>
  );
};
\`\`\`

## 🔄 Lifecycle (Yaşam Döngüsü)

### **Functional Component Lifecycle**
\`\`\`javascript
import React, { useState, useEffect } from 'react';

const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Component mount olduğunda çalışır
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Error fetching user:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, [userId]); // userId değiştiğinde tekrar çalışır

  // Component unmount olduğunda çalışır
  useEffect(() => {
    return () => {
      console.log('Component unmounted');
    };
  }, []);

  if (loading) return <div>Loading...</div>;
  if (!user) return <div>User not found</div>;

  return (
    <div>
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  );
};
\`\`\`

## 🎯 Event Handling

### **Event Handling Örneği:**
\`\`\`javascript
import React, { useState } from 'react';

const Form = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        name="name"
        value={formData.name}
        onChange={handleChange}
        placeholder="İsim"
      />
      <input
        name="email"
        value={formData.email}
        onChange={handleChange}
        placeholder="Email"
      />
      <button type="submit">Gönder</button>
    </form>
  );
};
\`\`\`

## 🔍 React DevTools

### **React Developer Tools**
- 🔧 **Component Tree**: Component hiyerarşisini görüntüleme
- 🔄 **Props & State**: Component verilerini inceleme
- ⚡ **Performance**: Performans analizi
- 🐛 **Debug**: Hata ayıklama

### **Kullanım:**
1. Chrome/Firefox'a React DevTools extension'ını yükleyin
2. React uygulamanızı açın
3. F12 ile Developer Tools'u açın
4. "Components" sekmesini kullanın

## 💡 React'ın Avantajları

### **1. Performans:**
- ⚡ Virtual DOM ile hızlı güncellemeler
- 🔄 Efficient re-rendering
- 📱 Mobile-friendly

### **2. Geliştirici Deneyimi:**
- 🛠️ Güçlü tooling
- 🐛 Kolay debugging
- 📚 Zengin ecosystem

### **3. Topluluk:**
- 👥 Büyük topluluk
- 📖 Kapsamlı dokümantasyon
- 🔄 Aktif geliştirme

## 🎯 Sonuç

React'ın çalışma mantığını anlamak:

- ✅ **Daha iyi kod** yazmanızı sağlar
- ✅ **Performans optimizasyonu** yapmanızı kolaylaştırır
- ✅ **Hata ayıklama** sürecini hızlandırır
- ✅ **Best practices** uygulamanızı sağlar

React'ın component tabanlı yapısı, Virtual DOM kullanımı ve unidirectional data flow prensipleri, modern web uygulamaları geliştirmek için güçlü bir temel oluşturur.`,
            codeExamples: [
              {
                id: 'react-lifecycle-example',
                title: 'React Lifecycle Örneği',
                code: `import React, { useState, useEffect } from 'react';

const LifecycleExample = () => {
  const [count, setCount] = useState(0);
  const [mounted, setMounted] = useState(false);

  // Component mount olduğunda
  useEffect(() => {
    console.log('Component mounted');
    setMounted(true);
    
    // Cleanup function
    return () => {
      console.log('Component unmounted');
    };
  }, []);

  // count değiştiğinde
  useEffect(() => {
    console.log('Count changed:', count);
  }, [count]);

  return (
    <div>
      <p>Mounted: {mounted ? 'Yes' : 'No'}</p>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </div>
  );
};

export default LifecycleExample;`,
                language: 'javascript',
                description: 'React lifecycle ve useEffect örneği'
              }
            ],
            relatedProjects: ['react-lifecycle'],
            resources: [
              {
                id: 'react-lifecycle',
                title: 'React Lifecycle',
                url: 'https://react.dev/learn/lifecycle-of-reactive-effects',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'react-state-events',
        name: 'REACT STATE VE EVENTLERLE CALISMAK',
        icon: '🎯',
        description: 'React state yönetimi ve event handling',
        topics: [
          {
            id: 'react-eventlerle-calismak',
            title: 'React Eventlerle Çalışmak',
            description: 'React\'te event handling ve kullanıcı etkileşimleri',
            duration: '8 dakika',
            difficulty: 'easy',
            content: `# React Eventlerle Çalışmak 🎯

React'te event handling, kullanıcı etkileşimlerini yönetmenin temel yoludur. React, JavaScript event'lerini JSX içinde kullanmanızı sağlar ve bu event'ler component'lerin davranışını kontrol eder.

## 🎯 React Event Sistemi

### **Synthetic Events**
React, tüm event'leri SyntheticEvent objesi olarak sarmalar. Bu, tarayıcı uyumluluğu sağlar ve performansı artırır.

### **Event Handler Tanımlama:**
\`\`\`javascript
import React from 'react';

const Button = () => {
  const handleClick = () => {
    console.log('Button clicked!');
  };

  return (
    <button onClick={handleClick}>
      Click me
    </button>
  );
};
\`\`\`

## 🔧 Temel Event Türleri

### **1. Click Events:**
\`\`\`javascript
const ClickExample = () => {
  const handleClick = (e) => {
    e.preventDefault();
    console.log('Button clicked!');
  };

  return (
    <div>
      <button onClick={handleClick}>Click me</button>
      <a href="#" onClick={handleClick}>Link</a>
    </div>
  );
};
\`\`\`

### **2. Input Events:**
\`\`\`javascript
const InputExample = () => {
  const [value, setValue] = useState('');

  const handleChange = (e) => {
    setValue(e.target.value);
  };

  const handleFocus = () => {
    console.log('Input focused');
  };

  const handleBlur = () => {
    console.log('Input blurred');
  };

  return (
    <input
      value={value}
      onChange={handleChange}
      onFocus={handleFocus}
      onBlur={handleBlur}
      placeholder="Type something..."
    />
  );
};
\`\`\`

### **3. Form Events:**
\`\`\`javascript
const FormExample = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        name="name"
        value={formData.name}
        onChange={handleChange}
        placeholder="Name"
      />
      <input
        name="email"
        value={formData.email}
        onChange={handleChange}
        placeholder="Email"
      />
      <button type="submit">Submit</button>
    </form>
  );
};
\`\`\`

## 🎨 Event Handler Patterns

### **1. Inline Handler:**
\`\`\`javascript
const InlineExample = () => {
  return (
    <button onClick={() => console.log('Inline click')}>
      Inline Handler
    </button>
  );
};
\`\`\`

### **2. Method Handler:**
\`\`\`javascript
const MethodExample = () => {
  const handleClick = () => {
    console.log('Method click');
  };

  return (
    <button onClick={handleClick}>
      Method Handler
    </button>
  );
};
\`\`\`

### **3. Arrow Function Handler:**
\`\`\`javascript
const ArrowExample = () => {
  const handleClick = (message) => {
    console.log(message);
  };

  return (
    <button onClick={() => handleClick('Arrow function')}>
      Arrow Handler
    </button>
  );
};
\`\`\`

## 🔄 Event Propagation

### **Event Bubbling:**
\`\`\`javascript
const BubblingExample = () => {
  const handleParentClick = () => {
    console.log('Parent clicked');
  };

  const handleChildClick = (e) => {
    console.log('Child clicked');
    // e.stopPropagation(); // Bubbling'i durdur
  };

  return (
    <div onClick={handleParentClick} style={{padding: '20px', border: '1px solid black'}}>
      <button onClick={handleChildClick}>
        Child Button
      </button>
    </div>
  );
};
\`\`\`

### **Event Capturing:**
\`\`\`javascript
const CapturingExample = () => {
  const handleCapture = () => {
    console.log('Capture phase');
  };

  const handleBubble = () => {
    console.log('Bubble phase');
  };

  return (
    <div 
      onClickCapture={handleCapture}
      onClick={handleBubble}
      style={{padding: '20px', border: '1px solid black'}}
    >
      <button>Click me</button>
    </div>
  );
};
\`\`\`

## 🎯 Event Object Kullanımı

### **SyntheticEvent Özellikleri:**
\`\`\`javascript
const EventObjectExample = () => {
  const handleEvent = (e) => {
    console.log('Event type:', e.type);
    console.log('Target:', e.target);
    console.log('Current target:', e.currentTarget);
    console.log('Event phase:', e.eventPhase);
    
    // Prevent default behavior
    e.preventDefault();
    
    // Stop propagation
    e.stopPropagation();
  };

  return (
    <form onSubmit={handleEvent}>
      <input type="text" />
      <button type="submit">Submit</button>
    </form>
  );
};
\`\`\`

## 🔧 Custom Event Handlers

### **Debounced Handler:**
\`\`\`javascript
const DebouncedExample = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [debouncedTerm, setDebouncedTerm] = useState('');

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedTerm(searchTerm);
    }, 500);

    return () => clearTimeout(timer);
  }, [searchTerm]);

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  return (
    <div>
      <input
        type="text"
        value={searchTerm}
        onChange={handleSearch}
        placeholder="Search..."
      />
      <p>Searching for: {debouncedTerm}</p>
    </div>
  );
};
\`\`\`

### **Throttled Handler:**
\`\`\`javascript
const ThrottledExample = () => {
  const [scrollY, setScrollY] = useState(0);

  useEffect(() => {
    let ticking = false;

    const handleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          setScrollY(window.scrollY);
          ticking = false;
        });
        ticking = true;
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <div>
      <div style={{height: '200vh'}}>
        <p>Scroll position: {scrollY}px</p>
      </div>
    </div>
  );
};
\`\`\`

## 🎨 Advanced Event Patterns

### **Event Delegation:**
\`\`\`javascript
const EventDelegationExample = () => {
  const handleListClick = (e) => {
    if (e.target.tagName === 'BUTTON') {
      const itemId = e.target.dataset.id;
      console.log('Item clicked:', itemId);
    }
  };

  const items = [
    { id: 1, name: 'Item 1' },
    { id: 2, name: 'Item 2' },
    { id: 3, name: 'Item 3' }
  ];

  return (
    <ul onClick={handleListClick}>
      {items.map(item => (
        <li key={item.id}>
          {item.name}
          <button data-id={item.id}>Delete</button>
        </li>
      ))}
    </ul>
  );
};
\`\`\`

### **Custom Event Hook:**
\`\`\`javascript
const useEventListener = (eventName, handler, element = window) => {
  useEffect(() => {
    if (!(element && element.addEventListener)) return;

    element.addEventListener(eventName, handler);

    return () => {
      element.removeEventListener(eventName, handler);
    };
  }, [eventName, element, handler]);
};

const CustomHookExample = () => {
  const [key, setKey] = useState('');

  useEventListener('keydown', (e) => {
    setKey(e.key);
  });

  return (
    <div>
      <p>Last key pressed: {key}</p>
    </div>
  );
};
\`\`\`

## 💡 Best Practices

### **1. Event Handler Naming:**
- ✅ **handleClick**, **handleSubmit**, **handleChange**
- ❌ **click**, **submit**, **change**

### **2. Performance Optimization:**
- ✅ **useCallback** ile handler'ları memoize edin
- ✅ **Event delegation** kullanın
- ✅ **Debounce/throttle** gereksiz event'leri

### **3. Event Cleanup:**
- ✅ **useEffect cleanup** ile event listener'ları temizleyin
- ✅ **Memory leak**'leri önleyin

## 🎯 Sonuç

React event handling:

- ✅ **SyntheticEvent** ile tarayıcı uyumluluğu
- ✅ **Event propagation** kontrolü
- ✅ **Performance optimization** teknikleri
- ✅ **Custom event patterns** oluşturma

Event handling, React uygulamalarında kullanıcı etkileşimlerini yönetmenin temel yoludur.`,
            codeExamples: [
              {
                id: 'event-handling-examples',
                title: 'Event Handling Örnekleri',
                code: `// Temel event handling
const Button = () => {
  const handleClick = (e) => {
    e.preventDefault();
    console.log('Button clicked!');
  };

  return <button onClick={handleClick}>Click me</button>;
};

// Form event handling
const Form = () => {
  const [value, setValue] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', value);
  };

  const handleChange = (e) => {
    setValue(e.target.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input value={value} onChange={handleChange} />
      <button type="submit">Submit</button>
    </form>
  );
};

// Event propagation
const EventPropagation = () => {
  const handleParent = () => console.log('Parent');
  const handleChild = (e) => {
    e.stopPropagation();
    console.log('Child');
  };

  return (
    <div onClick={handleParent}>
      <button onClick={handleChild}>Click</button>
    </div>
  );
};`,
                language: 'javascript',
                description: 'React event handling örnekleri'
              }
            ],
            relatedProjects: ['event-handling'],
            resources: [
              {
                id: 'react-events',
                title: 'React Events',
                url: 'https://react.dev/learn/responding-to-events',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-state-mantigi',
            title: 'React State Mantığı',
            description: 'React state yönetimi ve mantığı',
            duration: '15 dakika',
            difficulty: 'medium',
            content: `# React State Mantığı 🧠

React'te state, component'lerin verilerini yönetmenin temel yoludur. State, component'in iç durumunu temsil eder ve değiştiğinde component yeniden render edilir.

## 🎯 State Nedir?

### **State Tanımı:**
State, component'in kendi verisini yönetme yöntemidir. State değiştiğinde, React component'i yeniden render eder.

### **State vs Props:**
- **Props**: Parent'tan child'a geçen veriler (read-only)
- **State**: Component'in kendi verisi (mutable)

## 🔄 State Güncelleme Mantığı

### **1. State Immutability:**
\`\`\`javascript
const StateExample = () => {
  const [user, setUser] = useState({
    name: 'John',
    age: 30,
    hobbies: ['reading', 'coding']
  });

  // ❌ Yanlış: State'i direkt değiştirme
  const updateUserWrong = () => {
    user.name = 'Jane'; // Bu çalışmaz!
    setUser(user);
  };

  // ✅ Doğru: Yeni obje oluşturma
  const updateUserCorrect = () => {
    setUser({
      ...user,
      name: 'Jane'
    });
  };

  // ✅ Doğru: Functional update
  const updateUserFunctional = () => {
    setUser(prevUser => ({
      ...prevUser,
      name: 'Jane'
    }));
  };

  return (
    <div>
      <p>Name: {user.name}</p>
      <p>Age: {user.age}</p>
      <button onClick={updateUserCorrect}>Update Name</button>
    </div>
  );
};
\`\`\`

### **2. Array State Güncelleme:**
\`\`\`javascript
const ArrayStateExample = () => {
  const [items, setItems] = useState(['item1', 'item2']);

  // ✅ Yeni item ekleme
  const addItem = (newItem) => {
    setItems(prevItems => [...prevItems, newItem]);
  };

  // ✅ Item silme
  const removeItem = (index) => {
    setItems(prevItems => prevItems.filter((_, i) => i !== index));
  };

  // ✅ Item güncelleme
  const updateItem = (index, newValue) => {
    setItems(prevItems => 
      prevItems.map((item, i) => i === index ? newValue : item)
    );
  };

  return (
    <div>
      <ul>
        {items.map((item, index) => (
          <li key={index}>
            {item}
            <button onClick={() => removeItem(index)}>Remove</button>
          </li>
        ))}
      </ul>
      <button onClick={() => addItem('new item')}>Add Item</button>
    </div>
  );
};
\`\`\`

## 🎯 State Batching

### **React 18 State Batching:**
\`\`\`javascript
const BatchingExample = () => {
  const [count, setCount] = useState(0);
  const [flag, setFlag] = useState(false);

  const handleClick = () => {
    // React 18'de bu işlemler tek seferde batch'lenir
    setCount(c => c + 1);
    setFlag(f => !f);
    // Sadece 1 re-render olur
  };

  return (
    <div>
      <p>Count: {count}</p>
      <p>Flag: {flag.toString()}</p>
      <button onClick={handleClick}>Update Both</button>
    </div>
  );
};
\`\`\`

### **flushSync ile Batching'i Kırma:**
\`\`\`javascript
import { flushSync } from 'react-dom';

const FlushSyncExample = () => {
  const [count, setCount] = useState(0);
  const [flag, setFlag] = useState(false);

  const handleClick = () => {
    // İlk state güncellemesi hemen render edilir
    flushSync(() => {
      setCount(c => c + 1);
    });
    
    // İkinci state güncellemesi ayrı render edilir
    setFlag(f => !f);
    // Toplam 2 re-render olur
  };

  return (
    <div>
      <p>Count: {count}</p>
      <p>Flag: {flag.toString()}</p>
      <button onClick={handleClick}>Update with flushSync</button>
    </div>
  );
};
\`\`\`

## 🔄 State Update Patterns

### **1. Functional Updates:**
\`\`\`javascript
const FunctionalUpdateExample = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    // ✅ Functional update - önceki değeri kullanır
    setCount(prevCount => prevCount + 1);
  };

  const incrementMultiple = () => {
    // ✅ Her güncelleme önceki değeri kullanır
    setCount(prevCount => prevCount + 1);
    setCount(prevCount => prevCount + 1);
    setCount(prevCount => prevCount + 1);
    // Sonuç: +3
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+1</button>
      <button onClick={incrementMultiple}>+3</button>
    </div>
  );
};
\`\`\`

### **2. State Reset Pattern:**
\`\`\`javascript
const StateResetExample = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });

  const resetForm = () => {
    setFormData({
      name: '',
      email: '',
      message: ''
    });
  };

  const updateField = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <form>
      <input
        value={formData.name}
        onChange={(e) => updateField('name', e.target.value)}
        placeholder="Name"
      />
      <input
        value={formData.email}
        onChange={(e) => updateField('email', e.target.value)}
        placeholder="Email"
      />
      <textarea
        value={formData.message}
        onChange={(e) => updateField('message', e.target.value)}
        placeholder="Message"
      />
      <button type="button" onClick={resetForm}>Reset</button>
    </form>
  );
};
\`\`\`

## 🎨 Complex State Management

### **1. Nested State:**
\`\`\`javascript
const NestedStateExample = () => {
  const [user, setUser] = useState({
    profile: {
      name: 'John',
      age: 30
    },
    settings: {
      theme: 'light',
      notifications: true
    }
  });

  const updateProfile = (field, value) => {
    setUser(prev => ({
      ...prev,
      profile: {
        ...prev.profile,
        [field]: value
      }
    }));
  };

  const updateSettings = (field, value) => {
    setUser(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        [field]: value
      }
    }));
  };

  return (
    <div>
      <h3>Profile</h3>
      <p>Name: {user.profile.name}</p>
      <p>Age: {user.profile.age}</p>
      
      <h3>Settings</h3>
      <p>Theme: {user.settings.theme}</p>
      <p>Notifications: {user.settings.notifications.toString()}</p>
      
      <button onClick={() => updateProfile('name', 'Jane')}>
        Update Name
      </button>
      <button onClick={() => updateSettings('theme', 'dark')}>
        Toggle Theme
      </button>
    </div>
  );
};
\`\`\`

### **2. State Machine Pattern:**
\`\`\`javascript
const StateMachineExample = () => {
  const [state, setState] = useState('idle');
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);

  const fetchData = async () => {
    setState('loading');
    setError(null);
    
    try {
      const response = await fetch('/api/data');
      const result = await response.json();
      setData(result);
      setState('success');
    } catch (err) {
      setError(err.message);
      setState('error');
    }
  };

  const reset = () => {
    setState('idle');
    setData(null);
    setError(null);
  };

  return (
    <div>
      <p>State: {state}</p>
      
      {state === 'idle' && (
        <button onClick={fetchData}>Fetch Data</button>
      )}
      
      {state === 'loading' && (
        <p>Loading...</p>
      )}
      
      {state === 'success' && (
        <div>
          <p>Data: {JSON.stringify(data)}</p>
          <button onClick={reset}>Reset</button>
        </div>
      )}
      
      {state === 'error' && (
        <div>
          <p>Error: {error}</p>
          <button onClick={reset}>Reset</button>
        </div>
      )}
    </div>
  );
};
\`\`\`

## 💡 State Best Practices

### **1. State Structure:**
- ✅ **Flat state** tercih edin
- ✅ **Related data**'yı gruplayın
- ❌ **Deep nesting**'den kaçının

### **2. State Updates:**
- ✅ **Functional updates** kullanın
- ✅ **Immutability** koruyun
- ✅ **Batch updates** yapın

### **3. Performance:**
- ✅ **useMemo** ile expensive calculations
- ✅ **useCallback** ile function references
- ✅ **State lifting** ile unnecessary re-renders

## 🎯 Sonuç

React state mantığı:

- ✅ **Immutability** ile güvenli güncellemeler
- ✅ **Functional updates** ile doğru değerler
- ✅ **Batching** ile performans optimizasyonu
- ✅ **Patterns** ile maintainable kod

State yönetimi, React uygulamalarının kalbi olan kritik bir konudur.`,
            codeExamples: [
              {
                id: 'state-management-examples',
                title: 'State Management Örnekleri',
                code: `// Temel state güncelleme
const [count, setCount] = useState(0);

// Functional update
setCount(prev => prev + 1);

// Object state güncelleme
const [user, setUser] = useState({ name: 'John', age: 30 });
setUser(prev => ({ ...prev, name: 'Jane' }));

// Array state güncelleme
const [items, setItems] = useState(['item1', 'item2']);
setItems(prev => [...prev, 'newItem']);

// State batching
const handleClick = () => {
  setCount(c => c + 1);
  setFlag(f => !f);
  // Tek re-render
};

// State machine
const [state, setState] = useState('idle');
const [data, setData] = useState(null);
const [error, setError] = useState(null);`,
                language: 'javascript',
                description: 'React state management örnekleri'
              }
            ],
            relatedProjects: ['state-management'],
            resources: [
              {
                id: 'react-state',
                title: 'React State',
                url: 'https://react.dev/learn/state-a-components-memory',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-usestate-hook',
            title: 'React useState Hook',
            description: 'useState hook kullanımı ve state yönetimi',
            duration: '12 dakika',
            difficulty: 'easy',
            content: `# React useState Hook 🎣

useState hook, React functional component'lerde state yönetimi için kullanılan en temel hook'tur. Bu hook, component'in state'ini oluşturmanızı ve güncellemenizi sağlar.

## 🎯 useState Hook Nedir?

### **Hook Tanımı:**
useState, functional component'lerde state oluşturmak ve yönetmek için kullanılan React hook'udur.

### **Temel Kullanım:**
\`\`\`javascript
import React, { useState } from 'react';

const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </div>
  );
};
\`\`\`

## 🔧 useState Syntax

### **Hook Yapısı:**
\`\`\`javascript
const [state, setState] = useState(initialValue);
\`\`\`

**Parametreler:**
- **state**: Mevcut state değeri
- **setState**: State'i güncellemek için fonksiyon
- **initialValue**: State'in başlangıç değeri

## 📊 Farklı Veri Türleri

### **1. Primitive Types:**
\`\`\`javascript
const PrimitiveExample = () => {
  const [count, setCount] = useState(0);           // Number
  const [name, setName] = useState('');            // String
  const [isActive, setIsActive] = useState(false); // Boolean
  const [data, setData] = useState(null);          // Null

  return (
    <div>
      <p>Count: {count}</p>
      <p>Name: {name}</p>
      <p>Active: {isActive.toString()}</p>
      <p>Data: {data}</p>
      
      <button onClick={() => setCount(count + 1)}>+1</button>
      <button onClick={() => setName('John')}>Set Name</button>
      <button onClick={() => setIsActive(!isActive)}>Toggle</button>
    </div>
  );
};
\`\`\`

### **2. Object State:**
\`\`\`javascript
const ObjectExample = () => {
  const [user, setUser] = useState({
    name: 'John',
    age: 30,
    email: 'john@example.com'
  });

  const updateUser = (field, value) => {
    setUser(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <div>
      <p>Name: {user.name}</p>
      <p>Age: {user.age}</p>
      <p>Email: {user.email}</p>
      
      <button onClick={() => updateUser('name', 'Jane')}>
        Update Name
      </button>
      <button onClick={() => updateUser('age', 31)}>
        Update Age
      </button>
    </div>
  );
};
\`\`\`

### **3. Array State:**
\`\`\`javascript
const ArrayExample = () => {
  const [items, setItems] = useState(['item1', 'item2']);

  const addItem = () => {
    setItems(prev => [...prev, \`item\${prev.length + 1}\`]);
  };

  const removeItem = (index) => {
    setItems(prev => prev.filter((_, i) => i !== index));
  };

  return (
    <div>
      <ul>
        {items.map((item, index) => (
          <li key={index}>
            {item}
            <button onClick={() => removeItem(index)}>Remove</button>
          </li>
        ))}
      </ul>
      <button onClick={addItem}>Add Item</button>
    </div>
  );
};
\`\`\`

## 🔄 State Güncelleme Yöntemleri

### **1. Direct Update:**
\`\`\`javascript
const DirectUpdateExample = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+1</button>
    </div>
  );
};
\`\`\`

### **2. Functional Update:**
\`\`\`javascript
const FunctionalUpdateExample = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(prev => prev + 1);
  };

  const incrementMultiple = () => {
    setCount(prev => prev + 1);
    setCount(prev => prev + 1);
    setCount(prev => prev + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+1</button>
      <button onClick={incrementMultiple}>+3</button>
    </div>
  );
};
\`\`\`

## 🎨 Lazy Initial State

### **Expensive Initial State:**
\`\`\`javascript
const LazyStateExample = () => {
  // ❌ Her render'da çalışır
  const [data, setData] = useState(expensiveCalculation());

  // ✅ Sadece ilk render'da çalışır
  const [data2, setData2] = useState(() => expensiveCalculation());

  return (
    <div>
      <p>Data: {data}</p>
      <p>Data2: {data2}</p>
    </div>
  );
};

const expensiveCalculation = () => {
  console.log('Expensive calculation running...');
  return Math.random() * 1000;
};
\`\`\`

## 🔧 Multiple useState

### **Ayrı State'ler:**
\`\`\`javascript
const MultipleStateExample = () => {
  const [name, setName] = useState('');
  const [age, setAge] = useState(0);
  const [email, setEmail] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log({ name, age, email });
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Name"
      />
      <input
        type="number"
        value={age}
        onChange={(e) => setAge(Number(e.target.value))}
        placeholder="Age"
      />
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      <button type="submit">Submit</button>
    </form>
  );
};
\`\`\`

### **Tek State ile:**
\`\`\`javascript
const SingleStateExample = () => {
  const [formData, setFormData] = useState({
    name: '',
    age: 0,
    email: ''
  });

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        value={formData.name}
        onChange={(e) => handleChange('name', e.target.value)}
        placeholder="Name"
      />
      <input
        type="number"
        value={formData.age}
        onChange={(e) => handleChange('age', Number(e.target.value))}
        placeholder="Age"
      />
      <input
        type="email"
        value={formData.email}
        onChange={(e) => handleChange('email', e.target.value)}
        placeholder="Email"
      />
      <button type="submit">Submit</button>
    </form>
  );
};
\`\`\`

## 🎯 Custom useState Hook

### **useCounter Hook:**
\`\`\`javascript
const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);

  const increment = () => setCount(prev => prev + 1);
  const decrement = () => setCount(prev => prev - 1);
  const reset = () => setCount(initialValue);

  return { count, increment, decrement, reset };
};

const CounterWithCustomHook = () => {
  const { count, increment, decrement, reset } = useCounter(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};
\`\`\`

### **useForm Hook:**
\`\`\`javascript
const useForm = (initialValues) => {
  const [values, setValues] = useState(initialValues);

  const handleChange = (field, value) => {
    setValues(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const reset = () => {
    setValues(initialValues);
  };

  return { values, handleChange, reset };
};

const FormWithCustomHook = () => {
  const { values, handleChange, reset } = useForm({
    name: '',
    email: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(values);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        value={values.name}
        onChange={(e) => handleChange('name', e.target.value)}
        placeholder="Name"
      />
      <input
        value={values.email}
        onChange={(e) => handleChange('email', e.target.value)}
        placeholder="Email"
      />
      <button type="submit">Submit</button>
      <button type="button" onClick={reset}>Reset</button>
    </form>
  );
};
\`\`\`

## 💡 useState Best Practices

### **1. State Structure:**
- ✅ **Flat state** tercih edin
- ✅ **Related data**'yı gruplayın
- ❌ **Deep nesting**'den kaçının

### **2. State Updates:**
- ✅ **Functional updates** kullanın
- ✅ **Immutability** koruyun
- ✅ **Lazy initial state** kullanın

### **3. Performance:**
- ✅ **useCallback** ile function references
- ✅ **useMemo** ile expensive calculations
- ✅ **State lifting** ile unnecessary re-renders

## 🎯 Sonuç

useState hook:

- ✅ **Functional component'lerde** state yönetimi
- ✅ **Primitive ve complex** veri türleri
- ✅ **Functional updates** ile güvenli güncellemeler
- ✅ **Custom hooks** ile yeniden kullanılabilirlik

useState, React uygulamalarında state yönetiminin temel taşıdır.`,
            codeExamples: [
              {
                id: 'usestate-examples',
                title: 'useState Örnekleri',
                code: `// Temel kullanım
const [count, setCount] = useState(0);

// Object state
const [user, setUser] = useState({ name: 'John', age: 30 });
setUser(prev => ({ ...prev, name: 'Jane' }));

// Array state
const [items, setItems] = useState(['item1', 'item2']);
setItems(prev => [...prev, 'newItem']);

// Functional update
setCount(prev => prev + 1);

// Lazy initial state
const [data, setData] = useState(() => expensiveCalculation());

// Custom hook
const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  const increment = () => setCount(prev => prev + 1);
  const decrement = () => setCount(prev => prev - 1);
  const reset = () => setCount(initialValue);
  return { count, increment, decrement, reset };
};`,
                language: 'javascript',
                description: 'useState hook örnekleri'
              }
            ],
            relatedProjects: ['usestate-examples'],
            resources: [
              {
                id: 'react-usestate',
                title: 'React useState',
                url: 'https://react.dev/reference/react/useState',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'usestate-uygulama',
            title: 'useState Uygulama',
            description: 'useState hook pratik uygulamaları',
            duration: '13 dakika',
            difficulty: 'medium',
            content: `# useState Uygulama 🎯

useState hook'unu gerçek projelerde nasıl kullanacağınızı öğrenin. Bu bölümde pratik örnekler ve gerçek dünya senaryoları üzerinde çalışacağız.

## 🎯 Pratik Uygulamalar

### **1. Todo List Uygulaması:**
\`\`\`javascript
import React, { useState } from 'react';

const TodoApp = () => {
  const [todos, setTodos] = useState([]);
  const [inputValue, setInputValue] = useState('');

  const addTodo = () => {
    if (inputValue.trim()) {
      setTodos(prev => [...prev, {
        id: Date.now(),
        text: inputValue,
        completed: false
      }]);
      setInputValue('');
    }
  };

  const toggleTodo = (id) => {
    setTodos(prev => prev.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  const deleteTodo = (id) => {
    setTodos(prev => prev.filter(todo => todo.id !== id));
  };

  return (
    <div>
      <h2>Todo List</h2>
      <div>
        <input
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder="Yeni todo ekle..."
          onKeyPress={(e) => e.key === 'Enter' && addTodo()}
        />
        <button onClick={addTodo}>Ekle</button>
      </div>
      <ul>
        {todos.map(todo => (
          <li key={todo.id} style={{
            textDecoration: todo.completed ? 'line-through' : 'none'
          }}>
            <span onClick={() => toggleTodo(todo.id)}>
              {todo.text}
            </span>
            <button onClick={() => deleteTodo(todo.id)}>Sil</button>
          </li>
        ))}
      </ul>
    </div>
  );
};
\`\`\`

### **2. Counter with History:**
\`\`\`javascript
const CounterWithHistory = () => {
  const [count, setCount] = useState(0);
  const [history, setHistory] = useState([0]);

  const increment = () => {
    const newCount = count + 1;
    setCount(newCount);
    setHistory(prev => [...prev, newCount]);
  };

  const decrement = () => {
    const newCount = count - 1;
    setCount(newCount);
    setHistory(prev => [...prev, newCount]);
  };

  const reset = () => {
    setCount(0);
    setHistory(prev => [...prev, 0]);
  };

  const undo = () => {
    if (history.length > 1) {
      const newHistory = history.slice(0, -1);
      setHistory(newHistory);
      setCount(newHistory[newHistory.length - 1]);
    }
  };

  return (
    <div>
      <h2>Counter with History</h2>
      <p>Current Count: {count}</p>
      <div>
        <button onClick={decrement}>-</button>
        <button onClick={increment}>+</button>
        <button onClick={reset}>Reset</button>
        <button onClick={undo} disabled={history.length <= 1}>
          Undo
        </button>
      </div>
      <div>
        <h3>History:</h3>
        <ul>
          {history.map((value, index) => (
            <li key={index}>{value}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};
\`\`\`

### **3. Form with Validation:**
\`\`\`javascript
const FormWithValidation = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = 'İsim gereklidir';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email gereklidir';
    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {
      newErrors.email = 'Geçerli bir email adresi girin';
    }

    if (!formData.password) {
      newErrors.password = 'Şifre gereklidir';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Şifre en az 6 karakter olmalıdır';
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Şifreler eşleşmiyor';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    setIsSubmitting(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('Form submitted:', formData);
    setIsSubmitting(false);
    
    // Reset form
    setFormData({
      name: '',
      email: '',
      password: '',
      confirmPassword: ''
    });
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Kayıt Formu</h2>
      
      <div>
        <input
          type="text"
          value={formData.name}
          onChange={(e) => handleChange('name', e.target.value)}
          placeholder="İsim"
        />
        {errors.name && <span style={{color: 'red'}}>{errors.name}</span>}
      </div>

      <div>
        <input
          type="email"
          value={formData.email}
          onChange={(e) => handleChange('email', e.target.value)}
          placeholder="Email"
        />
        {errors.email && <span style={{color: 'red'}}>{errors.email}</span>}
      </div>

      <div>
        <input
          type="password"
          value={formData.password}
          onChange={(e) => handleChange('password', e.target.value)}
          placeholder="Şifre"
        />
        {errors.password && <span style={{color: 'red'}}>{errors.password}</span>}
      </div>

      <div>
        <input
          type="password"
          value={formData.confirmPassword}
          onChange={(e) => handleChange('confirmPassword', e.target.value)}
          placeholder="Şifre Tekrar"
        />
        {errors.confirmPassword && <span style={{color: 'red'}}>{errors.confirmPassword}</span>}
      </div>

      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Kaydediliyor...' : 'Kaydet'}
      </button>
    </form>
  );
};
\`\`\`

### **4. Shopping Cart:**
\`\`\`javascript
const ShoppingCart = () => {
  const [cart, setCart] = useState([]);
  const [products] = useState([
    { id: 1, name: 'Laptop', price: 1000 },
    { id: 2, name: 'Mouse', price: 25 },
    { id: 3, name: 'Keyboard', price: 75 }
  ]);

  const addToCart = (product) => {
    setCart(prev => {
      const existingItem = prev.find(item => item.id === product.id);
      
      if (existingItem) {
        return prev.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        return [...prev, { ...product, quantity: 1 }];
      }
    });
  };

  const removeFromCart = (productId) => {
    setCart(prev => prev.filter(item => item.id !== productId));
  };

  const updateQuantity = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
      return;
    }

    setCart(prev => prev.map(item =>
      \${item.id} === productId
        ? { ...item, quantity: newQuantity }
        : item
    ));
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (\${item.price} * item.quantity), 0);
  };

  return (
    <div>
      <h2>Ürünler</h2>
      <div>
        {products.map(product => (
          <div key={product.id} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
            <h3>{product.name}</h3>
            <p>Fiyat: $\\{product.price}</p>
            <button onClick={() => addToCart(product)}>
              Sepete Ekle
            </button>
          </div>
        ))}
      </div>

      <h2>Sepet</h2>
      {cart.length === 0 ? (
        <p>Sepetiniz boş</p>
      ) : (
        <div>
          {cart.map(item => (
            <div key={item.id} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
              <h3>{item.name}</h3>
              <p>Fiyat: \${item.price}</p>
              <p>Miktar: {item.quantity}</p>
              <button onClick={() => updateQuantity(item.id, item.quantity - 1)}>
                -
              </button>
              <button onClick={() => updateQuantity(item.id, item.quantity + 1)}>
                +
              </button>
              <button onClick={() => removeFromCart(item.id)}>
                Kaldır
              </button>
            </div>
          ))}
          <h3>Toplam: \${getTotalPrice()}</h3>
        </div>
      )}
    </div>
  );
};
\`\`\`

## 🎨 Advanced Patterns

### **1. Custom Hook for Form:**
\`\`\`javascript
const useForm = (initialValues, validate) => {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  const handleChange = (field, value) => {
    setValues(prev => ({
      ...prev,
      [field]: value
    }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const handleBlur = (field) => {
    setTouched(prev => ({
      ...prev,
      [field]: true
    }));

    if (validate) {
      const fieldErrors = validate(values);
      setErrors(prev => ({
        ...prev,
        [field]: fieldErrors[field] || ''
      }));
    }
  };

  const handleSubmit = (onSubmit) => (e) => {
    e.preventDefault();
    
    if (validate) {
      const validationErrors = validate(values);
      setErrors(validationErrors);
      
      if (Object.keys(validationErrors).length === 0) {
        onSubmit(values);
      }
    } else {
      onSubmit(values);
    }
  };

  const reset = () => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
  };

  return {
    values,
    errors,
    touched,
    handleChange,
    handleBlur,
    handleSubmit,
    reset
  };
};

// Usage
const AdvancedForm = () => {
  const validate = (values) => {
    const errors = {};
    
    if (!values.name) errors.name = 'İsim gereklidir';
    if (!values.email) errors.email = 'Email gereklidir';
    
    return errors;
  };

  const {
    values,
    errors,
    touched,
    handleChange,
    handleBlur,
    handleSubmit,
    reset
  } = useForm({ name: '', email: '' }, validate);

  const onSubmit = (formData) => {
    console.log('Form submitted:', formData);
    reset();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input
        value={values.name}
        onChange={(e) => handleChange('name', e.target.value)}
        onBlur={() => handleBlur('name')}
        placeholder="İsim"
      />
      {touched.name && errors.name && <span style={{color: 'red'}}>{errors.name}</span>}
      
      <input
        value={values.email}
        onChange={(e) => handleChange('email', e.target.value)}
        onBlur={() => handleBlur('email')}
        placeholder="Email"
      />
      {touched.email && errors.email && <span style={{color: 'red'}}>{errors.email}</span>}
      
      <button type="submit">Gönder</button>
      <button type="button" onClick={reset}>Sıfırla</button>
    </form>
  );
};
\`\`\`

## 💡 Best Practices

### **1. State Structure:**
- ✅ **Flat state** tercih edin
- ✅ **Related data**'yı gruplayın
- ❌ **Deep nesting**'den kaçının

### **2. Performance:**
- ✅ **useCallback** ile function references
- ✅ **useMemo** ile expensive calculations
- ✅ **State lifting** ile unnecessary re-renders

### **3. Error Handling:**
- ✅ **Validation** ekleyin
- ✅ **Error states** yönetin
- ✅ **Loading states** gösterin

## 🎯 Sonuç

useState uygulamaları:

- ✅ **Gerçek projeler** için pratik örnekler
- ✅ **Form handling** ve validation
- ✅ **Complex state** yönetimi
- ✅ **Custom hooks** oluşturma

useState hook'unu etkili kullanarak güçlü React uygulamaları geliştirebilirsiniz.`,
            codeExamples: [
              {
                id: 'usestate-applications',
                title: 'useState Uygulama Örnekleri',
                code: `// Todo List
const [todos, setTodos] = useState([]);
const addTodo = (text) => {
  setTodos(prev => [...prev, { id: Date.now(), text, completed: false }]);
};

// Form with Validation
const [formData, setFormData] = useState({ name: '', email: '' });
const [errors, setErrors] = useState({});

// Shopping Cart
const [cart, setCart] = useState([]);
const addToCart = (product) => {
  setCart(prev => {
    const existing = prev.find(item => \${item.id} === product.id);
    return existing 
      ? prev.map(item => \${item.id} === product.id ? {...item, quantity: item.quantity + 1} : item)
      : [...prev, {...product, quantity: 1}];
  });
};

// Custom Form Hook
const useForm = (initialValues, validate) => {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  
  const handleChange = (field, value) => {
    setValues(prev => ({ ...prev, [field]: value }));
    if (errors[field]) setErrors(prev => ({ ...prev, [field]: '' }));
  };
  
  return { values, errors, handleChange };
};`,
                language: 'javascript',
                description: 'useState pratik uygulama örnekleri'
              }
            ],
            relatedProjects: ['todo-app', 'shopping-cart', 'form-validation'],
            resources: [
              {
                id: 'usestate-practices',
                title: 'useState Best Practices',
                url: 'https://react.dev/learn/state-a-components-memory',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'form-inputlarini-ekleme',
            title: 'Form Inputlarını Ekleme',
            description: 'React form input türleri ve kullanımı',
            duration: '10 dakika',
            difficulty: 'easy',
            content: `# Form Inputlarını Ekleme 📝

React'te form input türlerini ve nasıl kullanılacağını öğrenin. Farklı input türleri ve özelliklerini inceleyeceğiz.

## 🎯 Temel Input Türleri

### **1. Text Input:**
\`\`\`javascript
const TextInputExample = () => {
  const [text, setText] = useState('');

  return (
    <div>
      <label htmlFor="text-input">Metin:</label>
      <input
        id="text-input"
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Bir şeyler yazın..."
      />
      <p>Yazılan: {text}</p>
    </div>
  );
};
\`\`\`

### **2. Number Input:**
\`\`\`javascript
const NumberInputExample = () => {
  const [number, setNumber] = useState(0);

  return (
    <div>
      <label htmlFor="number-input">Sayı:</label>
      <input
        id="number-input"
        type="number"
        value={number}
        onChange={(e) => setNumber(Number(e.target.value))}
        min="0"
        max="100"
        step="1"
      />
      <p>Seçilen sayı: {number}</p>
    </div>
  );
};
\`\`\`

### **3. Email Input:**
\`\`\`javascript
const EmailInputExample = () => {
  const [email, setEmail] = useState('');

  return (
    <div>
      <label htmlFor="email-input">Email:</label>
      <input
        id="email-input"
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="ornek@email.com"
        required
      />
      <p>Email: {email}</p>
    </div>
  );
};
\`\`\`

### **4. Password Input:**
\`\`\`javascript
const PasswordInputExample = () => {
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  return (
    <div>
      <label htmlFor="password-input">Şifre:</label>
      <input
        id="password-input"
        type={showPassword ? 'text' : 'password'}
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Şifrenizi girin"
      />
      <button onClick={() => setShowPassword(!showPassword)}>
        {showPassword ? 'Gizle' : 'Göster'}
      </button>
    </div>
  );
};
\`\`\`

## 🔧 Advanced Input Types

### **5. Checkbox:**
\`\`\`javascript
const CheckboxExample = () => {
  const [checked, setChecked] = useState(false);
  const [preferences, setPreferences] = useState({
    newsletter: false,
    notifications: false,
    marketing: false
  });

  const handlePreferenceChange = (pref) => {
    setPreferences(prev => ({
      ...prev,
      [pref]: !prev[pref]
    }));
  };

  return (
    <div>
      <div>
        <input
          type="checkbox"
          id="single-checkbox"
          checked={checked}
          onChange={(e) => setChecked(e.target.checked)}
        />
        <label htmlFor="single-checkbox">Tekli checkbox</label>
      </div>

      <div>
        <h3>Tercihler:</h3>
        {Object.entries(preferences).map(([key, value]) => (
          <div key={key}>
            <input
              type="checkbox"
              id={key}
              checked={value}
              onChange={() => handlePreferenceChange(key)}
            />
            <label htmlFor={key}>{key}</label>
          </div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

### **6. Radio Buttons:**
\`\`\`javascript
const RadioExample = () => {
  const [selectedOption, setSelectedOption] = useState('');

  const options = [
    { value: 'option1', label: 'Seçenek 1' },
    { value: 'option2', label: 'Seçenek 2' },
    { value: 'option3', label: 'Seçenek 3' }
  ];

  return (
    <div>
      <h3>Radio Seçenekleri:</h3>
      {options.map(option => (
        <div key={option.value}>
          <input
            type="radio"
            id={option.value}
            name="radio-group"
            value={option.value}
            checked={selectedOption === option.value}
            onChange={(e) => setSelectedOption(e.target.value)}
          />
          <label htmlFor={option.value}>{option.label}</label>
        </div>
      ))}
      <p>Seçilen: {selectedOption}</p>
    </div>
  );
};
\`\`\`

### **7. Select Dropdown:**
\`\`\`javascript
const SelectExample = () => {
  const [selectedValue, setSelectedValue] = useState('');
  const [multipleValues, setMultipleValues] = useState([]);

  const options = [
    { value: 'tr', label: 'Türkçe' },
    { value: 'en', label: 'İngilizce' },
    { value: 'de', label: 'Almanca' },
    { value: 'fr', label: 'Fransızca' }
  ];

  const handleMultipleChange = (e) => {
    const values = Array.from(e.target.selectedOptions, option => option.value);
    setMultipleValues(values);
  };

  return (
    <div>
      <div>
        <label htmlFor="single-select">Tekli Seçim:</label>
        <select
          id="single-select"
          value={selectedValue}
          onChange={(e) => setSelectedValue(e.target.value)}
        >
          <option value="">Dil seçin</option>
          {options.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        <p>Seçilen: {selectedValue}</p>
      </div>

      <div>
        <label htmlFor="multiple-select">Çoklu Seçim:</label>
        <select
          id="multiple-select"
          multiple
          value={multipleValues}
          onChange={handleMultipleChange}
        >
          {options.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        <p>Seçilenler: {multipleValues.join(', ')}</p>
      </div>
    </div>
  );
};
\`\`\`

### **8. Textarea:**
\`\`\`javascript
const TextareaExample = () => {
  const [text, setText] = useState('');
  const [charCount, setCharCount] = useState(0);

  const handleTextChange = (e) => {
    const value = e.target.value;
    setText(value);
    setCharCount(value.length);
  };

  return (
    <div>
      <label htmlFor="textarea">Mesaj:</label>
      <textarea
        id="textarea"
        value={text}
        onChange={handleTextChange}
        placeholder="Mesajınızı yazın..."
        rows="4"
        cols="50"
        maxLength="500"
      />
      <p>Karakter sayısı: {charCount}/500</p>
    </div>
  );
};
\`\`\`

### **9. Range Slider:**
\`\`\`javascript
const RangeExample = () => {
  const [value, setValue] = useState(50);
  const [range, setRange] = useState({ min: 0, max: 100 });

  return (
    <div>
      <div>
        <label htmlFor="range-slider">Değer: {value}</label>
        <input
          id="range-slider"
          type="range"
          min="0"
          max="100"
          value={value}
          onChange={(e) => setValue(Number(e.target.value))}
        />
      </div>

      <div>
        <label htmlFor="min-range">Min: {range.min}</label>
        <input
          id="min-range"
          type="range"
          min="0"
          max="100"
          value={range.min}
          onChange={(e) => setRange(prev => ({ ...prev, min: Number(e.target.value) }))}
        />
      </div>

      <div>
        <label htmlFor="max-range">Max: {range.max}</label>
        <input
          id="max-range"
          type="range"
          min="0"
          max="100"
          value={range.max}
          onChange={(e) => setRange(prev => ({ ...prev, max: Number(e.target.value) }))}
        />
      </div>
    </div>
  );
};
\`\`\`

### **10. File Input:**
\`\`\`javascript
const FileInputExample = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setSelectedFile(file);

    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => setPreview(e.target.result);
      reader.readAsDataURL(file);
    } else {
      setPreview(null);
    }
  };

  return (
    <div>
      <label htmlFor="file-input">Dosya Seç:</label>
      <input
        id="file-input"
        type="file"
        onChange={handleFileChange}
        accept="image/*"
      />
      
      {selectedFile && (
        <div>
          <p>Seçilen dosya: {selectedFile.name}</p>
          <p>Boyut: {selectedFile.size} bytes</p>
          <p>Tür: {selectedFile.type}</p>
        </div>
      )}

      {preview && (
        <div>
          <img src={preview} alt="Preview" style={{maxWidth: '200px'}} />
        </div>
      )}
    </div>
  );
};
\`\`\`

## 🎨 Form Input Best Practices

### **1. Accessibility:**
\`\`\`javascript
const AccessibleForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    age: ''
  });

  return (
    <form>
      <div>
        <label htmlFor="name">İsim (zorunlu):</label>
        <input
          id="name"
          type="text"
          value={formData.name}
          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
          required
          aria-describedby="name-help"
        />
        <small id="name-help">Lütfen tam adınızı girin</small>
      </div>

      <div>
        <label htmlFor="email">Email:</label>
        <input
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          aria-describedby="email-help"
        />
        <small id="email-help">Geçerli bir email adresi girin</small>
      </div>
    </form>
  );
};
\`\`\`

### **2. Input Validation:**
\`\`\`javascript
const ValidatedInput = () => {
  const [value, setValue] = useState('');
  const [error, setError] = useState('');

  const validateInput = (inputValue) => {
    if (!inputValue.trim()) {
      return 'Bu alan zorunludur';
    }
    if (inputValue.length < 3) {
      return 'En az 3 karakter olmalıdır';
    }
    return '';
  };

  const handleChange = (e) => {
    const newValue = e.target.value;
    setValue(newValue);
    setError(validateInput(newValue));
  };

  return (
    <div>
      <input
        type="text"
        value={value}
        onChange={handleChange}
        placeholder="En az 3 karakter"
        style={{ borderColor: error ? 'red' : 'green' }}
      />
      {error && <span style={{color: 'red'}}>{error}</span>}
    </div>
  );
};
\`\`\`

## 💡 Best Practices

### **1. Input Types:**
- ✅ **Doğru input type** kullanın
- ✅ **Placeholder** ekleyin
- ✅ **Required** attribute kullanın

### **2. Accessibility:**
- ✅ **Label** ekleyin
- ✅ **aria-describedby** kullanın
- ✅ **Keyboard navigation** destekleyin

### **3. Validation:**
- ✅ **Real-time validation** ekleyin
- ✅ **Error messages** gösterin
- ✅ **Visual feedback** verin

## 🎯 Sonuç

Form input türleri:

- ✅ **Temel input türleri** (text, number, email, password)
- ✅ **Advanced input türleri** (checkbox, radio, select, textarea)
- ✅ **Specialized inputs** (range, file, date)
- ✅ **Accessibility** ve validation

Doğru input türlerini kullanarak kullanıcı dostu formlar oluşturabilirsiniz.`,
            codeExamples: [
              {
                id: 'form-inputs-examples',
                title: 'Form Input Örnekleri',
                code: `// Temel input türleri
<input type="text" value={text} onChange={(e) => setText(e.target.value)} />
<input type="number" value={number} onChange={(e) => setNumber(Number(e.target.value))} />
<input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
<input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />

// Checkbox
<input type="checkbox" checked={checked} onChange={(e) => setChecked(e.target.checked)} />

// Radio
<input type="radio" name="group" value="option1" checked={selected === 'option1'} onChange={(e) => setSelected(e.target.value)} />

// Select
<select value={selected} onChange={(e) => setSelected(e.target.value)}>
  <option value="option1">Seçenek 1</option>
  <option value="option2">Seçenek 2</option>
</select>

// Textarea
<textarea value={text} onChange={(e) => setText(e.target.value)} rows="4" cols="50" />

// Range
<input type="range" min="0" max="100" value={value} onChange={(e) => setValue(Number(e.target.value))} />

// File
<input type="file" onChange={(e) => setFile(e.target.files[0])} accept="image/*" />`,
                language: 'javascript',
                description: 'React form input türleri örnekleri'
              }
            ],
            relatedProjects: ['form-builder', 'user-registration'],
            resources: [
              {
                id: 'html-input-types',
                title: 'HTML Input Types',
                url: 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'form-inputlarini-dinleme',
            title: 'Form Inputlarını Dinleme',
            description: 'Form input değişikliklerini dinleme ve yönetme',
            duration: '5 dakika',
            difficulty: 'easy',
            content: `# Form Inputlarını Dinleme 👂

React'te form input değişikliklerini nasıl dinleyeceğinizi ve yöneteceğinizi öğrenin. onChange event'leri ve form state yönetimi üzerinde çalışacağız.

## 🎯 Temel Input Dinleme

### **1. Basit Input Dinleme:**
\`\`\`javascript
const SimpleInputListener = () => {
  const [value, setValue] = useState('');

  const handleChange = (e) => {
    setValue(e.target.value);
    console.log('Input değişti:', e.target.value);
  };

  return (
    <div>
      <input
        type="text"
        value={value}
        onChange={handleChange}
        placeholder="Bir şeyler yazın..."
      />
      <p>Yazılan: {value}</p>
    </div>
  );
};
\`\`\`

### **2. Real-time Input Dinleme:**
\`\`\`javascript
const RealTimeInputListener = () => {
  const [value, setValue] = useState('');
  const [charCount, setCharCount] = useState(0);

  const handleChange = (e) => {
    const newValue = e.target.value;
    setValue(newValue);
    setCharCount(newValue.length);
    
    // Real-time validation
    if (newValue.length > 50) {
      console.log('Maksimum karakter sayısı aşıldı!');
    }
  };

  return (
    <div>
      <input
        type="text"
        value={value}
        onChange={handleChange}
        placeholder="Maksimum 50 karakter"
        maxLength="50"
      />
      <p>Karakter sayısı: {charCount}/50</p>
      <p>Yazılan: {value}</p>
    </div>
  );
};
\`\`\`

## 🔧 Advanced Input Listening

### **3. Debounced Input:**
\`\`\`javascript
const DebouncedInputListener = () => {
  const [value, setValue] = useState('');
  const [debouncedValue, setDebouncedValue] = useState('');

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedValue(value);
    }, 500);

    return () => clearTimeout(timer);
  }, [value]);

  const handleChange = (e) => {
    setValue(e.target.value);
  };

  return (
    <div>
      <input
        type="text"
        value={value}
        onChange={handleChange}
        placeholder="Debounced input..."
      />
      <p>Anlık değer: {value}</p>
      <p>Debounced değer: {debouncedValue}</p>
    </div>
  );
};
\`\`\`

### **4. Multiple Input Listening:**
\`\`\`javascript
const MultipleInputListener = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: ''
  });

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    console.log(\`\${field} değişti:\`, value);
  };

  return (
    <div>
      <input
        type="text"
        value={formData.name}
        onChange={(e) => handleInputChange('name', e.target.value)}
        placeholder="İsim"
      />
      <input
        type="email"
        value={formData.email}
        onChange={(e) => handleInputChange('email', e.target.value)}
        placeholder="Email"
      />
      <input
        type="tel"
        value={formData.phone}
        onChange={(e) => handleInputChange('phone', e.target.value)}
        placeholder="Telefon"
      />
      
      <div>
        <h3>Form Verisi:</h3>
        <pre>{JSON.stringify(formData, null, 2)}</pre>
      </div>
    </div>
  );
};
\`\`\`

## 🎨 Specialized Input Listening

### **5. File Input Listening:**
\`\`\`javascript
const FileInputListener = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [fileInfo, setFileInfo] = useState(null);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setSelectedFile(file);
    
    if (file) {
      setFileInfo({
        name: file.name,
        size: file.size,
        type: file.type,
        lastModified: new Date(file.lastModified).toLocaleString()
      });
      
      console.log('Dosya seçildi:', file.name);
    }
  };

  return (
    <div>
      <input
        type="file"
        onChange={handleFileChange}
        accept="image/*"
      />
      
      {fileInfo && (
        <div>
          <h3>Dosya Bilgileri:</h3>
          <p>İsim: {fileInfo.name}</p>
          <p>Boyut: {fileInfo.size} bytes</p>
          <p>Tür: {fileInfo.type}</p>
          <p>Son değişiklik: {fileInfo.lastModified}</p>
        </div>
      )}
    </div>
  );
};
\`\`\`

### **6. Range Input Listening:**
\`\`\`javascript
const RangeInputListener = () => {
  const [value, setValue] = useState(50);
  const [isDragging, setIsDragging] = useState(false);

  const handleChange = (e) => {
    setValue(Number(e.target.value));
  };

  const handleMouseDown = () => {
    setIsDragging(true);
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  return (
    <div>
      <input
        type="range"
        min="0"
        max="100"
        value={value}
        onChange={handleChange}
        onMouseDown={handleMouseDown}
        onMouseUp={handleMouseUp}
      />
      <p>Değer: {value}</p>
      <p>Durum: {isDragging ? 'Sürükleniyor' : 'Hareket etmiyor'}</p>
    </div>
  );
};
\`\`\`

## 🔄 Input Event Types

### **7. Different Event Types:**
\`\`\`javascript
const EventTypeListener = () => {
  const [events, setEvents] = useState([]);

  const addEvent = (eventType, value) => {
    setEvents(prev => [...prev, {
      type: eventType,
      value: value,
      timestamp: new Date().toLocaleTimeString()
    }]);
  };

  return (
    <div>
      <input
        type="text"
        onChange={(e) => addEvent('onChange', e.target.value)}
        onInput={(e) => addEvent('onInput', e.target.value)}
        onFocus={() => addEvent('onFocus', 'Focused')}
        onBlur={() => addEvent('onBlur', 'Blurred')}
        onKeyDown={(e) => addEvent('onKeyDown', e.key)}
        onKeyUp={(e) => addEvent('onKeyUp', e.key)}
        placeholder="Farklı event'leri test edin"
      />
      
      <div>
        <h3>Event Log:</h3>
        <ul>
          {events.slice(-10).map((event, index) => (
            <li key={index}>
              {event.timestamp} - {event.type}: {event.value}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};
\`\`\`

## 🎯 Input Validation Listening

### **8. Real-time Validation:**
\`\`\`javascript
const ValidationListener = () => {
  const [value, setValue] = useState('');
  const [errors, setErrors] = useState([]);

  const validateInput = (inputValue) => {
    const newErrors = [];
    
    if (inputValue.length < 3) {
      newErrors.push('En az 3 karakter olmalıdır');
    }
    
    if (inputValue.length > 20) {
      newErrors.push('En fazla 20 karakter olabilir');
    }
    
    if (!/^[a-zA-Z0-9]+$/.test(inputValue) && inputValue.length > 0) {
      newErrors.push('Sadece harf ve rakam kullanılabilir');
    }
    
    return newErrors;
  };

  const handleChange = (e) => {
    const newValue = e.target.value;
    setValue(newValue);
    setErrors(validateInput(newValue));
  };

  return (
    <div>
      <input
        type="text"
        value={value}
        onChange={handleChange}
        placeholder="3-20 karakter, sadece harf ve rakam"
        style={{
          borderColor: errors.length > 0 ? 'red' : 'green'
        }}
      />
      
      {errors.length > 0 && (
        <div style={{color: 'red'}}>
          {errors.map((error, index) => (
            <p key={index}>{error}</p>
          ))}
        </div>
      )}
      
      <p>Değer: {value}</p>
    </div>
  );
};
\`\`\`

## 💡 Best Practices

### **1. Event Handling:**
- ✅ **onChange** ile temel input değişiklikleri
- ✅ **onInput** ile real-time değişiklikler
- ✅ **onBlur** ile validation

### **2. Performance:**
- ✅ **Debouncing** ile gereksiz işlemleri önleyin
- ✅ **useCallback** ile function references
- ✅ **Controlled components** kullanın

### **3. User Experience:**
- ✅ **Real-time feedback** verin
- ✅ **Visual indicators** ekleyin
- ✅ **Error handling** yapın

## 🎯 Sonuç

Form input dinleme:

- ✅ **Temel input dinleme** (onChange)
- ✅ **Advanced patterns** (debouncing, validation)
- ✅ **Specialized inputs** (file, range)
- ✅ **Event types** ve validation

Input dinleme, kullanıcı etkileşimlerini yönetmenin temel yoludur.`,
            codeExamples: [
              {
                id: 'input-listening-examples',
                title: 'Input Dinleme Örnekleri',
                code: `// Temel input dinleme
const handleChange = (e) => {
  setValue(e.target.value);
  console.log('Input değişti:', e.target.value);
};

// Multiple input dinleme
const handleInputChange = (field, value) => {
  setFormData(prev => ({ ...prev, [field]: value }));
};

// Debounced input
useEffect(() => {
  const timer = setTimeout(() => {
    setDebouncedValue(value);
  }, 500);
  return () => clearTimeout(timer);
}, [value]);

// File input dinleme
const handleFileChange = (e) => {
  const file = e.target.files[0];
  setSelectedFile(file);
  if (file) {
    console.log('Dosya seçildi:', file.name);
  }
};

// Real-time validation
const validateInput = (inputValue) => {
  const errors = [];
  if (inputValue.length < 3) errors.push('En az 3 karakter');
  if (!/^[a-zA-Z0-9]+$/.test(inputValue)) errors.push('Sadece harf ve rakam');
  return errors;
};`,
                language: 'javascript',
                description: 'React input dinleme örnekleri'
              }
            ],
            relatedProjects: ['form-validation', 'search-input'],
            resources: [
              {
                id: 'react-events',
                title: 'React Events',
                url: 'https://react.dev/learn/responding-to-events',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'birden-fazla-state-ile-calismak',
            title: 'Birden Fazla State İle Çalışmak',
            description: 'Çoklu state yönetimi ve koordinasyonu',
            duration: '6 dakika',
            difficulty: 'medium',
            content: `# Birden Fazla State İle Çalışmak 🔄

React'te birden fazla state'i nasıl yöneteceğinizi ve koordine edeceğinizi öğrenin. State'ler arası ilişkiler ve senkronizasyon üzerinde çalışacağız.

## 🎯 Çoklu State Yönetimi

### **1. Bağımsız State'ler:**
\`\`\`javascript
const IndependentStates = () => {
  const [name, setName] = useState('');
  const [age, setAge] = useState(0);
  const [email, setEmail] = useState('');

  return (
    <div>
      <input
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="İsim"
      />
      <input
        type="number"
        value={age}
        onChange={(e) => setAge(Number(e.target.value))}
        placeholder="Yaş"
      />
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      
      <div>
        <h3>Form Verisi:</h3>
        <p>İsim: {name}</p>
        <p>Yaş: {age}</p>
        <p>Email: {email}</p>
      </div>
    </div>
  );
};
\`\`\`

### **2. Bağımlı State'ler:**
\`\`\`javascript
const DependentStates = () => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [fullName, setFullName] = useState('');

  useEffect(() => {
    setFullName(\`\${firstName} \${lastName}\`.trim());
  }, [firstName, lastName]);

  return (
    <div>
      <input
        value={firstName}
        onChange={(e) => setFirstName(e.target.value)}
        placeholder="Ad"
      />
      <input
        value={lastName}
        onChange={(e) => setLastName(e.target.value)}
        placeholder="Soyad"
      />
      
      <p>Tam İsim: {fullName}</p>
    </div>
  );
};
\`\`\`

## 🔧 State Koordinasyonu

### **3. State Synchronization:**
\`\`\`javascript
const StateSynchronization = () => {
  const [count, setCount] = useState(0);
  const [doubleCount, setDoubleCount] = useState(0);
  const [isEven, setIsEven] = useState(true);

  useEffect(() => {
    setDoubleCount(count * 2);
    setIsEven(count % 2 === 0);
  }, [count]);

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>
        Count: {count}
      </button>
      <p>Double Count: {doubleCount}</p>
      <p>Is Even: {isEven ? 'Yes' : 'No'}</p>
    </div>
  );
};
\`\`\`

### **4. Complex State Relationships:**
\`\`\`javascript
const ComplexStateRelationships = () => {
  const [user, setUser] = useState({
    name: '',
    email: '',
    age: 0
  });
  const [isValid, setIsValid] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const newErrors = {};
    
    if (!user.name.trim()) {
      newErrors.name = 'İsim gereklidir';
    }
    
    if (!user.email.trim()) {
      newErrors.email = 'Email gereklidir';
    } else if (!/\\S+@\\S+\\.\\S+/.test(user.email)) {
      newErrors.email = 'Geçerli email girin';
    }
    
    if (user.age < 18) {
      newErrors.age = '18 yaşından büyük olmalı';
    }
    
    setErrors(newErrors);
    setIsValid(Object.keys(newErrors).length === 0);
  }, [user]);

  const updateUser = (field, value) => {
    setUser(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <div>
      <input
        value={user.name}
        onChange={(e) => updateUser('name', e.target.value)}
        placeholder="İsim"
        style={{ borderColor: errors.name ? 'red' : 'green' }}
      />
      {errors.name && <span style={{color: 'red'}}>{errors.name}</span>}
      
      <input
        value={user.email}
        onChange={(e) => updateUser('email', e.target.value)}
        placeholder="Email"
        style={{ borderColor: errors.email ? 'red' : 'green' }}
      />
      {errors.email && <span style={{color: 'red'}}>{errors.email}</span>}
      
      <input
        type="number"
        value={user.age}
        onChange={(e) => updateUser('age', Number(e.target.value))}
        placeholder="Yaş"
        style={{ borderColor: errors.age ? 'red' : 'green' }}
      />
      {errors.age && <span style={{color: 'red'}}>{errors.age}</span>}
      
      <p>Form Geçerli: {isValid ? 'Evet' : 'Hayır'}</p>
    </div>
  );
};
\`\`\`

## 🎨 State Management Patterns

### **5. State Machine Pattern:**
\`\`\`javascript
const StateMachinePattern = () => {
  const [currentState, setCurrentState] = useState('idle');
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchData = async () => {
    setCurrentState('loading');
    setLoading(true);
    setError(null);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      const result = { message: 'Data loaded successfully' };
      setData(result);
      setCurrentState('success');
    } catch (err) {
      setError(err.message);
      setCurrentState('error');
    } finally {
      setLoading(false);
    }
  };

  const reset = () => {
    setCurrentState('idle');
    setData(null);
    setError(null);
    setLoading(false);
  };

  return (
    <div>
      <p>Current State: {currentState}</p>
      <p>Loading: {loading ? 'Yes' : 'No'}</p>
      
      {currentState === 'idle' && (
        <button onClick={fetchData}>Fetch Data</button>
      )}
      
      {currentState === 'loading' && (
        <p>Loading...</p>
      )}
      
      {currentState === 'success' && (
        <div>
          <p>Data: {JSON.stringify(data)}</p>
          <button onClick={reset}>Reset</button>
        </div>
      )}
      
      {currentState === 'error' && (
        <div>
          <p>Error: {error}</p>
          <button onClick={reset}>Reset</button>
        </div>
      )}
    </div>
  );
};
\`\`\`

### **6. State Composition:**
\`\`\`javascript
const StateComposition = () => {
  const [formData, setFormData] = useState({
    personal: {
      name: '',
      age: 0
    },
    contact: {
      email: '',
      phone: ''
    },
    preferences: {
      newsletter: false,
      notifications: true
    }
  });

  const [formErrors, setFormErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const updateFormData = (section, field, value) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const validateForm = () => {
    const errors = {};
    
    if (!formData.personal.name) {
      errors.name = 'İsim gereklidir';
    }
    
    if (!formData.contact.email) {
      errors.email = 'Email gereklidir';
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('Form submitted:', formData);
    setIsSubmitting(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>Kişisel Bilgiler</h3>
      <input
        value={formData.personal.name}
        onChange={(e) => updateFormData('personal', 'name', e.target.value)}
        placeholder="İsim"
      />
      {formErrors.name && <span style={{color: 'red'}}>{formErrors.name}</span>}
      
      <input
        type="number"
        value={formData.personal.age}
        onChange={(e) => updateFormData('personal', 'age', Number(e.target.value))}
        placeholder="Yaş"
      />
      
      <h3>İletişim Bilgileri</h3>
      <input
        type="email"
        value={formData.contact.email}
        onChange={(e) => updateFormData('contact', 'email', e.target.value)}
        placeholder="Email"
      />
      {formErrors.email && <span style={{color: 'red'}}>{formErrors.email}</span>}
      
      <input
        type="tel"
        value={formData.contact.phone}
        onChange={(e) => updateFormData('contact', 'phone', e.target.value)}
        placeholder="Telefon"
      />
      
      <h3>Tercihler</h3>
      <label>
        <input
          type="checkbox"
          checked={formData.preferences.newsletter}
          onChange={(e) => updateFormData('preferences', 'newsletter', e.target.checked)}
        />
        Newsletter
      </label>
      
      <label>
        <input
          type="checkbox"
          checked={formData.preferences.notifications}
          onChange={(e) => updateFormData('preferences', 'notifications', e.target.checked)}
        />
        Bildirimler
      </label>
      
      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Gönderiliyor...' : 'Gönder'}
      </button>
    </form>
  );
};
\`\`\`

## 💡 Best Practices

### **1. State Organization:**
- ✅ **Related state'leri** gruplayın
- ✅ **Independent state'leri** ayrı tutun
- ✅ **Derived state'leri** useEffect ile hesaplayın

### **2. Performance:**
- ✅ **useCallback** ile function references
- ✅ **useMemo** ile expensive calculations
- ✅ **State batching** kullanın

### **3. Maintainability:**
- ✅ **Clear naming** conventions
- ✅ **Consistent patterns** kullanın
- ✅ **Error handling** ekleyin

## 🎯 Sonuç

Çoklu state yönetimi:

- ✅ **Independent state'ler** - Bağımsız veriler
- ✅ **Dependent state'ler** - Bağımlı veriler
- ✅ **State synchronization** - Senkronizasyon
- ✅ **Complex relationships** - Karmaşık ilişkiler

Çoklu state yönetimi, React uygulamalarında veri akışını kontrol etmenin güçlü bir yoludur.`,
            codeExamples: [
              {
                id: 'multiple-states-examples',
                title: 'Çoklu State Örnekleri',
                code: `// Bağımsız state'ler
const [name, setName] = useState('');
const [age, setAge] = useState(0);
const [email, setEmail] = useState('');

// Bağımlı state'ler
const [firstName, setFirstName] = useState('');
const [lastName, setLastName] = useState('');
const [fullName, setFullName] = useState('');

useEffect(() => {
  setFullName(\`\${firstName} \${lastName}\`.trim());
}, [firstName, lastName]);

// State synchronization
const [count, setCount] = useState(0);
const [doubleCount, setDoubleCount] = useState(0);

useEffect(() => {
  setDoubleCount(count * 2);
}, [count]);

// Complex state relationships
const [user, setUser] = useState({ name: '', email: '', age: 0 });
const [isValid, setIsValid] = useState(false);
const [errors, setErrors] = useState({});

useEffect(() => {
  const newErrors = {};
  if (!user.name) newErrors.name = 'İsim gereklidir';
  if (!user.email) newErrors.email = 'Email gereklidir';
  setErrors(newErrors);
  setIsValid(Object.keys(newErrors).length === 0);
}, [user]);`,
                language: 'javascript',
                description: 'Çoklu state yönetimi örnekleri'
              }
            ],
            relatedProjects: ['multi-step-form', 'dashboard'],
            resources: [
              {
                id: 'react-state-management',
                title: 'React State Management',
                url: 'https://react.dev/learn/state-a-components-memory',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'coklu-stateleri-tek-state-icinde-yazmak',
            title: 'Çoklu Stateleri Tek State İçinde Yazmak',
            description: 'Birden fazla state\'i tek state objesi içinde yönetme',
            duration: '7 dakika',
            difficulty: 'medium',
            content: `# Çoklu Stateleri Tek State İçinde Yazmak 📦

React'te birden fazla state'i tek bir state objesi içinde nasıl yöneteceğinizi öğrenin. Bu yaklaşım state yönetimini basitleştirir ve performansı artırır.

## 🎯 Tek State Objesi Yaklaşımı

### **1. Basit State Objesi:**
\`\`\`javascript
const SingleStateObject = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    age: 0,
    isActive: false
  });

  const updateField = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const resetForm = () => {
    setFormData({
      name: '',
      email: '',
      age: 0,
      isActive: false
    });
  };

  return (
    <div>
      <input
        value={formData.name}
        onChange={(e) => updateField('name', e.target.value)}
        placeholder="İsim"
      />
      <input
        type="email"
        value={formData.email}
        onChange={(e) => updateField('email', e.target.value)}
        placeholder="Email"
      />
      <input
        type="number"
        value={formData.age}
        onChange={(e) => updateField('age', Number(e.target.value))}
        placeholder="Yaş"
      />
      <label>
        <input
          type="checkbox"
          checked={formData.isActive}
          onChange={(e) => updateField('isActive', e.target.checked)}
        />
        Aktif
      </label>
      
      <button onClick={resetForm}>Sıfırla</button>
      
      <div>
        <h3>Form Verisi:</h3>
        <pre>{JSON.stringify(formData, null, 2)}</pre>
      </div>
    </div>
  );
};
\`\`\`

### **2. Nested State Objesi:**
\`\`\`javascript
const NestedStateObject = () => {
  const [user, setUser] = useState({
    profile: {
      name: '',
      age: 0,
      avatar: ''
    },
    settings: {
      theme: 'light',
      language: 'tr',
      notifications: true
    },
    preferences: {
      newsletter: false,
      marketing: false
    }
  });

  const updateProfile = (field, value) => {
    setUser(prev => ({
      ...prev,
      profile: {
        ...prev.profile,
        [field]: value
      }
    }));
  };

  const updateSettings = (field, value) => {
    setUser(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        [field]: value
      }
    }));
  };

  const updatePreferences = (field, value) => {
    setUser(prev => ({
      ...prev,
      preferences: {
        ...prev.preferences,
        [field]: value
      }
    }));
  };

  return (
    <div>
      <h3>Profil</h3>
      <input
        value={user.profile.name}
        onChange={(e) => updateProfile('name', e.target.value)}
        placeholder="İsim"
      />
      <input
        type="number"
        value={user.profile.age}
        onChange={(e) => updateProfile('age', Number(e.target.value))}
        placeholder="Yaş"
      />
      
      <h3>Ayarlar</h3>
      <select
        value={user.settings.theme}
        onChange={(e) => updateSettings('theme', e.target.value)}
      >
        <option value="light">Açık</option>
        <option value="dark">Koyu</option>
      </select>
      
      <select
        value={user.settings.language}
        onChange={(e) => updateSettings('language', e.target.value)}
      >
        <option value="tr">Türkçe</option>
        <option value="en">İngilizce</option>
      </select>
      
      <label>
        <input
          type="checkbox"
          checked={user.settings.notifications}
          onChange={(e) => updateSettings('notifications', e.target.checked)}
        />
        Bildirimler
      </label>
      
      <h3>Tercihler</h3>
      <label>
        <input
          type="checkbox"
          checked={user.preferences.newsletter}
          onChange={(e) => updatePreferences('newsletter', e.target.checked)}
        />
        Newsletter
      </label>
      
      <label>
        <input
          type="checkbox"
          checked={user.preferences.marketing}
          onChange={(e) => updatePreferences('marketing', e.target.checked)}
        />
        Pazarlama
      </label>
      
      <div>
        <h3>Kullanıcı Verisi:</h3>
        <pre>{JSON.stringify(user, null, 2)}</pre>
      </div>
    </div>
  );
};
\`\`\`

## 🔧 Advanced State Management

### **3. Dynamic State Updates:**
\`\`\`javascript
const DynamicStateUpdates = () => {
  const [state, setState] = useState({
    count: 0,
    items: [],
    filters: {
      category: 'all',
      price: { min: 0, max: 1000 },
      inStock: true
    },
    ui: {
      loading: false,
      error: null,
      modalOpen: false
    }
  });

  const updateState = (path, value) => {
    setState(prev => {
      const newState = { ...prev };
      const keys = path.split('.');
      let current = newState;
      
      for (let i = 0; i < keys.length - 1; i++) {
        current = current[keys[i]] = { ...current[keys[i]] };
      }
      
      current[keys[keys.length - 1]] = value;
      return newState;
    });
  };

  const addItem = (item) => {
    updateState('items', [...state.items, item]);
  };

  const updateFilter = (filterPath, value) => {
    updateState(\`filters.\${filterPath}\`, value);
  };

  const setLoading = (loading) => {
    updateState('ui.loading', loading);
  };

  const setError = (error) => {
    updateState('ui.error', error);
  };

  return (
    <div>
      <h3>Counter: {state.count}</h3>
      <button onClick={() => updateState('count', state.count + 1)}>
        Artır
      </button>
      
      <h3>Items: {state.items.length}</h3>
      <button onClick={() => addItem({ id: Date.now(), name: 'New Item' })}>
        Item Ekle
      </button>
      
      <h3>Filters</h3>
      <select
        value={state.filters.category}
        onChange={(e) => updateFilter('category', e.target.value)}
      >
        <option value="all">Tümü</option>
        <option value="electronics">Elektronik</option>
        <option value="clothing">Giyim</option>
      </select>
      
      <input
        type="number"
        value={state.filters.price.min}
        onChange={(e) => updateFilter('price.min', Number(e.target.value))}
        placeholder="Min Fiyat"
      />
      
      <input
        type="number"
        value={state.filters.price.max}
        onChange={(e) => updateFilter('price.max', Number(e.target.value))}
        placeholder="Max Fiyat"
      />
      
      <label>
        <input
          type="checkbox"
          checked={state.filters.inStock}
          onChange={(e) => updateFilter('inStock', e.target.checked)}
        />
        Stokta Var
      </label>
      
      <h3>UI State</h3>
      <p>Loading: {state.ui.loading ? 'Yes' : 'No'}</p>
      <p>Error: {state.ui.error || 'None'}</p>
      <p>Modal: {state.ui.modalOpen ? 'Open' : 'Closed'}</p>
      
      <button onClick={() => setLoading(!state.ui.loading)}>
        Toggle Loading
      </button>
      
      <button onClick={() => setError(state.ui.error ? null : 'Test Error')}>
        Toggle Error
      </button>
      
      <button onClick={() => updateState('ui.modalOpen', !state.ui.modalOpen)}>
        Toggle Modal
      </button>
    </div>
  );
};
\`\`\`

### **4. State with Computed Values:**
\`\`\`javascript
const StateWithComputedValues = () => {
  const [state, setState] = useState({
    items: [
      { id: 1, name: 'Item 1', price: 10, quantity: 2 },
      { id: 2, name: 'Item 2', price: 20, quantity: 1 },
      { id: 3, name: 'Item 3', price: 15, quantity: 3 }
    ],
    discount: 0,
    tax: 0.18
  });

  // Computed values
  const subtotal = state.items.reduce((sum, item) => sum + (\${item.price} * item.quantity), 0);
  const discountAmount = subtotal * (state.discount / 100);
  const taxAmount = (subtotal - discountAmount) * state.tax;
  const total = subtotal - discountAmount + taxAmount;

  const updateItemQuantity = (id, quantity) => {
    setState(prev => ({
      ...prev,
      items: prev.items.map(item =>
        \${item.id} === id ? { ...item, quantity } : item
      )
    }));
  };

  const updateDiscount = (discount) => {
    setState(prev => ({
      ...prev,
      discount
    }));
  };

  return (
    <div>
      <h3>Shopping Cart</h3>
      
      {state.items.map(item => (
        <div key={\`\${item.id}\`} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
          <h4>{\`\${item.name}\`}</h4>
          <p>Fiyat: \${\`\${item.price}\`}</p>
          <p>Miktar: {item.quantity}</p>
          <p>Toplam: \${\`\${item.price * item.quantity}\`}</p>
          
          <button onClick={() => updateItemQuantity(\`\${item.id}\`, item.quantity - 1)}>
            -
          </button>
          <button onClick={() => updateItemQuantity(\`\${item.id}\`, item.quantity + 1)}>
            +
          </button>
        </div>
      ))}
      
      <div>
        <h3>Özet</h3>
        <p>Ara Toplam: $\\{subtotal.toFixed(2)}</p>
        <p>İndirim (%{state.discount}): $\\{discountAmount.toFixed(2)}</p>
        <p>KDV (%{(state.tax * 100)}): $\\{taxAmount.toFixed(2)}</p>
        <p><strong>Toplam: $\\{total.toFixed(2)}</strong></p>
      </div>
      
      <div>
        <label>
          İndirim Oranı (%):
          <input
            type="number"
            value={state.discount}
            onChange={(e) => updateDiscount(Number(e.target.value))}
            min="0"
            max="100"
          />
        </label>
      </div>
    </div>
  );
};
\`\`\`

## 🎨 Custom Hooks for State Management

### **5. Custom State Hook:**
\`\`\`javascript
const useObjectState = (initialState) => {
  const [state, setState] = useState(initialState);

  const updateState = (updates) => {
    setState(prev => ({
      ...prev,
      ...updates
    }));
  };

  const updateNestedState = (path, value) => {
    setState(prev => {
      const newState = { ...prev };
      const keys = path.split('.');
      let current = newState;
      
      for (let i = 0; i < keys.length - 1; i++) {
        current = current[keys[i]] = { ...current[keys[i]] };
      }
      
      current[keys[keys.length - 1]] = value;
      return newState;
    });
  };

  const resetState = () => {
    setState(initialState);
  };

  return {
    state,
    setState,
    updateState,
    updateNestedState,
    resetState
  };
};

// Usage
const CustomStateHookExample = () => {
  const {
    state,
    updateState,
    updateNestedState,
    resetState
  } = useObjectState({
    user: {
      name: '',
      email: ''
    },
    settings: {
      theme: 'light',
      notifications: true
    },
    ui: {
      loading: false,
      error: null
    }
  });

  return (
    <div>
      <input
        value={state.user.name}
        onChange={(e) => updateNestedState('user.name', e.target.value)}
        placeholder="İsim"
      />
      
      <input
        value={state.user.email}
        onChange={(e) => updateNestedState('user.email', e.target.value)}
        placeholder="Email"
      />
      
      <select
        value={state.settings.theme}
        onChange={(e) => updateNestedState('settings.theme', e.target.value)}
      >
        <option value="light">Açık</option>
        <option value="dark">Koyu</option>
      </select>
      
      <label>
        <input
          type="checkbox"
          checked={state.settings.notifications}
          onChange={(e) => updateNestedState('settings.notifications', e.target.checked)}
        />
        Bildirimler
      </label>
      
      <button onClick={() => updateState({ ui: { ...state.ui, loading: !state.ui.loading } })}>
        Toggle Loading
      </button>
      
      <button onClick={resetState}>
        Reset
      </button>
      
      <pre>{JSON.stringify(state, null, 2)}</pre>
    </div>
  );
};
\`\`\`

## 💡 Best Practices

### **1. State Structure:**
- ✅ **Logical grouping** - İlgili verileri gruplayın
- ✅ **Flat structure** - Mümkün olduğunca düz yapı
- ✅ **Consistent naming** - Tutarlı isimlendirme

### **2. Performance:**
- ✅ **Immutable updates** - Değişmez güncellemeler
- ✅ **Selective updates** - Seçici güncellemeler
- ✅ **Memoization** - Gerektiğinde memoization

### **3. Maintainability:**
- ✅ **Clear separation** - Net ayrım
- ✅ **Custom hooks** - Özel hook'lar
- ✅ **Type safety** - Tip güvenliği

## 🎯 Sonuç

Tek state objesi yaklaşımı:

- ✅ **Simplified management** - Basitleştirilmiş yönetim
- ✅ **Better performance** - Daha iyi performans
- ✅ **Easier testing** - Kolay test etme
- ✅ **Consistent updates** - Tutarlı güncellemeler

Tek state objesi yaklaşımı, karmaşık state yönetimini basitleştiren güçlü bir tekniktir.`,
            codeExamples: [
              {
                id: 'single-state-object-examples',
                title: 'Tek State Objesi Örnekleri',
                code: `// Basit state objesi
const [formData, setFormData] = useState({
  name: '', email: '', age: 0, isActive: false
});

const updateField = (field, value) => {
  setFormData(prev => ({ ...prev, [field]: value }));
};

// Nested state objesi
const [user, setUser] = useState({
  profile: { name: '', age: 0 },
  settings: { theme: 'light', notifications: true }
});

const updateProfile = (field, value) => {
  setUser(prev => ({
    ...prev,
    profile: { ...prev.profile, [field]: value }
  }));
};

// Dynamic state updates
const updateState = (path, value) => {
  setState(prev => {
    const newState = { ...prev };
    const keys = path.split('.');
    let current = newState;
    
    for (let i = 0; i < keys.length - 1; i++) {
      current = current[keys[i]] = { ...current[keys[i]] };
    }
    
    current[keys[keys.length - 1]] = value;
    return newState;
  });
};

// Custom hook
const useObjectState = (initialState) => {
  const [state, setState] = useState(initialState);
  
  const updateState = (updates) => {
    setState(prev => ({ ...prev, ...updates }));
  };
  
  return { state, updateState };
};`,
                language: 'javascript',
                description: 'Tek state objesi yönetimi örnekleri'
              }
            ],
            relatedProjects: ['complex-form', 'user-dashboard'],
            resources: [
              {
                id: 'react-state-patterns',
                title: 'React State Patterns',
                url: 'https://react.dev/learn/state-a-components-memory',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'react-keys-conditional-content',
        name: 'REACT KEYS VE CONDITIONAL CONTENT',
        icon: '🔑',
        description: 'React keys ve conditional rendering',
        topics: [
          {
            id: 'javascript-map-metodunu-iyi-anlamak',
            title: 'JavaScript Map Metodunu İyi Anlamak',
            description: 'JavaScript map metodunun React\'te kullanımı',
            duration: '10 dakika',
            difficulty: 'easy',
            content: `# JavaScript Map Metodunu İyi Anlamak 🗺️

JavaScript map metodu, React'te listeleri render etmek için en önemli array metodlarından biridir. Bu metodun nasıl çalıştığını ve React'te nasıl kullanılacağını öğrenin.

## 🎯 Map Metodu Nedir?

### **Temel Kullanım:**
\`\`\`javascript
const numbers = [1, 2, 3, 4, 5];

// Map ile her elemanı 2 ile çarp
const doubled = numbers.map(num => num * 2);
console.log(doubled); // [2, 4, 6, 8, 10]

// Map ile string'e çevir
const strings = numbers.map(num => num.toString());
console.log(strings); // ['1', '2', '3', '4', '5']
\`\`\`

### **Map vs For Loop:**
\`\`\`javascript
const users = [
  { id: 1, name: 'John', age: 30 },
  { id: 2, name: 'Jane', age: 25 },
  { id: 3, name: 'Bob', age: 35 }
];

// For loop ile
const namesForLoop = [];
for (let i = 0; i < users.length; i++) {
  namesForLoop.push(users[i].name);
}

// Map ile (daha temiz)
const namesMap = users.map(user => user.name);
console.log(namesMap); // ['John', 'Jane', 'Bob']
\`\`\`

## 🔧 Map Metodunun Parametreleri

### **1. Callback Function:**
\`\`\`javascript
const numbers = [1, 2, 3, 4, 5];

// Sadece value
const doubled = numbers.map(num => num * 2);

// Value ve index
const withIndex = numbers.map((num, index) => \`\${index}: \${num}\`);
console.log(withIndex); // ['0: 1', '1: 2', '2: 3', '3: 4', '4: 5']

// Value, index ve array
const withAll = numbers.map((num, index, array) => ({
  value: num,
  index: index,
  arrayLength: array.length
}));
\`\`\`

### **2. This Context:**
\`\`\`javascript
const multiplier = {
  factor: 2,
  multiply: function(numbers) {
    return numbers.map(function(num) {
      return num * this.factor;
    }, this); // this context'i belirt
  }
};

// Arrow function ile (this otomatik bind)
const multiplierArrow = {
  factor: 3,
  multiply: function(numbers) {
    return numbers.map(num => num * this.factor);
  }
};

console.log(multiplier.multiply([1, 2, 3])); // [2, 4, 6]
console.log(multiplierArrow.multiply([1, 2, 3])); // [3, 6, 9]
\`\`\`

## 🎨 React'te Map Kullanımı

### **1. Basit Liste Render:**
\`\`\`javascript
const SimpleList = () => {
  const items = ['Apple', 'Banana', 'Orange'];

  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  );
};
\`\`\`

### **2. Object Listesi Render:**
\`\`\`javascript
const UserList = () => {
  const users = [
    { id: 1, name: 'John', email: 'john@example.com' },
    { id: 2, name: 'Jane', email: 'jane@example.com' },
    { id: 3, name: 'Bob', email: 'bob@example.com' }
  ];

  return (
    <div>
      {users.map(user => (
        <div key={user.id} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
          <h3>{user.name}</h3>
          <p>{user.email}</p>
        </div>
      ))}
    </div>
  );
};
\`\`\`

### **3. Nested Map:**
\`\`\`javascript
const NestedList = () => {
  const categories = [
    {
      id: 1,
      name: 'Fruits',
      items: ['Apple', 'Banana', 'Orange']
    },
    {
      id: 2,
      name: 'Vegetables',
      items: ['Carrot', 'Broccoli', 'Spinach']
    }
  ];

  return (
    <div>
      {categories.map(category => (
        <div key={category.id}>
          <h2>{category.name}</h2>
          <ul>
            {category.items.map((item, index) => (
              <li key={index}>{item}</li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  );
};
\`\`\`

## 🔧 Advanced Map Patterns

### **4. Map ile Filter Kombinasyonu:**
\`\`\`javascript
const FilteredList = () => {
  const products = [
    { id: 1, name: 'Laptop', price: 1000, category: 'Electronics' },
    { id: 2, name: 'Book', price: 20, category: 'Education' },
    { id: 3, name: 'Phone', price: 800, category: 'Electronics' },
    { id: 4, name: 'Pen', price: 2, category: 'Office' }
  ];

  const [selectedCategory, setSelectedCategory] = useState('All');

  const filteredProducts = products
    .filter(item => selectedCategory === 'All' || item.category === selectedCategory)
    .map(item => (
      <div key={\`\${item.id}\`} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
        <h3>{\`\${item.name}\`}</h3>
        <p>Price: \${\`\${item.price}\`}</p>
        <p>Category: {\`\${item.category}\`}</p>
      </div>
    ));

  return (
    <div>
      <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
        <option value="All">All Categories</option>
        <option value="Electronics">Electronics</option>
        <option value="Education">Education</option>
        <option value="Office">Office</option>
      </select>
      
      <div>
        {filteredProducts}
      </div>
    </div>
  );
};
\`\`\`

### **5. Map ile Conditional Rendering:**
\`\`\`javascript
const ConditionalList = () => {
  const tasks = [
    { id: 1, title: 'Task 1', completed: true },
    { id: 2, title: 'Task 2', completed: false },
    { id: 3, title: 'Task 3', completed: true },
    { id: 4, title: 'Task 4', completed: false }
  ];

  const [showCompleted, setShowCompleted] = useState(true);

  const filteredTasks = tasks
    .filter(task => showCompleted || !task.completed)
    .map(task => (
      <div key={task.id} style={{
        border: '1px solid #ccc',
        padding: '10px',
        margin: '10px',
        backgroundColor: task.completed ? '#e8f5e8' : '#fff'
      }}>
        <h3 style={{textDecoration: task.completed ? 'line-through' : 'none'}}>
          {task.title}
        </h3>
        <p>Status: {task.completed ? 'Completed' : 'Pending'}</p>
      </div>
    ));

  return (
    <div>
      <label>
        <input
          type="checkbox"
          checked={showCompleted}
          onChange={(e) => setShowCompleted(e.target.checked)}
        />
        Show Completed Tasks
      </label>
      
      <div>
        {filteredTasks}
      </div>
    </div>
  );
};
\`\`\`

### **6. Map ile Event Handling:**
\`\`\`javascript
const InteractiveList = () => {
  const [items, setItems] = useState([
    { id: 1, name: 'Item 1', count: 0 },
    { id: 2, name: 'Item 2', count: 0 },
    { id: 3, name: 'Item 3', count: 0 }
  ]);

  const incrementCount = (id) => {
    setItems(prevItems =>
      prevItems.map(item =>
        \${item.id} === id ? { ...item, count: item.count + 1 } : item
      )
    );
  };

  const decrementCount = (id) => {
    setItems(prevItems =>
      prevItems.map(item =>
        \${item.id} === id ? { ...item, count: Math.max(0, item.count - 1) } : item
      )
    );
  };

  return (
    <div>
      {items.map(item => (
        <div key={\${item.id}} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
          <h3>{\${item.name}}</h3>
          <p>Count: {item.count}</p>
          <button onClick={() => incrementCount(\${item.id})}>+</button>
          <button onClick={() => decrementCount(\${item.id})}>-</button>
        </div>
      ))}
    </div>
  );
};
\`\`\`

## 🎯 Map Best Practices

### **1. Key Prop Kullanımı:**
\`\`\`javascript
// ❌ Yanlış - index kullanma
{items.map((item, index) => (
  <div key={index}>{\${item.name}}</div>
))}

// ✅ Doğru - unique id kullanma
{items.map(item => (
  <div key={\${item.id}}>{\${item.name}}</div>
))}
\`\`\`

### **2. Performance Optimization:**
\`\`\`javascript
// ❌ Yanlış - her render'da yeni array
const Component = ({ items }) => {
  return (
    <div>
      {items.map(item => (
        <div key={\${item.id}}>{\${item.name}}</div>
      ))}
    </div>
  );
};

// ✅ Doğru - useMemo ile optimize etme
const Component = ({ items }) => {
  const renderedItems = useMemo(() => 
    items.map(item => (
      <div key={\${item.id}}>{\${item.name}}</div>
    )), [items]
  );

  return <div>{renderedItems}</div>;
};
\`\`\`

### **3. Error Handling:**
\`\`\`javascript
const SafeList = ({ items }) => {
  if (!items || !Array.isArray(items)) {
    return <div>No items to display</div>;
  }

  return (
    <div>
      {items.map(item => {
        if (!item || !${item.id}) {
          return null; // Skip invalid items
        }
        
        return (
          <div key=${${item.id}}}>
            ${item.name} || 'Unnamed Item'}
          </div>
        );
      })}
    </div>
  );
};
\`\`\`

## 💡 Common Mistakes

### **1. Mutating Original Array:**
\`\`\`javascript
// ❌ Yanlış - original array'i değiştirme
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => {
  numbers.push(num * 2); // Original array'i değiştirme!
  return num * 2;
});

// ✅ Doğru - immutable approach
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);
\`\`\`

### **2. Side Effects in Map:**
\`\`\`javascript
// ❌ Yanlış - side effect'ler
const items = [1, 2, 3, 4, 5];
const processed = items.map(num => {
  console.log(num); // Side effect!
  localStorage.setItem('last', num); // Side effect!
  return num * 2;
});

// ✅ Doğru - pure function
const items = [1, 2, 3, 4, 5];
const processed = items.map(num => num * 2);
\`\`\`

## 🎯 Sonuç

JavaScript map metodu:

- ✅ **Array transformation** - Array dönüşümü
- ✅ **React list rendering** - React liste render'ı
- ✅ **Functional programming** - Fonksiyonel programlama
- ✅ **Performance optimization** - Performans optimizasyonu

Map metodu, React'te listeleri render etmek için vazgeçilmez bir araçtır.`,
            codeExamples: [
              {
                id: 'map-method-examples',
                title: 'Map Metodu Örnekleri',
                code: `// Temel map kullanımı
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);

// React'te liste render
const users = [
  { id: 1, name: 'John', email: 'john@example.com' },
  { id: 2, name: 'Jane', email: 'jane@example.com' }
];

const UserList = () => (
  <div>
    {users.map(user => (
      <div key={user.id}>
        <h3>{user.name}</h3>
        <p>{user.email}</p>
      </div>
    ))}
  </div>
);

// Map ile filter kombinasyonu
const filteredProducts = products
  .filter(item => ${item.category} === 'Electronics')
  .map(item => (
    <div key=${${item.id}}}>
      <h3>${${item.name}}}</h3>
      <p>Price: $${item.price}}</p>
    </div>
  ));

// Map ile event handling
const incrementCount = (id) => {
  setItems(prevItems =>
    prevItems.map(item =>
      ${item.id} === id ? { ...item, count: item.count + 1 } : item
    )
  );
};`,
                language: 'javascript',
                description: 'JavaScript map metodu örnekleri'
              }
            ],
            relatedProjects: ['user-list', 'product-catalog'],
            resources: [
              {
                id: 'mdn-array-map',
                title: 'MDN Array Map',
                url: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-key-ozelligi',
            title: 'React Key Özelliği',
            description: 'React key prop kullanımı ve önemi',
            duration: '10 dakika',
            difficulty: 'medium',
            content: `# React Key Özelliği 🔑

React'te key prop'u, liste elemanlarını benzersiz şekilde tanımlamak için kullanılır. Key'ler, React'in hangi elemanların değiştiğini, eklendiğini veya silindiğini anlamasını sağlar.

## 🎯 Key Nedir?

### **Key Tanımı:**
Key, React'te liste elemanlarını benzersiz şekilde tanımlayan özel bir prop'tur. React, key'leri kullanarak hangi elemanların değiştiğini anlar.

### **Key Kullanımı:**
\`\`\`javascript
const UserList = () => {
  const users = [
    { id: 1, name: 'John', age: 30 },
    { id: 2, name: 'Jane', age: 25 },
    { id: 3, name: 'Bob', age: 35 }
  ];

  return (
    <ul>
      {users.map(user => (
        <li key={user.id}>
          {user.name} - {user.age}
        </li>
      ))}
    </ul>
  );
};
\`\`\`

## 🔧 Key Kullanım Senaryoları

### **1. Basit Liste:**
\`\`\`javascript
const SimpleList = () => {
  const items = ['Apple', 'Banana', 'Orange'];

  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  );
};
\`\`\`

### **2. Object Listesi:**
\`\`\`javascript
const ProductList = () => {
  const products = [
    { id: 1, name: 'Laptop', price: 1000 },
    { id: 2, name: 'Mouse', price: 25 },
    { id: 3, name: 'Keyboard', price: 75 }
  ];

  return (
    <div>
      {products.map(item => (
        <div key=${${item.id}}} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
          <h3>${${item.name}}}</h3>
          <p>Price: $${item.price}}</p>
        </div>
      ))}
    </div>
  );
};
\`\`\`

### **3. Nested Components:**
\`\`\`javascript
const TodoItem = ({ todo, onToggle, onDelete }) => (
  <div style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
    <h3 style={{textDecoration: todo.completed ? 'line-through' : 'none'}}>
      {todo.title}
    </h3>
    <p>{todo.description}</p>
    <button onClick={() => onToggle(todo.id)}>
      {todo.completed ? 'Undo' : 'Complete'}
    </button>
    <button onClick={() => onDelete(todo.id)}>Delete</button>
  </div>
);

const TodoList = () => {
  const [todos, setTodos] = useState([
    { id: 1, title: 'Learn React', description: 'Study React fundamentals', completed: false },
    { id: 2, title: 'Build App', description: 'Create a todo app', completed: false },
    { id: 3, title: 'Deploy', description: 'Deploy to production', completed: true }
  ]);

  const toggleTodo = (id) => {
    setTodos(prevTodos =>
      prevTodos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  };

  const deleteTodo = (id) => {
    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));
  };

  return (
    <div>
      {todos.map(todo => (
        <TodoItem
          key={todo.id}
          todo={todo}
          onToggle={toggleTodo}
          onDelete={deleteTodo}
        />
      ))}
    </div>
  );
};
\`\`\`

## 🎨 Key Best Practices

### **1. Unique Keys:**
\`\`\`javascript
// ❌ Yanlış - duplicate keys
const users = [
  { id: 1, name: 'John' },
  { id: 1, name: 'Jane' }, // Duplicate ID!
  { id: 2, name: 'Bob' }
];

// ✅ Doğru - unique keys
const users = [
  { id: 1, name: 'John' },
  { id: 2, name: 'Jane' },
  { id: 3, name: 'Bob' }
];
\`\`\`

### **2. Stable Keys:**
\`\`\`javascript
// ❌ Yanlış - unstable keys
const items = ['Apple', 'Banana', 'Orange'];
const [filter, setFilter] = useState('');

const filteredItems = items.filter(item => item.includes(filter));

return (
  <ul>
    {filteredItems.map((item, index) => (
      <li key={index}>{item}</li> // Index değişebilir!
    ))}
  </ul>
);

// ✅ Doğru - stable keys
const items = [
  { id: 1, name: 'Apple' },
  { id: 2, name: 'Banana' },
  { id: 3, name: 'Orange' }
];

const filteredItems = items.filter(item => ${item.name}.includes(filter));

return (
  <ul>
    {filteredItems.map(item => (
      <li key=${item.id}}>${item.name}}</li> // ID sabit!
    ))}
  </ul>
);
\`\`\`

### **3. Key Placement:**
\`\`\`javascript
// ❌ Yanlış - key yanlış yerde
const UserList = () => {
  const users = [
    { id: 1, name: 'John', posts: ['Post 1', 'Post 2'] },
    { id: 2, name: 'Jane', posts: ['Post 3', 'Post 4'] }
  ];

  return (
    <div>
      {users.map(user => (
        <div>
          <h2 key={user.id}>{user.name}</h2> {/* Key yanlış yerde! */}
          <ul>
            {user.posts.map((post, index) => (
              <li key={index}>{post}</li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  );
};

// ✅ Doğru - key doğru yerde
const UserList = () => {
  const users = [
    { id: 1, name: 'John', posts: ['Post 1', 'Post 2'] },
    { id: 2, name: 'Jane', posts: ['Post 3', 'Post 4'] }
  ];

  return (
    <div>
      {users.map(user => (
        <div key={user.id}> {/* Key doğru yerde! */}
          <h2>{user.name}</h2>
          <ul>
            {user.posts.map((post, index) => (
              <li key={index}>{post}</li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  );
};
\`\`\`

## 🔧 Advanced Key Patterns

### **4. Dynamic Keys:**
\`\`\`javascript
const DynamicList = () => {
  const [items, setItems] = useState([
    { id: 1, name: 'Item 1' },
    { id: 2, name: 'Item 2' }
  ]);

  const addItem = () => {
    const newId = Math.max(...items.map(item => ${item.id})) + 1;
    setItems(prevItems => [
      ...prevItems,
      { id: newId, name: \`Item \${newId}\` }
    ]);
  };

  const removeItem = (id) => {
    setItems(prevItems => prevItems.filter(item => ${item.id} !== id));
  };

  return (
    <div>
      <button onClick={addItem}>Add Item</button>
      {items.map(item => (
        <div key=${${item.id}}} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
          <h3>${${item.name}}}</h3>
          <button onClick={() => removeItem(${item.id})}>Remove</button>
        </div>
      ))}
    </div>
  );
};
\`\`\`

### **5. Key with State:**
\`\`\`javascript
const StatefulList = () => {
  const [items, setItems] = useState([
    { id: 1, name: 'Item 1', count: 0 },
    { id: 2, name: 'Item 2', count: 0 },
    { id: 3, name: 'Item 3', count: 0 }
  ]);

  const incrementCount = (id) => {
    setItems(prevItems =>
      prevItems.map(item =>
        \${item.id} === id ? { ...item, count: item.count + 1 } : item
      )
    );
  };

  const resetCounts = () => {
    setItems(prevItems =>
      prevItems.map(item => ({ ...item, count: 0 }))
    );
  };

  return (
    <div>
      <button onClick={resetCounts}>Reset All</button>
      {items.map(item => (
        <div key=${${item.id}}} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
          <h3>${${item.name}}}</h3>
          <p>Count: {item.count}</p>
          <button onClick={() => incrementCount(${item.id})}>+1</button>
        </div>
      ))}
    </div>
  );
};
\`\`\`

### **6. Key with Reordering:**
\`\`\`javascript
const ReorderableList = () => {
  const [items, setItems] = useState([
    { id: 1, name: 'First' },
    { id: 2, name: 'Second' },
    { id: 3, name: 'Third' }
  ]);

  const moveUp = (id) => {
    setItems(prevItems => {
      const index = prevItems.findIndex(item => ${item.id} === id);
      if (index > 0) {
        const newItems = [...prevItems];
        [newItems[index - 1], newItems[index]] = [newItems[index], newItems[index - 1]];
        return newItems;
      }
      return prevItems;
    });
  };

  const moveDown = (id) => {
    setItems(prevItems => {
      const index = prevItems.findIndex(item => ${item.id} === id);
      if (index < prevItems.length - 1) {
        const newItems = [...prevItems];
        [newItems[index], newItems[index + 1]] = [newItems[index + 1], newItems[index]];
        return newItems;
      }
      return prevItems;
    });
  };

  return (
    <div>
      {items.map(item => (
        <div key=${${item.id}}} style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
          <h3>${${item.name}}}</h3>
          <button onClick={() => moveUp(${item.id})}>↑</button>
          <button onClick={() => moveDown(${item.id})}>↓</button>
        </div>
      ))}
    </div>
  );
};
\`\`\`

## 💡 Common Mistakes

### **1. Using Index as Key:**
\`\`\`javascript
// ❌ Yanlış - index kullanma
const items = ['Apple', 'Banana', 'Orange'];
const [filter, setFilter] = useState('');

const filteredItems = items.filter(item => item.includes(filter));

return (
  <ul>
    {filteredItems.map((item, index) => (
      <li key={index}>{item}</li> // Index değişebilir!
    ))}
  </ul>
);

// ✅ Doğru - stable key kullanma
const items = [
  { id: 1, name: 'Apple' },
  { id: 2, name: 'Banana' },
  { id: 3, name: 'Orange' }
];

const filteredItems = items.filter(item => ${item.name}.includes(filter));

return (
  <ul>
    {filteredItems.map(item => (
      <li key=${item.id}}>${item.name}}</li> // ID sabit!
    ))}
  </ul>
);
\`\`\`

### **2. Missing Keys:**
\`\`\`javascript
// ❌ Yanlış - key eksik
const items = ['Apple', 'Banana', 'Orange'];

return (
  <ul>
    {items.map(item => (
      <li>{item}</li> // Key eksik!
    ))}
  </ul>
);

// ✅ Doğru - key var
const items = ['Apple', 'Banana', 'Orange'];

return (
  <ul>
    {items.map((item, index) => (
      <li key={index}>{item}</li> // Key var!
    ))}
  </ul>
);
\`\`\`

## 🎯 Sonuç

React key özelliği:

- ✅ **Unique identification** - Benzersiz tanımlama
- ✅ **Performance optimization** - Performans optimizasyonu
- ✅ **State preservation** - State korunması
- ✅ **Efficient updates** - Verimli güncellemeler

Key'ler, React'te liste elemanlarını verimli şekilde yönetmek için kritik öneme sahiptir.`,
            codeExamples: [
              {
                id: 'react-key-examples',
                title: 'React Key Örnekleri',
                code: `// Temel key kullanımı
const users = [
  { id: 1, name: 'John', age: 30 },
  { id: 2, name: 'Jane', age: 25 }
];

const UserList = () => (
  <ul>
    {users.map(user => (
      <li key={user.id}>
        {user.name} - {user.age}
      </li>
    ))}
  </ul>
);

// Nested components ile key
const TodoItem = ({ todo, onToggle }) => (
  <div key={todo.id}>
    <h3>{todo.title}</h3>
    <button onClick={() => onToggle(todo.id)}>
      {todo.completed ? 'Undo' : 'Complete'}
    </button>
  </div>
);

// Dynamic keys
const addItem = () => {
  const newId = Math.max(...items.map(item => ${item.id})) + 1;
  setItems(prevItems => [
    ...prevItems,
    { id: newId, name: \`Item \${newId}\` }
  ]);
};

// Key with state updates
const incrementCount = (id) => {
  setItems(prevItems =>
    prevItems.map(item =>
      ${item.id} === id ? { ...item, count: item.count + 1 } : item
    )
  );
};`,
                language: 'javascript',
                description: 'React key prop örnekleri'
              }
            ],
            relatedProjects: ['todo-list', 'user-management'],
            resources: [
              {
                id: 'react-keys',
                title: 'React Keys',
                url: 'https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-conditional-content',
            title: 'React Conditional Content',
            description: 'React\'te koşullu içerik render etme',
            duration: '12 dakika',
            difficulty: 'medium',
            content: `# React Conditional Content 🎭

React'te koşullu içerik render etme, uygulamanızın durumuna göre farklı UI elemanları göstermenizi sağlar. Bu, modern web uygulamalarının temel özelliklerinden biridir.

## 🎯 Conditional Rendering Nedir?

### **Temel Konsept:**
Conditional rendering, belirli koşullara göre farklı JSX elemanları render etme işlemidir.

### **Basit Örnek:**
\`\`\`javascript
const Greeting = ({ isLoggedIn }) => {
  if (isLoggedIn) {
    return <h1>Welcome back!</h1>;
  }
  return <h1>Please sign up.</h1>;
};

// Kullanım
<Greeting isLoggedIn={true} />  // "Welcome back!"
<Greeting isLoggedIn={false} /> // "Please sign up."
\`\`\`

## 🔧 Conditional Rendering Yöntemleri

### **1. If-Else Statements:**
\`\`\`javascript
const UserProfile = ({ user }) => {
  if (!user) {
    return <div>Loading...</div>;
  }
  
  if (user.isAdmin) {
    return (
      <div>
        <h1>Admin Panel</h1>
        <p>Welcome, {user.name}!</p>
        <button>Admin Settings</button>
      </div>
    );
  }
  
  return (
    <div>
      <h1>User Profile</h1>
      <p>Welcome, {user.name}!</p>
    </div>
  );
};
\`\`\`

### **2. Ternary Operator:**
\`\`\`javascript
const LoginButton = ({ isLoggedIn, onLogin, onLogout }) => {
  return (
    <button onClick={isLoggedIn ? onLogout : onLogin}>
      {isLoggedIn ? 'Logout' : 'Login'}
    </button>
  );
};

// Nested ternary
const Message = ({ type, text }) => {
  return (
    <div className={\`message \${type === 'error' ? 'error' : type === 'warning' ? 'warning' : 'info'}\`}>
      {text}
    </div>
  );
};
\`\`\`

### **3. Logical AND Operator:**
\`\`\`javascript
const Notification = ({ message, show }) => {
  return (
    <div>
      {show && <div className="notification">{message}</div>}
    </div>
  );
};

// Multiple conditions
const UserDashboard = ({ user, permissions }) => {
  return (
    <div>
      <h1>Dashboard</h1>
      {user && <p>Welcome, {user.name}!</p>}
      {permissions.canEdit && <button>Edit Profile</button>}
      {permissions.canDelete && <button>Delete Account</button>}
      {permissions.isAdmin && <button>Admin Panel</button>}
    </div>
  );
};
\`\`\`

### **4. Switch Statement:**
\`\`\`javascript
const StatusIndicator = ({ status }) => {
  const getStatusComponent = () => {
    switch (status) {
      case 'loading':
        return <div className="spinner">Loading...</div>;
      case 'success':
        return <div className="success">✓ Success!</div>;
      case 'error':
        return <div className="error">✗ Error occurred</div>;
      case 'warning':
        return <div className="warning">⚠ Warning</div>;
      default:
        return <div className="unknown">? Unknown status</div>;
    }
  };

  return <div className="status-indicator">{getStatusComponent()}</div>;
};
\`\`\`

## 🎨 Advanced Conditional Patterns

### **5. Conditional CSS Classes:**
\`\`\`javascript
const Button = ({ variant, size, disabled, children }) => {
  const buttonClasses = [
    'btn',
    \`btn-\${variant}\`,
    \`btn-\${size}\`,
    disabled && 'btn-disabled'
  ].filter(Boolean).join(' ');

  return (
    <button className={buttonClasses} disabled={disabled}>
      {children}
    </button>
  );
};

// Kullanım
<Button variant="primary" size="large" disabled={false}>
  Click me
</Button>
\`\`\`

### **6. Conditional Lists:**
\`\`\`javascript
const TodoList = ({ todos, filter }) => {
  const filteredTodos = todos.filter(todo => {
    switch (filter) {
      case 'active':
        return !todo.completed;
      case 'completed':
        return todo.completed;
      default:
        return true;
    }
  });

  return (
    <div>
      <h2>Todo List</h2>
      {filteredTodos.length > 0 ? (
        <ul>
          {filteredTodos.map(todo => (
            <li key={todo.id} className={todo.completed ? 'completed' : ''}>
              {todo.text}
            </li>
          ))}
        </ul>
      ) : (
        <p>No todos found</p>
      )}
    </div>
  );
};
\`\`\`

### **7. Conditional Components:**
\`\`\`javascript
const AdminPanel = () => <div>Admin Panel Content</div>;
const UserPanel = () => <div>User Panel Content</div>;
const GuestPanel = () => <div>Guest Panel Content</div>;

const Dashboard = ({ user }) => {
  const renderPanel = () => {
    if (!user) return <GuestPanel />;
    if (user.isAdmin) return <AdminPanel />;
    return <UserPanel />;
  };

  return (
    <div>
      <h1>Dashboard</h1>
      {renderPanel()}
    </div>
  );
};
\`\`\`

### **8. Conditional Hooks:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (userId) {
      fetchUser(userId)
        .then(setUser)
        .catch(setError)
        .finally(() => setLoading(false));
    } else {
      setLoading(false);
    }
  }, [userId]);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  if (!user) return <div>User not found</div>;

  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
      {user.avatar && <img src={user.avatar} alt="Avatar" />}
    </div>
  );
};
\`\`\`

## 🔧 Complex Conditional Scenarios

### **9. Form Validation:**
\`\`\`javascript
const LoginForm = () => {
  const [formData, setFormData] = useState({ email: '', password: '' });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.email) {
      newErrors.email = 'Email is required';
    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }
    
    if (!formData.password) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      setIsSubmitting(true);
      // Submit logic
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <input
          type="email"
          value={formData.email}
          onChange={(e) => setFormData({...formData, email: e.target.value})}
          placeholder="Email"
        />
        {errors.email && <span className="error">{errors.email}</span>}
      </div>
      
      <div>
        <input
          type="password"
          value={formData.password}
          onChange={(e) => setFormData({...formData, password: e.target.value})}
          placeholder="Password"
        />
        {errors.password && <span className="error">{errors.password}</span>}
      </div>
      
      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Logging in...' : 'Login'}
      </button>
    </form>
  );
};
\`\`\`

### **10. Dynamic Content Loading:**
\`\`\`javascript
const ContentLoader = ({ contentType, contentId }) => {
  const [content, setContent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadContent = async () => {
      try {
        setLoading(true);
        const data = await fetchContent(contentType, contentId);
        setContent(data);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };

    if (contentType && contentId) {
      loadContent();
    }
  }, [contentType, contentId]);

  if (loading) return <div className="loading">Loading...</div>;
  if (error) return <div className="error">Error loading content</div>;
  if (!content) return <div className="empty">No content available</div>;

  return (
    <div className="content">
      {contentType === 'article' && (
        <div>
          <h1>{content.title}</h1>
          <p>{content.body}</p>
          {content.author && <p>By: {content.author}</p>}
        </div>
      )}
      
      {contentType === 'video' && (
        <div>
          <h1>{content.title}</h1>
          <video src={content.url} controls />
          {content.description && <p>{content.description}</p>}
        </div>
      )}
      
      {contentType === 'image' && (
        <div>
          <h1>{content.title}</h1>
          <img src={content.url} alt={content.alt} />
          {content.caption && <p>{content.caption}</p>}
        </div>
      )}
    </div>
  );
};
\`\`\`

## 💡 Best Practices

### **1. Early Returns:**
\`\`\`javascript
// ❌ Yanlış - nested conditions
const Component = ({ user, data }) => {
  return (
    <div>
      {user ? (
        <div>
          {data ? (
            <div>
              {data.length > 0 ? (
                <ul>
                  {data.map(item => <li key=${item.id}}>${item.name}}</li>)}
                </ul>
              ) : (
                <p>No data available</p>
              )}
            </div>
          ) : (
            <p>Loading data...</p>
          )}
        </div>
      ) : (
        <p>Please login</p>
      )}
    </div>
  );
};

// ✅ Doğru - early returns
const Component = ({ user, data }) => {
  if (!user) return <p>Please login</p>;
  if (!data) return <p>Loading data...</p>;
  if (data.length === 0) return <p>No data available</p>;

  return (
    <ul>
      {data.map(item => <li key=${item.id}}>${item.name}}</li>)}
    </ul>
  );
};
\`\`\`

### **2. Extract Conditional Logic:**
\`\`\`javascript
// ❌ Yanlış - inline complex logic
const Component = ({ user, permissions }) => {
  return (
    <div>
      {user && user.isActive && permissions.includes('read') && (
        <div>Content</div>
      )}
    </div>
  );
};

// ✅ Doğru - extracted logic
const Component = ({ user, permissions }) => {
  const canViewContent = user && user.isActive && permissions.includes('read');
  
  return (
    <div>
      {canViewContent && <div>Content</div>}
    </div>
  );
};
\`\`\`

### **3. Use Custom Hooks:**
\`\`\`javascript
// Custom hook for conditional logic
const useUserPermissions = (user) => {
  return useMemo(() => ({
    canEdit: user?.role === 'admin' || user?.role === 'editor',
    canDelete: user?.role === 'admin',
    canView: user?.isActive
  }), [user]);
};

const UserActions = ({ user }) => {
  const permissions = useUserPermissions(user);
  
  return (
    <div>
      {permissions.canView && <button>View</button>}
      {permissions.canEdit && <button>Edit</button>}
      {permissions.canDelete && <button>Delete</button>}
    </div>
  );
};
\`\`\`

## 🎯 Sonuç

React conditional content:

- ✅ **Dynamic UI** - Dinamik kullanıcı arayüzü
- ✅ **User experience** - Kullanıcı deneyimi
- ✅ **State management** - Durum yönetimi
- ✅ **Performance** - Performans optimizasyonu

Conditional rendering, React uygulamalarının temel yapı taşlarından biridir.`,
            codeExamples: [
              {
                id: 'conditional-content-examples',
                title: 'Conditional Content Örnekleri',
                code: `// Temel conditional rendering
const Greeting = ({ isLoggedIn }) => {
  return isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please sign up.</h1>;
};

// Logical AND operator
const Notification = ({ message, show }) => {
  return show && <div className="notification">{message}</div>;
};

// Switch statement
const StatusIndicator = ({ status }) => {
  switch (status) {
    case 'loading':
      return <div className="spinner">Loading...</div>;
    case 'success':
      return <div className="success">✓ Success!</div>;
    case 'error':
      return <div className="error">✗ Error occurred</div>;
    default:
      return <div className="unknown">? Unknown status</div>;
  }
};

// Conditional CSS classes
const Button = ({ variant, disabled }) => {
  const buttonClasses = [
    'btn',
    \`btn-\${variant}\`,
    disabled && 'btn-disabled'
  ].filter(Boolean).join(' ');

  return <button className={buttonClasses} disabled={disabled}>Click me</button>;
};

// Early returns
const Component = ({ user, data }) => {
  if (!user) return <p>Please login</p>;
  if (!data) return <p>Loading data...</p>;
  if (data.length === 0) return <p>No data available</p>;

  return (
    <ul>
      {data.map(item => <li key=${item.id}}>${item.name}}</li>)}
    </ul>
  );
};`,
                language: 'javascript',
                description: 'React conditional content örnekleri'
              }
            ],
            relatedProjects: ['user-dashboard', 'todo-app'],
            resources: [
              {
                id: 'react-conditional-rendering',
                title: 'React Conditional Rendering',
                url: 'https://react.dev/learn/conditional-rendering',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-conditional-state',
            title: 'React Conditional State',
            description: 'React\'te koşullu state yönetimi',
            duration: '8 dakika',
            difficulty: 'medium',
            content: `# React Conditional State 🎛️

React'te koşullu state yönetimi, uygulamanızın durumuna göre farklı state değerleri kullanmanızı sağlar. Bu, karmaşık uygulamalarda state yönetimini daha esnek hale getirir.

## 🎯 Conditional State Nedir?

### **Temel Konsept:**
Conditional state, belirli koşullara göre farklı state değerleri kullanma veya state'i koşullu olarak güncelleme işlemidir.

### **Basit Örnek:**
\`\`\`javascript
const ToggleButton = () => {
  const [isOn, setIsOn] = useState(false);
  
  const toggle = () => {
    setIsOn(prevState => !prevState);
  };

  return (
    <button onClick={toggle} className={isOn ? 'on' : 'off'}>
      {isOn ? 'ON' : 'OFF'}
    </button>
  );
};
\`\`\`

## 🔧 Conditional State Patterns

### **1. Conditional State Updates:**
\`\`\`javascript
const Counter = ({ max, min = 0 }) => {
  const [count, setCount] = useState(0);
  
  const increment = () => {
    setCount(prevCount => {
      if (prevCount < max) {
        return prevCount + 1;
      }
      return prevCount; // Don't exceed max
    });
  };
  
  const decrement = () => {
    setCount(prevCount => {
      if (prevCount > min) {
        return prevCount - 1;
      }
      return prevCount; // Don't go below min
    });
  };
  
  const reset = () => {
    setCount(0);
  };
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment} disabled={count >= max}>+</button>
      <button onClick={decrement} disabled={count <= min}>-</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};
\`\`\`

### **2. Conditional State Initialization:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(() => {
    // Conditional initial state
    if (userId) {
      return { id: userId, loading: true, error: null };
    }
    return { id: null, loading: false, error: null };
  });
  
  useEffect(() => {
    if (userId) {
      fetchUser(userId)
        .then(userData => setUser({ ...userData, loading: false }))
        .catch(error => setUser({ id: userId, loading: false, error }));
    }
  }, [userId]);
  
  if (user.loading) return <div>Loading...</div>;
  if (user.error) return <div>Error: {user.error.message}</div>;
  if (!user.id) return <div>No user selected</div>;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};
\`\`\`

### **3. Conditional State Based on Props:**
\`\`\`javascript
const FormField = ({ type, required, value, onChange }) => {
  const [error, setError] = useState('');
  const [touched, setTouched] = useState(false);
  
  const validate = (inputValue) => {
    if (required && !inputValue) {
      return 'This field is required';
    }
    
    if (type === 'email' && inputValue && !/\\S+@\\S+\\.\\S+/.test(inputValue)) {
      return 'Invalid email format';
    }
    
    if (type === 'password' && inputValue && inputValue.length < 6) {
      return 'Password must be at least 6 characters';
    }
    
    return '';
  };
  
  const handleChange = (e) => {
    const newValue = e.target.value;
    onChange(newValue);
    
    if (touched) {
      setError(validate(newValue));
    }
  };
  
  const handleBlur = () => {
    setTouched(true);
    setError(validate(value));
  };
  
  return (
    <div>
      <input
        type={type}
        value={value}
        onChange={handleChange}
        onBlur={handleBlur}
        className={error ? 'error' : ''}
      />
      {error && <span className="error-message">{error}</span>}
    </div>
  );
};
\`\`\`

### **4. Conditional State with Multiple Conditions:**
\`\`\`javascript
const Game = () => {
  const [gameState, setGameState] = useState({
    score: 0,
    level: 1,
    lives: 3,
    gameOver: false,
    paused: false
  });
  
  const updateScore = (points) => {
    setGameState(prevState => {
      const newScore = prevState.score + points;
      const newLevel = Math.floor(newScore / 100) + 1;
      
      return {
        ...prevState,
        score: newScore,
        level: newLevel,
        gameOver: prevState.lives <= 0
      };
    });
  };
  
  const loseLife = () => {
    setGameState(prevState => ({
      ...prevState,
      lives: prevState.lives - 1,
      gameOver: prevState.lives <= 1
    }));
  };
  
  const togglePause = () => {
    setGameState(prevState => ({
      ...prevState,
      paused: !prevState.paused
    }));
  };
  
  const resetGame = () => {
    setGameState({
      score: 0,
      level: 1,
      lives: 3,
      gameOver: false,
      paused: false
    });
  };
  
  if (gameState.gameOver) {
    return (
      <div>
        <h1>Game Over!</h1>
        <p>Final Score: {gameState.score}</p>
        <button onClick={resetGame}>Play Again</button>
      </div>
    );
  }
  
  return (
    <div>
      <h1>Level {gameState.level}</h1>
      <p>Score: {gameState.score}</p>
      <p>Lives: {gameState.lives}</p>
      <p>Status: {gameState.paused ? 'Paused' : 'Playing'}</p>
      
      <button onClick={() => updateScore(10)}>Score +10</button>
      <button onClick={loseLife}>Lose Life</button>
      <button onClick={togglePause}>
        {gameState.paused ? 'Resume' : 'Pause'}
      </button>
    </div>
  );
};
\`\`\`

## 🎨 Advanced Conditional State Patterns

### **5. State Machine Pattern:**
\`\`\`javascript
const useStateMachine = (initialState, transitions) => {
  const [state, setState] = useState(initialState);
  
  const transition = (action) => {
    const currentTransitions = transitions[state];
    if (currentTransitions && currentTransitions[action]) {
      setState(currentTransitions[action]);
    }
  };
  
  return [state, transition];
};

const DownloadManager = () => {
  const [state, transition] = useStateMachine('idle', {
    idle: { start: 'downloading' },
    downloading: { complete: 'completed', error: 'failed' },
    completed: { reset: 'idle' },
    failed: { retry: 'downloading', reset: 'idle' }
  });
  
  const [progress, setProgress] = useState(0);
  
  const startDownload = () => {
    transition('start');
    setProgress(0);
    
    // Simulate download
    const interval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          transition('complete');
          return 100;
        }
        return prev + 10;
      });
    }, 200);
  };
  
  const handleError = () => {
    transition('error');
  };
  
  const retry = () => {
    transition('retry');
  };
  
  const reset = () => {
    transition('reset');
    setProgress(0);
  };
  
  return (
    <div>
      <h2>Download Manager</h2>
      <p>State: {state}</p>
      <p>Progress: {progress}%</p>
      
      {state === 'idle' && <button onClick={startDownload}>Start Download</button>}
      {state === 'downloading' && <button onClick={handleError}>Simulate Error</button>}
      {state === 'failed' && <button onClick={retry}>Retry</button>}
      {state === 'completed' && <button onClick={reset}>Reset</button>}
    </div>
  );
};
\`\`\`

### **6. Conditional State with Custom Hooks:**
\`\`\`javascript
const useConditionalState = (condition, trueValue, falseValue) => {
  const [state, setState] = useState(condition ? trueValue : falseValue);
  
  useEffect(() => {
    setState(condition ? trueValue : falseValue);
  }, [condition, trueValue, falseValue]);
  
  return [state, setState];
};

const ThemeToggle = () => {
  const [isDark, setIsDark] = useState(false);
  const [theme, setTheme] = useConditionalState(isDark, 'dark', 'light');
  
  const toggleTheme = () => {
    setIsDark(prev => !prev);
  };
  
  return (
    <div className={\`theme-\${theme}\`}>
      <h1>Theme: {theme}</h1>
      <button onClick={toggleTheme}>
        Switch to {isDark ? 'Light' : 'Dark'} Theme
      </button>
    </div>
  );
};
\`\`\`

### **7. Conditional State with Reducer:**
\`\`\`javascript
const gameReducer = (state, action) => {
  switch (action.type) {
    case 'START_GAME':
      return { ...state, status: 'playing', score: 0, lives: 3 };
    case 'PAUSE_GAME':
      return { ...state, status: 'paused' };
    case 'RESUME_GAME':
      return { ...state, status: 'playing' };
    case 'UPDATE_SCORE':
      const newScore = state.score + action.points;
      return {
        ...state,
        score: newScore,
        level: Math.floor(newScore / 100) + 1
      };
    case 'LOSE_LIFE':
      const newLives = state.lives - 1;
      return {
        ...state,
        lives: newLives,
        status: newLives <= 0 ? 'gameOver' : state.status
      };
    case 'RESET_GAME':
      return { status: 'idle', score: 0, level: 1, lives: 3 };
    default:
      return state;
  }
};

const GameWithReducer = () => {
  const [gameState, dispatch] = useReducer(gameReducer, {
    status: 'idle',
    score: 0,
    level: 1,
    lives: 3
  });
  
  const canPlay = gameState.status === 'playing';
  const canPause = gameState.status === 'playing';
  const canResume = gameState.status === 'paused';
  
  return (
    <div>
      <h1>Game Status: {gameState.status}</h1>
      <p>Score: {gameState.score}</p>
      <p>Level: {gameState.level}</p>
      <p>Lives: {gameState.lives}</p>
      
      {gameState.status === 'idle' && (
        <button onClick={() => dispatch({ type: 'START_GAME' })}>
          Start Game
        </button>
      )}
      
      {canPlay && (
        <>
          <button onClick={() => dispatch({ type: 'UPDATE_SCORE', points: 10 })}>
            Score +10
          </button>
          <button onClick={() => dispatch({ type: 'LOSE_LIFE' })}>
            Lose Life
          </button>
          <button onClick={() => dispatch({ type: 'PAUSE_GAME' })}>
            Pause
          </button>
        </>
      )}
      
      {canResume && (
        <button onClick={() => dispatch({ type: 'RESUME_GAME' })}>
          Resume
        </button>
      )}
      
      {gameState.status === 'gameOver' && (
        <button onClick={() => dispatch({ type: 'RESET_GAME' })}>
          Play Again
        </button>
      )}
    </div>
  );
};
\`\`\`

## 💡 Best Practices

### **1. Use Functional Updates:**
\`\`\`javascript
// ❌ Yanlış - direct state access
const increment = () => {
  setCount(count + 1); // May not work correctly
};

// ✅ Doğru - functional update
const increment = () => {
  setCount(prevCount => prevCount + 1);
};
\`\`\`

### **2. Extract Complex Logic:**
\`\`\`javascript
// ❌ Yanlış - complex logic in component
const Component = ({ items }) => {
  const [filteredItems, setFilteredItems] = useState([]);
  
  useEffect(() => {
    const filtered = items.filter(item => {
      // Complex filtering logic here
      return item.active && ${item.category} === 'electronics' && ${item.price} > 100;
    });
    setFilteredItems(filtered);
  }, [items]);
  
  return <div>{/* render */}</div>;
};

// ✅ Doğru - extracted logic
const useFilteredItems = (items, filters) => {
  return useMemo(() => {
    return items.filter(item => {
      return item.active && 
             ${item.category} === filters.category && 
             ${item.price} > filters.minPrice;
    });
  }, [items, filters]);
};

const Component = ({ items, filters }) => {
  const filteredItems = useFilteredItems(items, filters);
  
  return <div>{/* render */}</div>;
};
\`\`\`

### **3. Use State Machines for Complex States:**
\`\`\`javascript
// ✅ Doğru - state machine for complex states
const useFormState = () => {
  const [state, setState] = useState({
    status: 'idle', // idle, submitting, success, error
    data: {},
    errors: {}
  });
  
  const submit = async (formData) => {
    setState(prev => ({ ...prev, status: 'submitting' }));
    
    try {
      const result = await submitForm(formData);
      setState({ status: 'success', data: result, errors: {} });
    } catch (error) {
      setState({ status: 'error', errors: error.errors });
    }
  };
  
  const reset = () => {
    setState({ status: 'idle', data: {}, errors: {} });
  };
  
  return { state, submit, reset };
};
\`\`\`

## 🎯 Sonuç

React conditional state:

- ✅ **Dynamic behavior** - Dinamik davranış
- ✅ **User experience** - Kullanıcı deneyimi
- ✅ **State management** - Durum yönetimi
- ✅ **Performance** - Performans optimizasyonu

Conditional state, React uygulamalarında esnek ve güçlü state yönetimi sağlar.`,
            codeExamples: [
              {
                id: 'conditional-state-examples',
                title: 'Conditional State Örnekleri',
                code: `// Temel conditional state
const ToggleButton = () => {
  const [isOn, setIsOn] = useState(false);
  
  const toggle = () => {
    setIsOn(prevState => !prevState);
  };

  return (
    <button onClick={toggle} className={isOn ? 'on' : 'off'}>
      {isOn ? 'ON' : 'OFF'}
    </button>
  );
};

// Conditional state updates
const Counter = ({ max, min = 0 }) => {
  const [count, setCount] = useState(0);
  
  const increment = () => {
    setCount(prevCount => {
      if (prevCount < max) {
        return prevCount + 1;
      }
      return prevCount;
    });
  };
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment} disabled={count >= max}>+</button>
    </div>
  );
};

// State machine pattern
const useStateMachine = (initialState, transitions) => {
  const [state, setState] = useState(initialState);
  
  const transition = (action) => {
    const currentTransitions = transitions[state];
    if (currentTransitions && currentTransitions[action]) {
      setState(currentTransitions[action]);
    }
  };
  
  return [state, transition];
};

// Conditional state with custom hooks
const useConditionalState = (condition, trueValue, falseValue) => {
  const [state, setState] = useState(condition ? trueValue : falseValue);
  
  useEffect(() => {
    setState(condition ? trueValue : falseValue);
  }, [condition, trueValue, falseValue]);
  
  return [state, setState];
};`,
                language: 'javascript',
                description: 'React conditional state örnekleri'
              }
            ],
            relatedProjects: ['game-app', 'form-builder'],
            resources: [
              {
                id: 'react-state-management',
                title: 'React State Management',
                url: 'https://react.dev/learn/state-a-components-memory',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'react-debugging',
        name: 'REACT DEBUGING',
        icon: '🐛',
        description: 'React hata ayıklama ve analiz teknikleri',
        topics: [
          {
            id: 'react-hata-mesajlarini-okuyup-anlama',
            title: 'React Hata Mesajlarını Okuyup Anlama',
            description: 'React hata mesajlarını analiz etme ve çözme',
            duration: '7 dakika',
            difficulty: 'easy',
            content: `# React Hata Mesajlarını Okuyup Anlama 🐛

React'te hata mesajlarını doğru şekilde okumak ve anlamak, geliştirme sürecinde çok önemlidir. Bu rehber, en yaygın React hatalarını ve çözümlerini kapsar.

## 🎯 React Hata Türleri

### **1. Syntax Errors (Sözdizimi Hataları):**
\`\`\`javascript
// ❌ Yanlış - eksik kapanış parantezi
const Component = () => {
  return (
    <div>
      <h1>Hello World</h1>
    // </div> eksik!
  );
};

// ✅ Doğru
const Component = () => {
  return (
    <div>
      <h1>Hello World</h1>
    </div>
  );
};
\`\`\`

### **2. Reference Errors (Referans Hataları):**
\`\`\`javascript
// ❌ Yanlış - tanımlanmamış değişken
const Component = () => {
  return <div>{undefinedVariable}</div>; // ReferenceError!
};

// ✅ Doğru
const Component = () => {
  const message = "Hello World";
  return <div>{message}</div>;
};
\`\`\`

### **3. Type Errors (Tip Hataları):**
\`\`\`javascript
// ❌ Yanlış - null/undefined üzerinde method çağırma
const Component = ({ user }) => {
  return <div>{user.name.toUpperCase()}</div>; // TypeError!
};

// ✅ Doğru
const Component = ({ user }) => {
  return <div>{user?.name?.toUpperCase() || 'No name'}</div>;
};
\`\`\`

## 🔧 Yaygın React Hataları

### **1. "Cannot read property of undefined":**
\`\`\`javascript
// ❌ Yanlış
const UserProfile = ({ user }) => {
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};

// ✅ Doğru - null check
const UserProfile = ({ user }) => {
  if (!user) {
    return <div>Loading...</div>;
  }
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};

// ✅ Alternatif - optional chaining
const UserProfile = ({ user }) => {
  return (
    <div>
      <h1>{user?.name || 'No name'}</h1>
      <p>{user?.email || 'No email'}</p>
    </div>
  );
};
\`\`\`

### **2. "Objects are not valid as a React child":**
\`\`\`javascript
// ❌ Yanlış - object render etmeye çalışma
const Component = () => {
  const user = { name: 'John', age: 30 };
  return <div>{user}</div>; // Error!
};

// ✅ Doğru - string render etme
const Component = () => {
  const user = { name: 'John', age: 30 };
  return <div>{user.name}</div>;
};

// ✅ Alternatif - JSON.stringify
const Component = () => {
  const user = { name: 'John', age: 30 };
  return <div>{JSON.stringify(user)}</div>;
};
\`\`\`

### **3. "Warning: Each child in a list should have a unique key prop":**
\`\`\`javascript
// ❌ Yanlış - key eksik
const TodoList = ({ todos }) => {
  return (
    <ul>
      {todos.map(todo => (
        <li>{todo.text}</li> // Key eksik!
      ))}
    </ul>
  );
};

// ✅ Doğru - key var
const TodoList = ({ todos }) => {
  return (
    <ul>
      {todos.map(todo => (
        <li key={todo.id}>{todo.text}</li>
      ))}
    </ul>
  );
};
\`\`\`

### **4. "Warning: Can't perform a React state update on an unmounted component":**
\`\`\`javascript
// ❌ Yanlış - unmounted component'te state update
const Component = () => {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    fetchData().then(result => {
      setData(result); // Component unmount olmuş olabilir!
    });
  }, []);
  
  return <div>{data}</div>;
};

// ✅ Doğru - cleanup ile
const Component = () => {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    fetchData().then(result => {
      if (isMounted) {
        setData(result);
      }
    });
    
    return () => {
      isMounted = false;
    };
  }, []);
  
  return <div>{data}</div>;
};
\`\`\`

## 🎨 Hata Ayıklama Teknikleri

### **1. Console.log Kullanımı:**
\`\`\`javascript
const Component = ({ data }) => {
  console.log('Component rendered with data:', data);
  
  const processedData = data.map(item => {
    console.log('Processing item:', item);
    return item * 2;
  });
  
  console.log('Processed data:', processedData);
  
  return <div>{processedData.join(', ')}</div>;
};
\`\`\`

### **2. React DevTools:**
\`\`\`javascript
// React DevTools ile component state'ini inceleme
const Component = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  
  // DevTools'da bu state'leri görebilirsiniz
  return (
    <div>
      <p>Count: {count}</p>
      <p>Name: {name}</p>
      <button onClick={() => setCount(count + 1)}>+</button>
      <input value={name} onChange={(e) => setName(e.target.value)} />
    </div>
  );
};
\`\`\`

### **3. Error Boundaries:**
\`\`\`javascript
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }
  
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  
  componentDidCatch(error, errorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }
  
  render() {
    if (this.state.hasError) {
      return (
        <div>
          <h2>Something went wrong.</h2>
          <details>
            {this.state.error && this.state.error.toString()}
          </details>
        </div>
      );
    }
    
    return this.props.children;
  }
}

// Kullanım
const App = () => {
  return (
    <ErrorBoundary>
      <ComponentThatMightError />
    </ErrorBoundary>
  );
};
\`\`\`

### **4. Try-Catch ile Hata Yakalama:**
\`\`\`javascript
const SafeComponent = ({ data }) => {
  try {
    const processedData = data.map(item => item * 2);
    return <div>{processedData.join(', ')}</div>;
  } catch (error) {
    console.error('Error in SafeComponent:', error);
    return <div>Error processing data</div>;
  }
};
\`\`\`

## 🔧 Hata Mesajı Analizi

### **1. Stack Trace Okuma:**
\`\`\`javascript
// Hata mesajı örneği:
// Error: Cannot read property 'name' of undefined
//     at Component (Component.js:15:25)
//     at render (ReactDOM.js:123:45)

// Bu mesaj şu anlama gelir:
// - Hata: undefined bir değerin 'name' property'sine erişmeye çalışılıyor
// - Hata Component.js dosyasının 15. satırında, 25. karakterinde
// - ReactDOM render sırasında oluşuyor
\`\`\`

### **2. Hata Mesajı Türleri:**
\`\`\`javascript
// 1. ReferenceError: Tanımlanmamış değişken
const x = undefinedVariable; // ReferenceError

// 2. TypeError: Yanlış tip kullanımı
const x = null.name; // TypeError

// 3. SyntaxError: Sözdizimi hatası
const x = { name: 'John' // SyntaxError - eksik }

// 4. RangeError: Geçersiz aralık
const arr = new Array(-1); // RangeError

// 5. Custom Error: Özel hata
throw new Error('Custom error message');
\`\`\`

## 💡 Hata Önleme Teknikleri

### **1. PropTypes Kullanımı:**
\`\`\`javascript
import PropTypes from 'prop-types';

const Component = ({ name, age, email }) => {
  return (
    <div>
      <h1>{name}</h1>
      <p>Age: {age}</p>
      <p>Email: {email}</p>
    </div>
  );
};

Component.propTypes = {
  name: PropTypes.string.isRequired,
  age: PropTypes.number.isRequired,
  email: PropTypes.string.isRequired
};

Component.defaultProps = {
  name: 'Unknown',
  age: 0,
  email: 'No email'
};
\`\`\`

### **2. TypeScript Kullanımı:**
\`\`\`typescript
interface User {
  name: string;
  age: number;
  email: string;
}

const Component: React.FC<{ user: User }> = ({ user }) => {
  return (
    <div>
      <h1>{user.name}</h1>
      <p>Age: {user.age}</p>
      <p>Email: {user.email}</p>
    </div>
  );
};
\`\`\`

### **3. Defensive Programming:**
\`\`\`javascript
const SafeComponent = ({ data }) => {
  // Defensive checks
  if (!data) {
    return <div>No data available</div>;
  }
  
  if (!Array.isArray(data)) {
    return <div>Data is not an array</div>;
  }
  
  if (data.length === 0) {
    return <div>Data is empty</div>;
  }
  
  // Safe processing
  const processedData = data
    .filter(item => item && typeof item === 'object')
    .map(item => item.value || 0);
  
  return <div>{processedData.join(', ')}</div>;
};
\`\`\`

## 🎯 Sonuç

React hata ayıklama:

- ✅ **Error identification** - Hata tanımlama
- ✅ **Error analysis** - Hata analizi
- ✅ **Error prevention** - Hata önleme
- ✅ **Debugging tools** - Hata ayıklama araçları

Hata mesajlarını doğru okumak, React geliştirmede kritik bir beceridir.`,
            codeExamples: [
              {
                id: 'react-error-examples',
                title: 'React Hata Örnekleri',
                code: `// Yaygın hatalar ve çözümleri

// 1. Reference Error
// ❌ Yanlış
const Component = () => {
  return <div>{undefinedVariable}</div>;
};

// ✅ Doğru
const Component = () => {
  const message = "Hello World";
  return <div>{message}</div>;
};

// 2. Type Error
// ❌ Yanlış
const Component = ({ user }) => {
  return <div>{user.name.toUpperCase()}</div>;
};

// ✅ Doğru
const Component = ({ user }) => {
  return <div>{user?.name?.toUpperCase() || 'No name'}</div>;
};

// 3. Key Warning
// ❌ Yanlış
const TodoList = ({ todos }) => {
  return (
    <ul>
      {todos.map(todo => (
        <li>{todo.text}</li>
      ))}
    </ul>
  );
};

// ✅ Doğru
const TodoList = ({ todos }) => {
  return (
    <ul>
      {todos.map(todo => (
        <li key={todo.id}>{todo.text}</li>
      ))}
    </ul>
  );
};

// 4. Error Boundary
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  
  render() {
    if (this.state.hasError) {
      return <h2>Something went wrong.</h2>;
    }
    
    return this.props.children;
  }
}`,
                language: 'javascript',
                description: 'React hata mesajları ve çözümleri'
              }
            ],
            relatedProjects: ['error-handling', 'debugging-tools'],
            resources: [
              {
                id: 'react-error-handling',
                title: 'React Error Handling',
                url: 'https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-projelerimizi-analiz-etmek',
            title: 'React Projelerimizi Analiz Etmek',
            description: 'React projelerini analiz etme ve optimize etme',
            duration: '7 dakika',
            difficulty: 'medium',
            content: `# React Projelerimizi Analiz Etmek 🔍

React projelerini analiz etmek, performans sorunlarını tespit etmek ve kod kalitesini artırmak için önemlidir. Bu rehber, proje analizi tekniklerini kapsar.

## 🎯 Proje Analizi Nedir?

### **Analiz Türleri:**
- **Performance Analysis** - Performans analizi
- **Code Quality Analysis** - Kod kalitesi analizi
- **Bundle Analysis** - Bundle analizi
- **Dependency Analysis** - Bağımlılık analizi

### **Analiz Araçları:**
\`\`\`javascript
// 1. React DevTools Profiler
// 2. Chrome DevTools
// 3. Bundle Analyzer
// 4. ESLint
// 5. TypeScript
\`\`\`

## 🔧 Performance Analysis

### **1. React DevTools Profiler:**
\`\`\`javascript
// Profiler ile component performansını ölçme
const ExpensiveComponent = ({ data }) => {
  const processedData = useMemo(() => {
    console.log('Processing data...');
    return data.map(item => ({
      ...item,
      processed: true
    }));
  }, [data]);
  
  return (
    <div>
      {processedData.map(item => (
        <div key={\${item.id}}>{\${item.name}}</div>
      ))}
    </div>
  );
};

// Profiler'da bu component'in render süresini görebilirsiniz
\`\`\`

### **2. Performance Monitoring:**
\`\`\`javascript
// Performance API ile ölçüm
const PerformanceMonitor = () => {
  useEffect(() => {
    const startTime = performance.now();
    
    // Component mount olduğunda
    const endTime = performance.now();
    console.log(\`Component mount time: \${endTime - startTime}ms\`);
  }, []);
  
  return <div>Performance Monitor</div>;
};

// Custom hook ile performance tracking
const usePerformance = (componentName) => {
  useEffect(() => {
    const startTime = performance.now();
    
    return () => {
      const endTime = performance.now();
      console.log(\`\${componentName} render time: \${endTime - startTime}ms\`);
    };
  });
};
\`\`\`

### **3. Memory Usage Analysis:**
\`\`\`javascript
// Memory leak tespiti
const MemoryLeakComponent = () => {
  const [data, setData] = useState([]);
  
  useEffect(() => {
    const interval = setInterval(() => {
      setData(prev => [...prev, new Date()]);
    }, 1000);
    
    // Cleanup eksik - memory leak!
    // return () => clearInterval(interval);
  }, []);
  
  return <div>Memory Leak Component</div>;
};

// ✅ Doğru - cleanup ile
const SafeComponent = () => {
  const [data, setData] = useState([]);
  
  useEffect(() => {
    const interval = setInterval(() => {
      setData(prev => [...prev, new Date()]);
    }, 1000);
    
    return () => clearInterval(interval); // Cleanup!
  }, []);
  
  return <div>Safe Component</div>;
};
\`\`\`

## 🎨 Code Quality Analysis

### **1. ESLint Configuration:**
\`\`\`javascript
// .eslintrc.js
module.exports = {
  extends: [
    'react-app',
    'react-app/jest',
    'eslint:recommended',
    '@typescript-eslint/recommended'
  ],
  rules: {
    'react-hooks/exhaustive-deps': 'warn',
    'react-hooks/rules-of-hooks': 'error',
    'no-unused-vars': 'warn',
    'no-console': 'warn',
    'prefer-const': 'error'
  }
};

// ESLint ile kod kalitesi kontrolü
// npm run lint
\`\`\`

### **2. TypeScript Analysis:**
\`\`\`typescript
// TypeScript ile tip güvenliği
interface User {
  id: number;
  name: string;
  email: string;
  age?: number;
}

const UserComponent: React.FC<{ user: User }> = ({ user }) => {
  // TypeScript burada tip kontrolü yapar
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
      {user.age && <p>Age: {user.age}</p>}
    </div>
  );
};

// TypeScript strict mode
// tsconfig.json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}
\`\`\`

### **3. Code Complexity Analysis:**
\`\`\`javascript
// ❌ Karmaşık component
const ComplexComponent = ({ data, filters, options }) => {
  const [state1, setState1] = useState();
  const [state2, setState2] = useState();
  const [state3, setState3] = useState();
  
  // 100+ satır kod...
  
  return <div>Complex Component</div>;
};

// ✅ Basit component'lere bölme
const SimpleComponent = ({ data }) => {
  return <div>{data}</div>;
};

const FilterComponent = ({ filters }) => {
  return <div>{filters}</div>;
};

const OptionsComponent = ({ options }) => {
  return <div>{options}</div>;
};

const MainComponent = ({ data, filters, options }) => {
  return (
    <div>
      <SimpleComponent data={data} />
      <FilterComponent filters={filters} />
      <OptionsComponent options={options} />
    </div>
  );
};
\`\`\`

## 🔧 Bundle Analysis

### **1. Webpack Bundle Analyzer:**
\`\`\`javascript
// package.json
{
  "scripts": {
    "analyze": "npm run build && npx webpack-bundle-analyzer build/static/js/*.js"
  }
}

// Bundle analizi
// npm run analyze
\`\`\`

### **2. Bundle Size Optimization:**
\`\`\`javascript
// ❌ Büyük import
import * as _ from 'lodash';

// ✅ Specific import
import { debounce } from 'lodash';

// ❌ Büyük kütüphane
import moment from 'moment';

// ✅ Küçük alternatif
import { format } from 'date-fns';

// Code splitting
const LazyComponent = React.lazy(() => import('./LazyComponent'));

const App = () => {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <LazyComponent />
    </Suspense>
  );
};
\`\`\`

### **3. Tree Shaking:**
\`\`\`javascript
// ✅ Tree shaking friendly
export const utils = {
  formatDate: (date) => date.toISOString(),
  formatCurrency: (amount) => \`$\${amount}\`
};

// ❌ Tree shaking unfriendly
export default {
  formatDate: (date) => date.toISOString(),
  formatCurrency: (amount) => \`$\${amount}\`
};
\`\`\`

## 🎨 Dependency Analysis

### **1. Dependency Audit:**
\`\`\`bash
# Güvenlik açıklarını kontrol et
npm audit

# Güncel olmayan paketleri kontrol et
npm outdated

# Kullanılmayan paketleri bul
npx depcheck
\`\`\`

### **2. Dependency Optimization:**
\`\`\`javascript
// package.json - peer dependencies
{
  "peerDependencies": {
    "react": ">=16.8.0",
    "react-dom": ">=16.8.0"
  }
}

// package.json - devDependencies vs dependencies
{
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.0",
    "eslint": "^8.0.0",
    "typescript": "^4.0.0"
  }
}
\`\`\`

### **3. Version Management:**
\`\`\`javascript
// .nvmrc - Node version
18.17.0

// package.json - engines
{
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
}
\`\`\`

## 💡 Analysis Best Practices

### **1. Regular Analysis:**
\`\`\`javascript
// CI/CD pipeline'da analiz
// .github/workflows/analysis.yml
name: Code Analysis
on: [push, pull_request]
jobs:
  analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint
      - name: Run TypeScript check
        run: npm run type-check
      - name: Run tests
        run: npm test
\`\`\`

### **2. Performance Budget:**
\`\`\`javascript
// webpack.config.js - performance budget
module.exports = {
  performance: {
    maxAssetSize: 500000,
    maxEntrypointSize: 500000,
    hints: 'warning'
  }
};
\`\`\`

### **3. Monitoring:**
\`\`\`javascript
// Real-time monitoring
const usePerformanceMonitoring = () => {
  useEffect(() => {
    const observer = new PerformanceObserver((list) => {
      list.getEntries().forEach((entry) => {
        if (entry.entryType === 'measure') {
          console.log(\`\${entry.name}: \${entry.duration}ms\`);
        }
      });
    });
    
    observer.observe({ entryTypes: ['measure'] });
    
    return () => observer.disconnect();
  }, []);
};
\`\`\`

## 🎯 Sonuç

React proje analizi:

- ✅ **Performance monitoring** - Performans izleme
- ✅ **Code quality** - Kod kalitesi
- ✅ **Bundle optimization** - Bundle optimizasyonu
- ✅ **Dependency management** - Bağımlılık yönetimi

Düzenli proje analizi, React uygulamalarının kalitesini ve performansını artırır.`,
            codeExamples: [
              {
                id: 'react-analysis-examples',
                title: 'React Proje Analizi Örnekleri',
                code: `// Performance monitoring
const usePerformance = (componentName) => {
  useEffect(() => {
    const startTime = performance.now();
    
    return () => {
      const endTime = performance.now();
      console.log(\`\${componentName} render time: \${endTime - startTime}ms\`);
    };
  });
};

// Memory leak prevention
const SafeComponent = () => {
  const [data, setData] = useState([]);
  
  useEffect(() => {
    const interval = setInterval(() => {
      setData(prev => [...prev, new Date()]);
    }, 1000);
    
    return () => clearInterval(interval); // Cleanup!
  }, []);
  
  return <div>Safe Component</div>;
};

// Code splitting
const LazyComponent = React.lazy(() => import('./LazyComponent'));

const App = () => {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <LazyComponent />
    </Suspense>
  );
};

// Bundle optimization
// ❌ Büyük import
import * as _ from 'lodash';

// ✅ Specific import
import { debounce } from 'lodash';

// TypeScript analysis
interface User {
  id: number;
  name: string;
  email: string;
}

const UserComponent: React.FC<{ user: User }> = ({ user }) => {
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};`,
                language: 'javascript',
                description: 'React proje analizi teknikleri'
              }
            ],
            relatedProjects: ['performance-monitor', 'bundle-analyzer'],
            resources: [
              {
                id: 'react-profiler',
                title: 'React Profiler',
                url: 'https://react.dev/reference/react/Profiler',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-breakpointlerle-calismak',
            title: 'React Breakpointlerle Çalışmak',
            description: 'React\'te breakpoint kullanımı ve debugging',
            duration: '8 dakika',
            difficulty: 'medium',
            content: `# React Breakpointlerle Çalışmak 🔍

React'te breakpoint kullanımı, kodunuzu adım adım çalıştırmanızı ve değişkenlerin değerlerini incelemenizi sağlar. Bu, karmaşık hataları bulmak için çok etkili bir yöntemdir.

## 🎯 Breakpoint Nedir?

### **Breakpoint Tanımı:**
Breakpoint, kodunuzun belirli bir noktasında durmasını sağlayan işaretleyicidir. Bu sayede kodunuzu adım adım çalıştırabilir ve değişkenlerin değerlerini inceleyebilirsiniz.

### **Breakpoint Türleri:**
- **Line Breakpoint** - Satır breakpoint'i
- **Conditional Breakpoint** - Koşullu breakpoint
- **Logpoint** - Log breakpoint'i
- **Exception Breakpoint** - Hata breakpoint'i

## 🔧 Chrome DevTools ile Breakpoint

### **1. Temel Breakpoint Kullanımı:**
\`\`\`javascript
const UserComponent = ({ user }) => {
  // Bu satıra breakpoint koyun
  const processedUser = {
    name: user.name.toUpperCase(),
    email: user.email.toLowerCase(),
    age: user.age || 0
  };
  
  // Bu satıra da breakpoint koyun
  return (
    <div>
      <h1>{processedUser.name}</h1>
      <p>{processedUser.email}</p>
      <p>Age: {processedUser.age}</p>
    </div>
  );
};
\`\`\`

### **2. Conditional Breakpoint:**
\`\`\`javascript
const TodoList = ({ todos }) => {
  return (
    <div>
      {todos.map(todo => {
        // Koşullu breakpoint: todo.completed === true
        if (todo.completed) {
          console.log('Completed todo:', todo);
        }
        
        return (
          <div key={todo.id}>
            <h3>{todo.title}</h3>
            <p>Status: {todo.completed ? 'Done' : 'Pending'}</p>
          </div>
        );
      })}
    </div>
  );
};
\`\`\`

### **3. Function Breakpoint:**
\`\`\`javascript
const handleSubmit = (formData) => {
  // Function breakpoint: handleSubmit
  console.log('Form submitted:', formData);
  
  // Validation
  if (!formData.email) {
    throw new Error('Email is required');
  }
  
  // Submit logic
  submitForm(formData);
};

const Form = () => {
  const [formData, setFormData] = useState({});
  
  return (
    <form onSubmit={(e) => {
      e.preventDefault();
      handleSubmit(formData);
    }}>
      <input
        type="email"
        value={formData.email || ''}
        onChange={(e) => setFormData({...formData, email: e.target.value})}
      />
      <button type="submit">Submit</button>
    </form>
  );
};
\`\`\`

## 🎨 React DevTools ile Breakpoint

### **1. Component State Breakpoint:**
\`\`\`javascript
const Counter = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  
  // React DevTools'da bu state'leri inceleyebilirsiniz
  const increment = () => {
    setCount(prev => prev + 1);
  };
  
  const decrement = () => {
    setCount(prev => prev - 1);
  };
  
  return (
    <div>
      <h1>Count: {count}</h1>
      <p>Name: {name}</p>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <input
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Enter name"
      />
    </div>
  );
};
\`\`\`

### **2. Props Breakpoint:**
\`\`\`javascript
const UserCard = ({ user, onEdit, onDelete }) => {
  // Props'ları React DevTools'da inceleyebilirsiniz
  return (
    <div style={{border: '1px solid #ccc', padding: '10px', margin: '10px'}}>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
      <p>Age: {user.age}</p>
      <button onClick={() => onEdit(user.id)}>Edit</button>
      <button onClick={() => onDelete(user.id)}>Delete</button>
    </div>
  );
};

const UserList = () => {
  const [users, setUsers] = useState([
    { id: 1, name: 'John', email: 'john@example.com', age: 30 },
    { id: 2, name: 'Jane', email: 'jane@example.com', age: 25 }
  ]);
  
  const handleEdit = (id) => {
    console.log('Edit user:', id);
  };
  
  const handleDelete = (id) => {
    setUsers(prev => prev.filter(user => user.id !== id));
  };
  
  return (
    <div>
      {users.map(user => (
        <UserCard
          key={user.id}
          user={user}
          onEdit={handleEdit}
          onDelete={handleDelete}
        />
      ))}
    </div>
  );
};
\`\`\`

## 🔧 Advanced Breakpoint Techniques

### **4. Event Listener Breakpoint:**
\`\`\`javascript
const InteractiveComponent = () => {
  const [data, setData] = useState([]);
  
  useEffect(() => {
    const handleKeyPress = (event) => {
      // Event listener breakpoint: keydown
      console.log('Key pressed:', event.key);
      
      if (event.key === 'Enter') {
        setData(prev => [...prev, new Date()]);
      }
    };
    
    document.addEventListener('keydown', handleKeyPress);
    
    return () => {
      document.removeEventListener('keydown', handleKeyPress);
    };
  }, []);
  
  return (
    <div>
      <h2>Press Enter to add timestamp</h2>
      <ul>
        {data.map((timestamp, index) => (
          <li key={index}>{timestamp.toString()}</li>
        ))}
      </ul>
    </div>
  );
};
\`\`\`

### **5. Network Breakpoint:**
\`\`\`javascript
const DataFetcher = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const fetchData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Network breakpoint: fetch request
      const response = await fetch('/api/data');
      
      if (!response.ok) {
        throw new Error(\`HTTP error! status: \${response.status}\`);
      }
      
      const result = await response.json();
      setData(result);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div>
      <button onClick={fetchData} disabled={loading}>
        {loading ? 'Loading...' : 'Fetch Data'}
      </button>
      
      {error && <div style={{color: 'red'}}>Error: {error}</div>}
      
      {data && (
        <div>
          <h3>Data:</h3>
          <pre>{JSON.stringify(data, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};
\`\`\`

### **6. DOM Breakpoint:**
\`\`\`javascript
const DynamicList = () => {
  const [items, setItems] = useState([]);
  
  const addItem = () => {
    const newItem = {
      id: Date.now(),
      text: \`Item \${items.length + 1}\`,
      timestamp: new Date()
    };
    
    setItems(prev => [...prev, newItem]);
  };
  
  const removeItem = (id) => {
    setItems(prev => prev.filter(item => ${item.id} !== id));
  };
  
  return (
    <div>
      <button onClick={addItem}>Add Item</button>
      
      <ul>
        {items.map(item => (
          <li key=${item.id}} style={{border: '1px solid #ccc', padding: '10px', margin: '5px'}}>
            <span>{item.text}</span>
            <button onClick={() => removeItem(${item.id})}>Remove</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

// DOM breakpoint: li element'lerinin değişmesi
\`\`\`

## 🎨 Debugging Strategies

### **7. Step-by-Step Debugging:**
\`\`\`javascript
const ComplexComponent = ({ data, filters }) => {
  // Step 1: Breakpoint here
  const filteredData = data.filter(item => {
    // Step 2: Breakpoint here
    return ${item.category} === filters.category;
  });
  
  // Step 3: Breakpoint here
  const processedData = filteredData.map(item => {
    // Step 4: Breakpoint here
    return {
      ...item,
      processed: true,
      timestamp: new Date()
    };
  });
  
  // Step 5: Breakpoint here
  const sortedData = processedData.sort((a, b) => {
    // Step 6: Breakpoint here
    return a.name.localeCompare(b.name);
  });
  
  return (
    <div>
      <h2>Processed Data</h2>
      {sortedData.map(item => (
        <div key=${${item.id}}}>
          <h3>${${item.name}}}</h3>
          <p>Category: ${${item.category}}}</p>
          <p>Processed: {item.processed ? 'Yes' : 'No'}</p>
        </div>
      ))}
    </div>
  );
};
\`\`\`

### **8. Error Boundary Breakpoint:**
\`\`\`javascript
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }
  
  static getDerivedStateFromError(error) {
    // Breakpoint here to catch errors
    console.error('Error caught by boundary:', error);
    return { hasError: true, error };
  }
  
  componentDidCatch(error, errorInfo) {
    // Breakpoint here for error details
    console.error('Error details:', error, errorInfo);
  }
  
  render() {
    if (this.state.hasError) {
      return (
        <div>
          <h2>Something went wrong.</h2>
          <details>
            {this.state.error && this.state.error.toString()}
          </details>
        </div>
      );
    }
    
    return this.props.children;
  }
}

const App = () => {
  return (
    <ErrorBoundary>
      <ComponentThatMightError />
    </ErrorBoundary>
  );
};
\`\`\`

## 💡 Breakpoint Best Practices

### **1. Strategic Breakpoint Placement:**
\`\`\`javascript
// ✅ İyi breakpoint yerleşimi
const Component = ({ data }) => {
  // Breakpoint 1: Data girişi
  console.log('Input data:', data);
  
  // Breakpoint 2: İşlem öncesi
  const processedData = data.map(item => {
    // Breakpoint 3: Her item için
    return processItem(item);
  });
  
  // Breakpoint 4: Sonuç
  console.log('Processed data:', processedData);
  
  return <div>{/* render */}</div>;
};

// ❌ Kötü breakpoint yerleşimi
const Component = ({ data }) => {
  const processedData = data.map(item => {
    // Çok fazla breakpoint - gereksiz
    return processItem(item);
  });
  
  return <div>{/* render */}</div>;
};
\`\`\`

### **2. Conditional Breakpoints:**
\`\`\`javascript
// ✅ Koşullu breakpoint
const Component = ({ users }) => {
  return (
    <div>
      {users.map(user => {
        // Sadece admin kullanıcılar için breakpoint
        if (user.role === 'admin') {
          console.log('Admin user:', user);
        }
        
        return <UserCard key={user.id} user={user} />;
      })}
    </div>
  );
};
\`\`\`

### **3. Performance-Aware Breakpoints:**
\`\`\`javascript
// ✅ Performans dostu breakpoint
const Component = ({ data }) => {
  const processedData = useMemo(() => {
    // Breakpoint sadece data değiştiğinde
    console.log('Processing data...');
    return data.map(item => processItem(item));
  }, [data]);
  
  return <div>{/* render */}</div>;
};
\`\`\`

## 🎯 Sonuç

React breakpoint kullanımı:

- ✅ **Step-by-step debugging** - Adım adım hata ayıklama
- ✅ **Variable inspection** - Değişken inceleme
- ✅ **Error tracking** - Hata takibi
- ✅ **Performance analysis** - Performans analizi

Breakpoint'ler, React uygulamalarında karmaşık hataları bulmak için vazgeçilmez araçlardır.`,
            codeExamples: [
              {
                id: 'react-breakpoint-examples',
                title: 'React Breakpoint Örnekleri',
                code: `// Temel breakpoint kullanımı
const UserComponent = ({ user }) => {
  // Bu satıra breakpoint koyun
  const processedUser = {
    name: user.name.toUpperCase(),
    email: user.email.toLowerCase(),
    age: user.age || 0
  };
  
  return (
    <div>
      <h1>{processedUser.name}</h1>
      <p>{processedUser.email}</p>
      <p>Age: {processedUser.age}</p>
    </div>
  );
};

// Conditional breakpoint
const TodoList = ({ todos }) => {
  return (
    <div>
      {todos.map(todo => {
        // Koşullu breakpoint: todo.completed === true
        if (todo.completed) {
          console.log('Completed todo:', todo);
        }
        
        return (
          <div key={todo.id}>
            <h3>{todo.title}</h3>
            <p>Status: {todo.completed ? 'Done' : 'Pending'}</p>
          </div>
        );
      })}
    </div>
  );
};

// Function breakpoint
const handleSubmit = (formData) => {
  // Function breakpoint: handleSubmit
  console.log('Form submitted:', formData);
  
  if (!formData.email) {
    throw new Error('Email is required');
  }
  
  submitForm(formData);
};

// Event listener breakpoint
const InteractiveComponent = () => {
  const [data, setData] = useState([]);
  
  useEffect(() => {
    const handleKeyPress = (event) => {
      // Event listener breakpoint: keydown
      console.log('Key pressed:', event.key);
      
      if (event.key === 'Enter') {
        setData(prev => [...prev, new Date()]);
      }
    };
    
    document.addEventListener('keydown', handleKeyPress);
    
    return () => {
      document.removeEventListener('keydown', handleKeyPress);
    };
  }, []);
  
  return (
    <div>
      <h2>Press Enter to add timestamp</h2>
      <ul>
        {data.map((timestamp, index) => (
          <li key={index}>{timestamp.toString()}</li>
        ))}
      </ul>
    </div>
  );
};`,
                language: 'javascript',
                description: 'React breakpoint kullanım örnekleri'
              }
            ],
            relatedProjects: ['debugging-tools', 'error-handling'],
            resources: [
              {
                id: 'chrome-devtools',
                title: 'Chrome DevTools',
                url: 'https://developer.chrome.com/docs/devtools/',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'react-devtools-kullanimi',
            title: 'React DevTools Kullanımı',
            description: 'React DevTools ile component analizi',
            duration: '10 dakika',
            difficulty: 'medium',
            content: `# React DevTools Kullanımı 🛠️

React DevTools, React uygulamalarını geliştirmek ve hata ayıklamak için güçlü bir araçtır. Bu rehber, React DevTools'un tüm özelliklerini kapsar.

## 🎯 React DevTools Nedir?

### **DevTools Özellikleri:**
- **Component Tree** - Component ağacı
- **Props & State** - Props ve state inceleme
- **Profiler** - Performans analizi
- **Hooks** - Hook'ları inceleme
- **Context** - Context değerlerini görme

### **Kurulum:**
\`\`\`bash
# Chrome Extension
https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi

# Firefox Add-on
https://addons.mozilla.org/en-US/firefox/addon/react-devtools/
\`\`\`

## 🔧 Component Tree

### **1. Component Hierarchy:**
\`\`\`javascript
const App = () => {
  return (
    <div>
      <Header />
      <Main>
        <Sidebar />
        <Content>
          <UserList />
          <UserForm />
        </Content>
      </Main>
      <Footer />
    </div>
  );
};

const Header = () => {
  return <header>My App</header>;
};

const Main = ({ children }) => {
  return <main>{children}</main>;
};

const Sidebar = () => {
  return <aside>Sidebar</aside>;
};

const Content = ({ children }) => {
  return <section>{children}</section>;
};

const UserList = () => {
  const [users, setUsers] = useState([]);
  
  return (
    <div>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  );
};

const UserCard = ({ user }) => {
  return (
    <div>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
    </div>
  );
};

const UserForm = () => {
  const [formData, setFormData] = useState({});
  
  return (
    <form>
      <input
        value={formData.name || ''}
        onChange={(e) => setFormData({...formData, name: e.target.value})}
      />
    </form>
  );
};

const Footer = () => {
  return <footer>Footer</footer>;
};
\`\`\`

### **2. Component Selection:**
\`\`\`javascript
// DevTools'da component seçimi
const SelectableComponent = ({ id, name, onClick }) => {
  return (
    <div
      onClick={() => onClick(id)}
      style={{
        border: '1px solid #ccc',
        padding: '10px',
        margin: '5px',
        cursor: 'pointer'
      }}
    >
      <h3>{name}</h3>
      <p>ID: {id}</p>
    </div>
  );
};

const SelectableList = () => {
  const [selectedId, setSelectedId] = useState(null);
  
  const items = [
    { id: 1, name: 'Item 1' },
    { id: 2, name: 'Item 2' },
    { id: 3, name: 'Item 3' }
  ];
  
  return (
    <div>
      <h2>Selected: {selectedId}</h2>
      {items.map(item => (
        <SelectableComponent
          key=${item.id}}
          id=${item.id}}
          name=${item.name}}
          onClick={setSelectedId}
        />
      ))}
    </div>
  );
};
\`\`\`

## 🎨 Props & State Inspection

### **3. Props Analysis:**
\`\`\`javascript
const UserProfile = ({ user, settings, onUpdate }) => {
  // DevTools'da bu props'ları inceleyebilirsiniz
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
      <p>Role: {user.role}</p>
      
      <div>
        <h3>Settings</h3>
        <p>Theme: {settings.theme}</p>
        <p>Language: {settings.language}</p>
        <p>Notifications: {settings.notifications ? 'On' : 'Off'}</p>
      </div>
      
      <button onClick={() => onUpdate(user.id)}>
        Update Profile
      </button>
    </div>
  );
};

const App = () => {
  const [user, setUser] = useState({
    id: 1,
    name: 'John Doe',
    email: 'john@example.com',
    role: 'admin'
  });
  
  const [settings, setSettings] = useState({
    theme: 'dark',
    language: 'en',
    notifications: true
  });
  
  const handleUpdate = (userId) => {
    console.log('Updating user:', userId);
  };
  
  return (
    <UserProfile
      user={user}
      settings={settings}
      onUpdate={handleUpdate}
    />
  );
};
\`\`\`

### **4. State Analysis:**
\`\`\`javascript
const StatefulComponent = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const [items, setItems] = useState([]);
  const [user, setUser] = useState({
    id: 1,
    name: 'John',
    email: 'john@example.com'
  });
  
  // DevTools'da tüm state'leri görebilirsiniz
  const increment = () => {
    setCount(prev => prev + 1);
  };
  
  const addItem = () => {
    setItems(prev => [...prev, \`Item \${prev.length + 1}\`]);
  };
  
  const updateUser = () => {
    setUser(prev => ({
      ...prev,
      name: prev.name + '!'
    }));
  };
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>+</button>
      
      <div>
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter name"
        />
        <p>Name: {name}</p>
      </div>
      
      <div>
        <button onClick={addItem}>Add Item</button>
        <ul>
          {items.map((item, index) => (
            <li key={index}>{item}</li>
          ))}
        </ul>
      </div>
      
      <div>
        <h3>User: {user.name}</h3>
        <button onClick={updateUser}>Update User</button>
      </div>
    </div>
  );
};
\`\`\`

## 🔧 Hooks Inspection

### **5. useState Hook:**
\`\`\`javascript
const useStateExample = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const [isVisible, setIsVisible] = useState(true);
  
  // DevTools'da Hook'ları inceleyebilirsiniz
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => setCount(count + 1)}>+</button>
      <button onClick={() => setCount(count - 1)}>-</button>
      
      <div>
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter name"
        />
        <p>Name: {name}</p>
      </div>
      
      <div>
        <button onClick={() => setIsVisible(!isVisible)}>
          Toggle Visibility
        </button>
        {isVisible && <p>This is visible!</p>}
      </div>
    </div>
  );
};
\`\`\`

### **6. useEffect Hook:**
\`\`\`javascript
const useEffectExample = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [count, setCount] = useState(0);
  
  // DevTools'da useEffect'leri inceleyebilirsiniz
  useEffect(() => {
    console.log('Component mounted');
    
    return () => {
      console.log('Component unmounted');
    };
  }, []);
  
  useEffect(() => {
    console.log('Count changed:', count);
  }, [count]);
  
  useEffect(() => {
    if (count > 0) {
      setLoading(true);
      
      setTimeout(() => {
        setData(\`Data for count \${count}\`);
        setLoading(false);
      }, 1000);
    }
  }, [count]);
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      
      {loading && <p>Loading...</p>}
      {data && <p>Data: {data}</p>}
    </div>
  );
};
\`\`\`

### **7. Custom Hooks:**
\`\`\`javascript
const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  
  const increment = () => setCount(prev => prev + 1);
  const decrement = () => setCount(prev => prev - 1);
  const reset = () => setCount(initialValue);
  
  return { count, increment, decrement, reset };
};

const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      return initialValue;
    }
  });
  
  const setValue = (value) => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error(error);
    }
  };
  
  return [storedValue, setValue];
};

const CustomHooksExample = () => {
  const { count, increment, decrement, reset } = useCounter(0);
  const [name, setName] = useLocalStorage('name', '');
  
  // DevTools'da custom hook'ları inceleyebilirsiniz
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Reset</button>
      
      <div>
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter name"
        />
        <p>Name: {name}</p>
      </div>
    </div>
  );
};
\`\`\`

## 🎨 Profiler

### **8. Performance Profiling:**
\`\`\`javascript
const ExpensiveComponent = ({ data }) => {
  // Profiler'da bu component'in performansını ölçebilirsiniz
  const processedData = useMemo(() => {
    console.log('Processing data...');
    return data.map(item => ({
      ...item,
      processed: true,
      timestamp: new Date()
    }));
  }, [data]);
  
  return (
    <div>
      <h2>Processed Data</h2>
      {processedData.map(item => (
        <div key=${item.id}} style={{border: '1px solid #ccc', padding: '10px', margin: '5px'}}>
          <h3>${${item.name}}}</h3>
          <p>Processed: {item.processed ? 'Yes' : 'No'}</p>
          <p>Timestamp: {item.timestamp.toString()}</p>
        </div>
      ))}
    </div>
  );
};

const ProfilerExample = () => {
  const [data, setData] = useState([
    { id: 1, name: 'Item 1' },
    { id: 2, name: 'Item 2' },
    { id: 3, name: 'Item 3' }
  ]);
  
  const addItem = () => {
    setData(prev => [...prev, {
      id: Date.now(),
      name: \`Item \${prev.length + 1}\`
    }]);
  };
  
  return (
    <div>
      <button onClick={addItem}>Add Item</button>
      <ExpensiveComponent data={data} />
    </div>
  );
};
\`\`\`

## 🔧 Context Inspection

### **9. Context Analysis:**
\`\`\`javascript
const ThemeContext = React.createContext();

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');
  
  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };
  
  const value = {
    theme,
    toggleTheme
  };
  
  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

const ThemeConsumer = () => {
  const { theme, toggleTheme } = useContext(ThemeContext);
  
  // DevTools'da Context değerlerini inceleyebilirsiniz
  return (
    <div style={{
      backgroundColor: theme === 'light' ? '#fff' : '#333',
      color: theme === 'light' ? '#333' : '#fff',
      padding: '20px'
    }}>
      <h2>Current Theme: {theme}</h2>
      <button onClick={toggleTheme}>
        Switch to {theme === 'light' ? 'dark' : 'light'} theme
      </button>
    </div>
  );
};

const ContextExample = () => {
  return (
    <ThemeProvider>
      <ThemeConsumer />
    </ThemeProvider>
  );
};
\`\`\`

## 💡 DevTools Best Practices

### **1. Component Naming:**
\`\`\`javascript
// ✅ İyi component isimlendirme
const UserProfile = () => { /* ... */ };
const UserList = () => { /* ... */ };
const UserForm = () => { /* ... */ };

// ❌ Kötü component isimlendirme
const Component1 = () => { /* ... */ };
const Component2 = () => { /* ... */ };
const Component3 = () => { /* ... */ };
\`\`\`

### **2. Display Name:**
\`\`\`javascript
// ✅ Display name kullanımı
const UserCard = ({ user }) => {
  return <div>{user.name}</div>;
};

UserCard.displayName = 'UserCard';

// ❌ Display name eksik
const UserCard = ({ user }) => {
  return <div>{user.name}</div>;
};
\`\`\`

### **3. Debug Information:**
\`\`\`javascript
// ✅ Debug bilgisi ekleme
const UserComponent = ({ user, debug = false }) => {
  if (debug) {
    console.log('UserComponent props:', { user });
  }
  
  return <div>{user.name}</div>;
};

// ❌ Debug bilgisi eksik
const UserComponent = ({ user }) => {
  return <div>{user.name}</div>;
};
\`\`\`

## 🎯 Sonuç

React DevTools:

- ✅ **Component inspection** - Component inceleme
- ✅ **State & props analysis** - State ve props analizi
- ✅ **Performance profiling** - Performans profilleme
- ✅ **Hook debugging** - Hook hata ayıklama

React DevTools, React geliştirmede vazgeçilmez bir araçtır.`,
            codeExamples: [
              {
                id: 'react-devtools-examples',
                title: 'React DevTools Örnekleri',
                code: `// Component tree örneği
const App = () => {
  return (
    <div>
      <Header />
      <Main>
        <Sidebar />
        <Content>
          <UserList />
          <UserForm />
        </Content>
      </Main>
      <Footer />
    </div>
  );
};

// Props & state inspection
const UserProfile = ({ user, settings, onUpdate }) => {
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
      <p>Role: {user.role}</p>
      
      <div>
        <h3>Settings</h3>
        <p>Theme: {settings.theme}</p>
        <p>Language: {settings.language}</p>
        <p>Notifications: {settings.notifications ? 'On' : 'Off'}</p>
      </div>
      
      <button onClick={() => onUpdate(user.id)}>
        Update Profile
      </button>
    </div>
  );
};

// Hooks inspection
const useStateExample = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const [isVisible, setIsVisible] = useState(true);
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => setCount(count + 1)}>+</button>
      <button onClick={() => setCount(count - 1)}>-</button>
      
      <div>
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter name"
        />
        <p>Name: {name}</p>
      </div>
      
      <div>
        <button onClick={() => setIsVisible(!isVisible)}>
          Toggle Visibility
        </button>
        {isVisible && <p>This is visible!</p>}
      </div>
    </div>
  );
};

// Custom hooks
const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  
  const increment = () => setCount(prev => prev + 1);
  const decrement = () => setCount(prev => prev - 1);
  const reset = () => setCount(initialValue);
  
  return { count, increment, decrement, reset };
};

// Context inspection
const ThemeContext = React.createContext();

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');
  
  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };
  
  const value = {
    theme,
    toggleTheme
  };
  
  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};`,
                language: 'javascript',
                description: 'React DevTools kullanım örnekleri'
              }
            ],
            relatedProjects: ['debugging-tools', 'performance-monitor'],
            resources: [
              {
                id: 'react-devtools',
                title: 'React DevTools',
                url: 'https://react.dev/learn/react-developer-tools',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'side-effects-kullanimi',
        name: 'SIDE EFFECTS KULLANIMI',
        icon: '⚡',
        description: 'React\'te side effects ve useEffect kullanımı',
        topics: [
          {
            id: 'side-effects-nedir',
            title: 'Side Effects Nedir?',
            description: 'React\'te side effects kavramı ve kullanımı',
            duration: '8 dakika',
            difficulty: 'medium',
            content: `# Side Effects Nedir? ⚡

React'te side effects, component'in render işlemi dışında gerçekleşen işlemlerdir. Bu işlemler, component'in dış dünyayla etkileşimini sağlar.

## 🎯 Side Effects Nedir?

### **Side Effects Tanımı:**
Side effects, React component'inin render işlemi dışında gerçekleşen işlemlerdir. Bu işlemler, component'in dış dünyayla etkileşimini sağlar.

### **Side Effects Türleri:**
- **Data Fetching** - Veri çekme
- **Subscriptions** - Abonelikler
- **Timers** - Zamanlayıcılar
- **DOM Manipulation** - DOM manipülasyonu
- **API Calls** - API çağrıları

## 🔧 Side Effects Örnekleri

### **1. Data Fetching:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Side effect: API'den veri çekme
  useEffect(() => {
    const fetchUser = async () => {
      try {
        setLoading(true);
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
  }, [userId]);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!user) return <div>User not found</div>;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};
\`\`\`

### **2. Subscriptions:**
\`\`\`javascript
const ChatRoom = ({ roomId }) => {
  const [messages, setMessages] = useState([]);
  const [isConnected, setIsConnected] = useState(false);
  
  // Side effect: WebSocket aboneliği
  useEffect(() => {
    const socket = new WebSocket(\`ws://localhost:8080/chat/\${roomId}\`);
    
    socket.onopen = () => {
      setIsConnected(true);
    };
    
    socket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      setMessages(prev => [...prev, message]);
    };
    
    socket.onclose = () => {
      setIsConnected(false);
    };
    
    // Cleanup: Aboneliği kapatma
    return () => {
      socket.close();
    };
  }, [roomId]);
  
  return (
    <div>
      <h2>Chat Room: {roomId}</h2>
      <p>Status: {isConnected ? 'Connected' : 'Disconnected'}</p>
      <div>
        {messages.map((message, index) => (
          <div key={index}>
            <strong>{message.user}:</strong> {message.text}
          </div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

### **3. Timers:**
\`\`\`javascript
const Timer = () => {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  
  // Side effect: Timer
  useEffect(() => {
    let interval = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(prev => prev + 1);
      }, 1000);
    }
    
    // Cleanup: Timer'ı temizleme
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning]);
  
  const start = () => setIsRunning(true);
  const stop = () => setIsRunning(false);
  const reset = () => {
    setSeconds(0);
    setIsRunning(false);
  };
  
  return (
    <div>
      <h2>Timer: {seconds}s</h2>
      <button onClick={start} disabled={isRunning}>Start</button>
      <button onClick={stop} disabled={!isRunning}>Stop</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};
\`\`\`

### **4. DOM Manipulation:**
\`\`\`javascript
const ScrollToTop = () => {
  const [isVisible, setIsVisible] = useState(false);
  
  // Side effect: Scroll event listener
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset;
      setIsVisible(scrollTop > 300);
    };
    
    window.addEventListener('scroll', handleScroll);
    
    // Cleanup: Event listener'ı kaldırma
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);
  
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };
  
  return (
    <div>
      {isVisible && (
        <button
          onClick={scrollToTop}
          style={{
            position: 'fixed',
            bottom: '20px',
            right: '20px',
            padding: '10px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '50%',
            cursor: 'pointer'
          }}
        >
          ↑
        </button>
      )}
    </div>
  );
};
\`\`\`

### **5. Local Storage:**
\`\`\`javascript
const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      return initialValue;
    }
  });
  
  // Side effect: Local storage'a yazma
  const setValue = (value) => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  };
  
  return [storedValue, setValue];
};

const Settings = () => {
  const [theme, setTheme] = useLocalStorage('theme', 'light');
  const [language, setLanguage] = useLocalStorage('language', 'en');
  
  return (
    <div>
      <h2>Settings</h2>
      
      <div>
        <label>Theme:</label>
        <select value={theme} onChange={(e) => setTheme(e.target.value)}>
          <option value="light">Light</option>
          <option value="dark">Dark</option>
        </select>
      </div>
      
      <div>
        <label>Language:</label>
        <select value={language} onChange={(e) => setLanguage(e.target.value)}>
          <option value="en">English</option>
          <option value="tr">Türkçe</option>
        </select>
      </div>
    </div>
  );
};
\`\`\`

## 🎨 Side Effects Best Practices

### **6. Cleanup Functions:**
\`\`\`javascript
const DataFetcher = ({ url }) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        const result = await response.json();
        
        // Component hala mount edilmiş mi kontrol et
        if (isMounted) {
          setData(result);
          setLoading(false);
        }
      } catch (error) {
        if (isMounted) {
          console.error('Error fetching data:', error);
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    // Cleanup: Component unmount olduğunda
    return () => {
      isMounted = false;
    };
  }, [url]);
  
  if (loading) return <div>Loading...</div>;
  if (!data) return <div>No data</div>;
  
  return <div>{JSON.stringify(data, null, 2)}</div>;
};
\`\`\`

### **7. Multiple Side Effects:**
\`\`\`javascript
const UserDashboard = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [notifications, setNotifications] = useState([]);
  
  // Side effect 1: User data
  useEffect(() => {
    const fetchUser = async () => {
      const response = await fetch(\`/api/users/\${userId}\`);
      const userData = await response.json();
      setUser(userData);
    };
    
    fetchUser();
  }, [userId]);
  
  // Side effect 2: User posts
  useEffect(() => {
    const fetchPosts = async () => {
      const response = await fetch(\`/api/users/\${userId}/posts\`);
      const postsData = await response.json();
      setPosts(postsData);
    };
    
    fetchPosts();
  }, [userId]);
  
  // Side effect 3: Real-time notifications
  useEffect(() => {
    const socket = new WebSocket(\`ws://localhost:8080/notifications/\${userId}\`);
    
    socket.onmessage = (event) => {
      const notification = JSON.parse(event.data);
      setNotifications(prev => [...prev, notification]);
    };
    
    return () => socket.close();
  }, [userId]);
  
  return (
    <div>
      <h1>Dashboard</h1>
      {user && <p>Welcome, {user.name}!</p>}
      <div>
        <h2>Posts ({posts.length})</h2>
        {posts.map(post => (
          <div key={post.id}>{post.title}</div>
        ))}
      </div>
      <div>
        <h2>Notifications ({notifications.length})</h2>
        {notifications.map((notification, index) => (
          <div key={index}>{notification.message}</div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

### **8. Conditional Side Effects:**
\`\`\`javascript
const SearchResults = ({ query, enabled }) => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // Side effect: Sadece query ve enabled true olduğunda
  useEffect(() => {
    if (!enabled || !query.trim()) {
      setResults([]);
      return;
    }
    
    const search = async () => {
      setLoading(true);
      try {
        const response = await fetch(\`/api/search?q=\${encodeURIComponent(query)}\`);
        const data = await response.json();
        setResults(data.results);
      } catch (error) {
        console.error('Search error:', error);
      } finally {
        setLoading(false);
      }
    };
    
    // Debounce: 500ms bekle
    const timeoutId = setTimeout(search, 500);
    
    return () => clearTimeout(timeoutId);
  }, [query, enabled]);
  
  if (!enabled) {
    return <div>Search is disabled</div>;
  }
  
  if (loading) {
    return <div>Searching...</div>;
  }
  
  return (
    <div>
      <h2>Search Results for: {query}</h2>
      {results.length === 0 ? (
        <p>No results found</p>
      ) : (
        <ul>
          {results.map(result => (
            <li key={result.id}>{result.title}</li>
          ))}
        </ul>
      )}
    </div>
  );
};
\`\`\`

## 💡 Side Effects Patterns

### **9. Custom Hook for Side Effects:**
\`\`\`javascript
const useApi = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error(\`HTTP error! status: \${response.status}\`);
        }
        
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url]);
  
  return { data, loading, error };
};

const UserList = () => {
  const { data: users, loading, error } = useApi('/api/users');
  
  if (loading) return <div>Loading users...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!users) return <div>No users found</div>;
  
  return (
    <div>
      <h2>Users</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};
\`\`\`

### **10. Side Effects with Dependencies:**
\`\`\`javascript
const ProductList = ({ category, sortBy }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // Side effect: category veya sortBy değiştiğinde
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      
      try {
        const params = new URLSearchParams();
        if (category) params.append('category', category);
        if (sortBy) params.append('sort', sortBy);
        
        const response = await fetch(\`/api/products?\${params}\`);
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchProducts();
  }, [category, sortBy]); // Dependencies
  
  return (
    <div>
      <h2>Products</h2>
      {loading ? (
        <div>Loading...</div>
      ) : (
        <div>
        {products.map(item => (
          <div key=${${item.id}}}>
            <h3>${${item.name}}}</h3>
            <p>Price: $${item.price}}</p>
          </div>
        ))}
        </div>
      )}
    </div>
  );
};
\`\`\`

## 🎯 Sonuç

React side effects:

- ✅ **Data fetching** - Veri çekme
- ✅ **Subscriptions** - Abonelikler
- ✅ **Timers** - Zamanlayıcılar
- ✅ **DOM manipulation** - DOM manipülasyonu

Side effects, React uygulamalarının dış dünyayla etkileşimini sağlar.`,
            codeExamples: [
              {
                id: 'side-effects-examples',
                title: 'Side Effects Örnekleri',
                code: `// Data fetching
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
  }, [userId]);
  
  if (loading) return <div>Loading...</div>;
  if (!user) return <div>User not found</div>;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};

// Subscriptions
const ChatRoom = ({ roomId }) => {
  const [messages, setMessages] = useState([]);
  
  useEffect(() => {
    const socket = new WebSocket(\`ws://localhost:8080/chat/\${roomId}\`);
    
    socket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      setMessages(prev => [...prev, message]);
    };
    
    return () => socket.close();
  }, [roomId]);
  
  return (
    <div>
      {messages.map((message, index) => (
        <div key={index}>
          <strong>{message.user}:</strong> {message.text}
        </div>
      ))}
    </div>
  );
};

// Timers
const Timer = () => {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  
  useEffect(() => {
    let interval = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(prev => prev + 1);
      }, 1000);
    }
    
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning]);
  
  return (
    <div>
      <h2>Timer: {seconds}s</h2>
      <button onClick={() => setIsRunning(!isRunning)}>
        {isRunning ? 'Stop' : 'Start'}
      </button>
    </div>
  );
};

// Custom hook for side effects
const useApi = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url]);
  
  return { data, loading, error };
};`,
                language: 'javascript',
                description: 'React side effects örnekleri'
              }
            ],
            relatedProjects: ['data-fetcher', 'chat-app'],
            resources: [
              {
                id: 'react-side-effects',
                title: 'React Side Effects',
                url: 'https://react.dev/learn/keeping-components-pure',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'useeffect-nedir',
            title: 'useEffect Nedir?',
            description: 'React useEffect hook\'unun kullanımı ve özellikleri',
            duration: '8 dakika',
            difficulty: 'medium',
            content: `# useEffect Nedir? ⚡

useEffect, React'te side effects'leri yönetmek için kullanılan en önemli hook'lardan biridir. Component'in lifecycle'ı boyunca çeşitli işlemleri gerçekleştirmenizi sağlar.

## 🎯 useEffect Nedir?

### **useEffect Tanımı:**
useEffect, React component'lerinde side effects'leri (yan etkileri) yönetmek için kullanılan bir hook'tur. Component'in mount, update ve unmount aşamalarında çalışır.

### **useEffect Syntax:**
\`\`\`javascript
useEffect(() => {
  // Side effect kodları
}, [dependencies]);
\`\`\`

## 🔧 useEffect Kullanım Senaryoları

### **1. Component Mount (İlk Yükleme):**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  // Component mount olduğunda çalışır
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Error fetching user:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
  }, []); // Boş dependency array = sadece mount'ta çalışır
  
  if (loading) return <div>Loading...</div>;
  if (!user) return <div>User not found</div>;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};
\`\`\`

### **2. Dependency Array ile Re-run:**
\`\`\`javascript
const ProductList = ({ category, sortBy }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // category veya sortBy değiştiğinde çalışır
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      
      try {
        const params = new URLSearchParams();
        if (category) params.append('category', category);
        if (sortBy) params.append('sort', sortBy);
        
        const response = await fetch(\`/api/products?\${params}\`);
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchProducts();
  }, [category, sortBy]); // Dependencies
  
  return (
    <div>
      <h2>Products</h2>
      {loading ? (
        <div>Loading...</div>
      ) : (
        <div>
        {products.map(item => (
          <div key=${${item.id}}}>
            <h3>${${item.name}}}</h3>
            <p>Price: $${item.price}}</p>
          </div>
        ))}
        </div>
      )}
    </div>
  );
};
\`\`\`

### **3. Cleanup Function:**
\`\`\`javascript
const Timer = () => {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  
  useEffect(() => {
    let interval = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(prev => prev + 1);
      }, 1000);
    }
    
    // Cleanup function: Component unmount olduğunda veya dependency değiştiğinde
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning]);
  
  return (
    <div>
      <h2>Timer: {seconds}s</h2>
      <button onClick={() => setIsRunning(!isRunning)}>
        {isRunning ? 'Stop' : 'Start'}
      </button>
      <button onClick={() => setSeconds(0)}>Reset</button>
    </div>
  );
};
\`\`\`

### **4. Event Listeners:**
\`\`\`javascript
const ScrollToTop = () => {
  const [isVisible, setIsVisible] = useState(false);
  
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset;
      setIsVisible(scrollTop > 300);
    };
    
    // Event listener ekle
    window.addEventListener('scroll', handleScroll);
    
    // Cleanup: Event listener'ı kaldır
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []); // Sadece mount'ta çalışır
  
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };
  
  return (
    <div>
      {isVisible && (
        <button
          onClick={scrollToTop}
          style={{
            position: 'fixed',
            bottom: '20px',
            right: '20px',
            padding: '10px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '50%',
            cursor: 'pointer'
          }}
        >
          ↑
        </button>
      )}
    </div>
  );
};
\`\`\`

### **5. WebSocket Connection:**
\`\`\`javascript
const ChatRoom = ({ roomId }) => {
  const [messages, setMessages] = useState([]);
  const [isConnected, setIsConnected] = useState(false);
  const [socket, setSocket] = useState(null);
  
  useEffect(() => {
    // WebSocket bağlantısı kur
    const newSocket = new WebSocket(\`ws://localhost:8080/chat/\${roomId}\`);
    
    newSocket.onopen = () => {
      setIsConnected(true);
      console.log('Connected to chat room:', roomId);
    };
    
    newSocket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      setMessages(prev => [...prev, message]);
    };
    
    newSocket.onclose = () => {
      setIsConnected(false);
      console.log('Disconnected from chat room');
    };
    
    newSocket.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
    
    setSocket(newSocket);
    
    // Cleanup: WebSocket bağlantısını kapat
    return () => {
      newSocket.close();
    };
  }, [roomId]); // roomId değiştiğinde yeni bağlantı kur
  
  const sendMessage = (text) => {
    if (socket && isConnected) {
      socket.send(JSON.stringify({
        text,
        timestamp: new Date().toISOString()
      }));
    }
  };
  
  return (
    <div>
      <h2>Chat Room: {roomId}</h2>
      <p>Status: {isConnected ? 'Connected' : 'Disconnected'}</p>
      
      <div style={{ height: '300px', overflow: 'auto', border: '1px solid #ccc', padding: '10px' }}>
        {messages.map((message, index) => (
          <div key={index} style={{ marginBottom: '10px' }}>
            <strong>{message.user}:</strong> {message.text}
            <small style={{ color: '#666', marginLeft: '10px' }}>
              {new Date(message.timestamp).toLocaleTimeString()}
            </small>
          </div>
        ))}
      </div>
      
      <div style={{ marginTop: '10px' }}>
        <input
          type="text"
          placeholder="Type a message..."
          onKeyPress={(e) => {
            if (e.key === 'Enter' && e.target.value.trim()) {
              sendMessage(e.target.value);
              e.target.value = '';
            }
          }}
          disabled={!isConnected}
        />
      </div>
    </div>
  );
};
\`\`\`

### **6. Local Storage:**
\`\`\`javascript
const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error('Error reading localStorage:', error);
      return initialValue;
    }
  });
  
  // Local storage'a yazma
  const setValue = (value) => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  };
  
  return [storedValue, setValue];
};

const Settings = () => {
  const [theme, setTheme] = useLocalStorage('theme', 'light');
  const [language, setLanguage] = useLocalStorage('language', 'en');
  const [notifications, setNotifications] = useLocalStorage('notifications', true);
  
  return (
    <div>
      <h2>Settings</h2>
      
      <div style={{ marginBottom: '20px' }}>
        <label>Theme:</label>
        <select value={theme} onChange={(e) => setTheme(e.target.value)}>
          <option value="light">Light</option>
          <option value="dark">Dark</option>
        </select>
      </div>
      
      <div style={{ marginBottom: '20px' }}>
        <label>Language:</label>
        <select value={language} onChange={(e) => setLanguage(e.target.value)}>
          <option value="en">English</option>
          <option value="tr">Türkçe</option>
        </select>
      </div>
      
      <div style={{ marginBottom: '20px' }}>
        <label>
          <input
            type="checkbox"
            checked={notifications}
            onChange={(e) => setNotifications(e.target.checked)}
          />
          Enable Notifications
        </label>
      </div>
      
      <div style={{ padding: '10px', backgroundColor: '#f5f5f5', borderRadius: '5px' }}>
        <h3>Current Settings:</h3>
        <p>Theme: {theme}</p>
        <p>Language: {language}</p>
        <p>Notifications: {notifications ? 'Enabled' : 'Disabled'}</p>
      </div>
    </div>
  );
};
\`\`\`

### **7. Multiple useEffect:**
\`\`\`javascript
const UserDashboard = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // useEffect 1: User data
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Error fetching user:', error);
      }
    };
    
    fetchUser();
  }, [userId]);
  
  // useEffect 2: User posts
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch(\`/api/users/\${userId}/posts\`);
        const postsData = await response.json();
        setPosts(postsData);
      } catch (error) {
        console.error('Error fetching posts:', error);
      }
    };
    
    fetchPosts();
  }, [userId]);
  
  // useEffect 3: Real-time notifications
  useEffect(() => {
    const socket = new WebSocket(\`ws://localhost:8080/notifications/\${userId}\`);
    
    socket.onmessage = (event) => {
      const notification = JSON.parse(event.data);
      setNotifications(prev => [...prev, notification]);
    };
    
    return () => socket.close();
  }, [userId]);
  
  // useEffect 4: Loading state
  useEffect(() => {
    if (user && posts.length >= 0) {
      setLoading(false);
    }
  }, [user, posts]);
  
  if (loading) return <div>Loading dashboard...</div>;
  
  return (
    <div>
      <h1>Dashboard</h1>
      {user && <p>Welcome, {user.name}!</p>}
      
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
        <div>
          <h2>Posts ({posts.length})</h2>
          {posts.map(post => (
            <div key={post.id} style={{ border: '1px solid #ccc', padding: '10px', marginBottom: '10px' }}>
              <h3>{post.title}</h3>
              <p>{post.excerpt}</p>
            </div>
          ))}
        </div>
        
        <div>
          <h2>Notifications ({notifications.length})</h2>
          {notifications.map((notification, index) => (
            <div key={index} style={{ border: '1px solid #ccc', padding: '10px', marginBottom: '10px' }}>
              <p>{notification.message}</p>
              <small>{new Date(notification.timestamp).toLocaleString()}</small>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};
\`\`\`

### **8. Conditional useEffect:**
\`\`\`javascript
const SearchResults = ({ query, enabled }) => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    // Sadece enabled true ve query boş değilse çalış
    if (!enabled || !query.trim()) {
      setResults([]);
      setError(null);
      return;
    }
    
    const search = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const response = await fetch(\`/api/search?q=\${encodeURIComponent(query)}\`);
        
        if (!response.ok) {
          throw new Error(\`Search failed: \${response.status}\`);
        }
        
        const data = await response.json();
        setResults(data.results);
      } catch (err) {
        setError(err.message);
        setResults([]);
      } finally {
        setLoading(false);
      }
    };
    
    // Debounce: 500ms bekle
    const timeoutId = setTimeout(search, 500);
    
    return () => clearTimeout(timeoutId);
  }, [query, enabled]);
  
  if (!enabled) {
    return <div>Search is disabled</div>;
  }
  
  if (loading) {
    return <div>Searching for "{query}"...</div>;
  }
  
  if (error) {
    return <div>Error: {error}</div>;
  }
  
  return (
    <div>
      <h2>Search Results for: "{query}"</h2>
      {results.length === 0 ? (
        <p>No results found</p>
      ) : (
        <ul>
          {results.map(result => (
            <li key={result.id}>
              <h3>{result.title}</h3>
              <p>{result.description}</p>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};
\`\`\`

## 🎨 useEffect Best Practices

### **9. Custom Hook with useEffect:**
\`\`\`javascript
const useApi = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetch(url);
        
        if (!response.ok) {
          throw new Error(\`HTTP error! status: \${response.status}\`);
        }
        
        const result = await response.json();
        
        // Component hala mount edilmiş mi kontrol et
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url]);
  
  return { data, loading, error };
};

const UserList = () => {
  const { data: users, loading, error } = useApi('/api/users');
  
  if (loading) return <div>Loading users...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!users) return <div>No users found</div>;
  
  return (
    <div>
      <h2>Users</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>
            <strong>{user.name}</strong> - {user.email}
          </li>
        ))}
      </ul>
    </div>
  );
};
\`\`\`

### **10. useEffect with Ref:**
\`\`\`javascript
const usePrevious = (value) => {
  const ref = useRef();
  
  useEffect(() => {
    ref.current = value;
  });
  
  return ref.current;
};

const Counter = () => {
  const [count, setCount] = useState(0);
  const [message, setMessage] = useState('');
  const prevCount = usePrevious(count);
  
  useEffect(() => {
    if (prevCount !== undefined) {
      if (count > prevCount) {
        setMessage('Count increased!');
      } else if (count < prevCount) {
        setMessage('Count decreased!');
      }
    }
  }, [count, prevCount]);
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <p>{message}</p>
      <button onClick={() => setCount(count + 1)}>+</button>
      <button onClick={() => setCount(count - 1)}>-</button>
      <button onClick={() => setCount(0)}>Reset</button>
    </div>
  );
};
\`\`\`

## 🎯 useEffect Özet

### **useEffect Kullanım Kuralları:**

1. **Boş dependency array []** - Sadece mount'ta çalışır
2. **Dependency array [dep1, dep2]** - Dependencies değiştiğinde çalışır
3. **Cleanup function** - Component unmount olduğunda temizlik yapar
4. **Multiple useEffect** - Farklı side effects için ayrı useEffect kullan
5. **Conditional useEffect** - Koşullu side effects için early return kullan

### **useEffect Avantajları:**
- ✅ **Lifecycle yönetimi** - Component lifecycle'ını kontrol eder
- ✅ **Side effects** - Dış dünyayla etkileşimi sağlar
- ✅ **Cleanup** - Memory leak'leri önler
- ✅ **Reusability** - Custom hook'larla tekrar kullanılabilir

useEffect, React'te side effects'leri yönetmenin en güçlü yoludur.`,
            codeExamples: [
              {
                id: 'useeffect-examples',
                title: 'useEffect Örnekleri',
                code: `// Basic useEffect
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
  }, [userId]);
  
  if (loading) return <div>Loading...</div>;
  if (!user) return <div>User not found</div>;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};

// useEffect with cleanup
const Timer = () => {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  
  useEffect(() => {
    let interval = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(prev => prev + 1);
      }, 1000);
    }
    
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning]);
  
  return (
    <div>
      <h2>Timer: {seconds}s</h2>
      <button onClick={() => setIsRunning(!isRunning)}>
        {isRunning ? 'Stop' : 'Start'}
      </button>
    </div>
  );
};

// Event listeners
const ScrollToTop = () => {
  const [isVisible, setIsVisible] = useState(false);
  
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset;
      setIsVisible(scrollTop > 300);
    };
    
    window.addEventListener('scroll', handleScroll);
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);
  
  return (
    <div>
      {isVisible && (
        <button onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>
          ↑
        </button>
      )}
    </div>
  );
};

// Custom hook with useEffect
const useApi = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url]);
  
  return { data, loading, error };
};`,
                language: 'javascript',
                description: 'React useEffect hook örnekleri'
              }
            ],
            relatedProjects: ['timer-app', 'chat-app', 'data-fetcher'],
            resources: [
              {
                id: 'react-useeffect',
                title: 'React useEffect Hook',
                url: 'https://react.dev/reference/react/useEffect',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'useeffect-ve-dependencies',
            title: 'useEffect ve Dependencies',
            description: 'useEffect dependency array kullanımı ve kuralları',
            duration: '9 dakika',
            difficulty: 'medium',
            content: `# useEffect ve Dependencies ⚡

useEffect'in dependency array'i, hook'un ne zaman çalışacağını kontrol eden en önemli özelliğidir. Doğru kullanım, performans ve beklenmeyen davranışları önler.

## 🎯 useEffect Dependencies Nedir?

### **Dependency Array Tanımı:**
Dependency array, useEffect'in hangi değerlerin değişmesi durumunda yeniden çalışacağını belirleyen ikinci parametredir.

### **Dependency Array Syntax:**
\`\`\`javascript
useEffect(() => {
  // Side effect kodları
}, [dependency1, dependency2, dependency3]);
\`\`\`

## 🔧 Dependency Array Kullanım Senaryoları

### **1. Boş Dependency Array []:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  // Sadece component mount olduğunda çalışır
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Error fetching user:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
  }, []); // Boş array = sadece mount'ta çalışır
  
  if (loading) return <div>Loading...</div>;
  if (!user) return <div>User not found</div>;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};
\`\`\`

### **2. Tek Dependency:**
\`\`\`javascript
const ProductList = ({ category }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // category değiştiğinde çalışır
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      
      try {
        const response = await fetch(\`/api/products?category=\${category}\`);
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchProducts();
  }, [category]); // category değiştiğinde çalışır
  
  return (
    <div>
      <h2>Products in {category}</h2>
      {loading ? (
        <div>Loading...</div>
      ) : (
        <div>
        {products.map(item => (
          <div key=${${item.id}}}>
            <h3>${${item.name}}}</h3>
            <p>Price: $${item.price}}</p>
          </div>
        ))}
        </div>
      )}
    </div>
  );
};
\`\`\`

### **3. Çoklu Dependencies:**
\`\`\`javascript
const SearchResults = ({ query, category, sortBy }) => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // query, category veya sortBy değiştiğinde çalışır
  useEffect(() => {
    const search = async () => {
      setLoading(true);
      
      try {
        const params = new URLSearchParams();
        if (query) params.append('q', query);
        if (category) params.append('category', category);
        if (sortBy) params.append('sort', sortBy);
        
        const response = await fetch(\`/api/search?\${params}\`);
        const data = await response.json();
        setResults(data.results);
      } catch (error) {
        console.error('Search error:', error);
      } finally {
        setLoading(false);
      }
    };
    
    search();
  }, [query, category, sortBy]); // Herhangi biri değiştiğinde çalışır
  
  return (
    <div>
      <h2>Search Results</h2>
      {loading ? (
        <div>Searching...</div>
      ) : (
        <div>
          {results.map(result => (
            <div key={result.id}>
              <h3>{result.title}</h3>
              <p>{result.description}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
\`\`\`

### **4. Object ve Array Dependencies:**
\`\`\`javascript
const UserDashboard = ({ user, filters }) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // Object ve array dependencies
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      
      try {
        const params = new URLSearchParams();
        params.append('userId', user.id);
        params.append('filters', JSON.stringify(filters));
        
        const response = await fetch(\`/api/dashboard?\${params}\`);
        const result = await response.json();
        setData(result);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [user.id, filters]); // user.id ve filters değiştiğinde çalışır
  
  return (
    <div>
      <h2>Dashboard for {user.name}</h2>
      {loading ? (
        <div>Loading...</div>
      ) : (
        <div>
          {data && (
            <div>
              <p>Total Items: {data.totalItems}</p>
              <p>Last Updated: {data.lastUpdated}</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
\`\`\`

### **5. Function Dependencies:**
\`\`\`javascript
const DataFetcher = ({ fetchFunction, params }) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // Function dependency
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      
      try {
        const result = await fetchFunction(params);
        setData(result);
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [fetchFunction, params]); // fetchFunction ve params değiştiğinde çalışır
  
  return (
    <div>
      {loading ? (
        <div>Loading...</div>
      ) : (
        <div>
          {data && <pre>{JSON.stringify(data, null, 2)}</pre>}
        </div>
      )}
    </div>
  );
};

// Kullanım
const App = () => {
  const [userId, setUserId] = useState(1);
  
  const fetchUserData = useCallback(async (id) => {
    const response = await fetch(\`/api/users/\${id}\`);
    return response.json();
  }, []);
  
  return (
    <div>
      <button onClick={() => setUserId(userId + 1)}>
        Next User
      </button>
      <DataFetcher 
        fetchFunction={fetchUserData} 
        params={userId} 
      />
    </div>
  );
};
\`\`\`

### **6. Conditional Dependencies:**
\`\`\`javascript
const ConditionalEffect = ({ enabled, userId }) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  
  useEffect(() => {
    // Sadece enabled true olduğunda çalış
    if (!enabled) {
      setData(null);
      return;
    }
    
    const fetchData = async () => {
      setLoading(true);
      
      try {
        const response = await fetch(\`/api/users/\${userId}\`);
        const result = await response.json();
        setData(result);
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [enabled, userId]); // enabled ve userId değiştiğinde çalışır
  
  if (!enabled) {
    return <div>Data fetching is disabled</div>;
  }
  
  return (
    <div>
      {loading ? (
        <div>Loading...</div>
      ) : (
        <div>
          {data && <p>User: {data.name}</p>}
        </div>
      )}
    </div>
  );
};
\`\`\`

### **7. useCallback ile Function Dependencies:**
\`\`\`javascript
const SearchComponent = ({ searchTerm }) => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // useCallback ile function'ı memoize et
  const performSearch = useCallback(async (term) => {
    if (!term.trim()) {
      setResults([]);
      return;
    }
    
    setLoading(true);
    
    try {
      const response = await fetch(\`/api/search?q=\${encodeURIComponent(term)}\`);
      const data = await response.json();
      setResults(data.results);
    } catch (error) {
      console.error('Search error:', error);
    } finally {
      setLoading(false);
    }
  }, []); // Boş dependency array - function değişmez
  
  useEffect(() => {
    performSearch(searchTerm);
  }, [searchTerm, performSearch]); // searchTerm ve performSearch değiştiğinde çalışır
  
  return (
    <div>
      <h2>Search Results for: {searchTerm}</h2>
      {loading ? (
        <div>Searching...</div>
      ) : (
        <div>
          {results.map(result => (
            <div key={result.id}>
              <h3>{result.title}</h3>
              <p>{result.description}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
\`\`\`

### **8. useMemo ile Computed Dependencies:**
\`\`\`javascript
const ProductList = ({ products, filters }) => {
  const [filteredProducts, setFilteredProducts] = useState([]);
  
  // useMemo ile computed value
  const filterKey = useMemo(() => {
    return JSON.stringify(filters);
  }, [filters]);
  
  useEffect(() => {
    const filtered = products.filter(product => {
      if (filters.category && product.category !== filters.category) {
        return false;
      }
      if (filters.minPrice && product.price < filters.minPrice) {
        return false;
      }
      if (filters.maxPrice && product.price > filters.maxPrice) {
        return false;
      }
      return true;
    });
    
    setFilteredProducts(filtered);
  }, [products, filterKey]); // products ve filterKey değiştiğinde çalışır
  
  return (
    <div>
      <h2>Products ({filteredProducts.length})</h2>
      {filteredProducts.map(item => (
        <div key=${${item.id}}}>
          <h3>${${item.name}}}</h3>
          <p>Price: $${item.price}}</p>
          <p>Category: ${${item.category}}}</p>
        </div>
      ))}
    </div>
  );
};
\`\`\`

### **9. Ref ile Stable Dependencies:**
\`\`\`javascript
const Timer = () => {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const intervalRef = useRef(null);
  
  useEffect(() => {
    if (isRunning) {
      intervalRef.current = setInterval(() => {
        setSeconds(prev => prev + 1);
      }, 1000);
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    }
    
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isRunning]); // isRunning değiştiğinde çalışır
  
  return (
    <div>
      <h2>Timer: {seconds}s</h2>
      <button onClick={() => setIsRunning(!isRunning)}>
        {isRunning ? 'Stop' : 'Start'}
      </button>
      <button onClick={() => setSeconds(0)}>Reset</button>
    </div>
  );
};
\`\`\`

### **10. Custom Hook ile Dependencies:**
\`\`\`javascript
const useApi = (url, options = {}) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetch(url, options);
        
        if (!response.ok) {
          throw new Error(\`HTTP error! status: \${response.status}\`);
        }
        
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url, JSON.stringify(options)]); // url ve options değiştiğinde çalışır
  
  return { data, loading, error };
};

const UserList = () => {
  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  
  const { data: users, loading, error } = useApi(
    \`/api/users?page=\${page}&limit=\${limit}\`,
    { method: 'GET' }
  );
  
  if (loading) return <div>Loading users...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!users) return <div>No users found</div>;
  
  return (
    <div>
      <h2>Users (Page {page})</h2>
      <div>
        <button onClick={() => setPage(page - 1)} disabled={page === 1}>
          Previous
        </button>
        <button onClick={() => setPage(page + 1)}>
          Next
        </button>
      </div>
      <ul>
        {users.map(user => (
          <li key={user.id}>
            <strong>{user.name}</strong> - {user.email}
          </li>
        ))}
      </ul>
    </div>
  );
};
\`\`\`

## 🎨 Dependency Array Best Practices

### **11. ESLint Rules:**
\`\`\`javascript
// eslint-disable-next-line react-hooks/exhaustive-deps
useEffect(() => {
  // Bu useEffect'te dependency eksik olabilir
  // ESLint uyarısını kapatmak için yukarıdaki comment'i kullan
}, []);

// Doğru kullanım
useEffect(() => {
  // Tüm dependencies'i ekle
}, [dependency1, dependency2]);
\`\`\`

### **12. Common Mistakes:**
\`\`\`javascript
// YANLIŞ: Object dependency
const [filters, setFilters] = useState({ category: 'all', price: 0 });

useEffect(() => {
  // filters object'i her render'da yeni referans alır
  fetchProducts(filters);
}, [filters]); // Her render'da çalışır!

// DOĞRU: Object properties
useEffect(() => {
  fetchProducts(filters);
}, [filters.category, filters.price]); // Sadece değerler değiştiğinde çalışır

// DOĞRU: useMemo ile object memoization
const memoizedFilters = useMemo(() => filters, [filters.category, filters.price]);

useEffect(() => {
  fetchProducts(memoizedFilters);
}, [memoizedFilters]);
\`\`\`

## 🎯 Dependency Array Özet

### **Dependency Array Kuralları:**

1. **Boş array []** - Sadece mount'ta çalışır
2. **Tek dependency [dep]** - Sadece o değer değiştiğinde çalışır
3. **Çoklu dependencies [dep1, dep2]** - Herhangi biri değiştiğinde çalışır
4. **Object dependencies** - useMemo ile memoize et
5. **Function dependencies** - useCallback ile memoize et

### **Dependency Array Avantajları:**
- ✅ **Performance** - Gereksiz re-render'ları önler
- ✅ **Predictability** - Ne zaman çalışacağı bellidir
- ✅ **Debugging** - Hangi değerlerin değiştiğini takip eder
- ✅ **Memory management** - Cleanup function'ları doğru çalışır

### **Dependency Array Dikkat Edilecekler:**
- ⚠️ **Object references** - Her render'da yeni referans
- ⚠️ **Function references** - useCallback kullan
- ⚠️ **Array references** - useMemo kullan
- ⚠️ **ESLint warnings** - exhaustive-deps kuralını takip et

useEffect dependency array'i, React uygulamalarında performans ve doğru davranış için kritik öneme sahiptir.`,
            codeExamples: [
              {
                id: 'useeffect-dependencies-examples',
                title: 'useEffect Dependencies Örnekleri',
                code: `// Boş dependency array
useEffect(() => {
  // Sadece mount'ta çalışır
  fetchInitialData();
}, []);

// Tek dependency
useEffect(() => {
  // userId değiştiğinde çalışır
  fetchUserData(userId);
}, [userId]);

// Çoklu dependencies
useEffect(() => {
  // query, category veya sortBy değiştiğinde çalışır
  performSearch(query, category, sortBy);
}, [query, category, sortBy]);

// Object dependency (yanlış)
const [filters, setFilters] = useState({ category: 'all', price: 0 });

useEffect(() => {
  // Her render'da çalışır!
  fetchProducts(filters);
}, [filters]);

// Object dependency (doğru)
useEffect(() => {
  fetchProducts(filters);
}, [filters.category, filters.price]);

// Function dependency
const fetchData = useCallback(async (id) => {
  const response = await fetch(\`/api/users/\${id}\`);
  return response.json();
}, []);

useEffect(() => {
  fetchData(userId);
}, [userId, fetchData]);

// Conditional dependency
useEffect(() => {
  if (!enabled) return;
  
  fetchData();
}, [enabled, fetchData]);

// Custom hook with dependencies
const useApi = (url, options = {}) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        const response = await fetch(url, options);
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url, JSON.stringify(options)]);
  
  return { data, loading, error };
};`,
                language: 'javascript',
                description: 'useEffect dependency array örnekleri'
              }
            ],
            relatedProjects: ['search-app', 'data-fetcher'],
            resources: [
              {
                id: 'react-useeffect-dependencies',
                title: 'React useEffect Dependencies',
                url: 'https://react.dev/reference/react/useEffect#specifying-reactive-dependencies',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'useeffect-cleanup-fonksiyonu',
            title: 'useEffect Cleanup Fonksiyonu Kullanımı',
            description: 'useEffect cleanup function ve memory leak önleme',
            duration: '13 dakika',
            difficulty: 'medium',
            content: `# useEffect Cleanup Fonksiyonu Kullanımı 🧹

useEffect cleanup function'ı, component unmount olduğunda veya dependency değiştiğinde temizlik işlemlerini yapmak için kullanılır. Memory leak'leri önler ve kaynakları doğru şekilde serbest bırakır.

## 🎯 Cleanup Function Nedir?

### **Cleanup Function Tanımı:**
Cleanup function, useEffect'in return ettiği fonksiyondur. Component unmount olduğunda veya dependency değiştiğinde çalışır.

### **Cleanup Function Syntax:**
\`\`\`javascript
useEffect(() => {
  // Side effect kodları
  
  // Cleanup function
  return () => {
    // Temizlik işlemleri
  };
}, [dependencies]);
\`\`\`

## 🔧 Cleanup Function Kullanım Senaryoları

### **1. Timer Cleanup:**
\`\`\`javascript
const Timer = () => {
  const [seconds, setSeconds] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  
  useEffect(() => {
    let interval = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(prev => prev + 1);
      }, 1000);
    }
    
    // Cleanup function: Timer'ı temizle
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning]);
  
  return (
    <div>
      <h2>Timer: {seconds}s</h2>
      <button onClick={() => setIsRunning(!isRunning)}>
        {isRunning ? 'Stop' : 'Start'}
      </button>
      <button onClick={() => setSeconds(0)}>Reset</button>
    </div>
  );
};
\`\`\`

### **2. Event Listener Cleanup:**
\`\`\`javascript
const ScrollToTop = () => {
  const [isVisible, setIsVisible] = useState(false);
  
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset;
      setIsVisible(scrollTop > 300);
    };
    
    // Event listener ekle
    window.addEventListener('scroll', handleScroll);
    
    // Cleanup function: Event listener'ı kaldır
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []); // Sadece mount'ta çalışır
  
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };
  
  return (
    <div>
      {isVisible && (
        <button
          onClick={scrollToTop}
          style={{
            position: 'fixed',
            bottom: '20px',
            right: '20px',
            padding: '10px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '50%',
            cursor: 'pointer'
          }}
        >
          ↑
        </button>
      )}
    </div>
  );
};
\`\`\`

### **3. WebSocket Cleanup:**
\`\`\`javascript
const ChatRoom = ({ roomId }) => {
  const [messages, setMessages] = useState([]);
  const [isConnected, setIsConnected] = useState(false);
  const [socket, setSocket] = useState(null);
  
  useEffect(() => {
    // WebSocket bağlantısı kur
    const newSocket = new WebSocket(\`ws://localhost:8080/chat/\${roomId}\`);
    
    newSocket.onopen = () => {
      setIsConnected(true);
      console.log('Connected to chat room:', roomId);
    };
    
    newSocket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      setMessages(prev => [...prev, message]);
    };
    
    newSocket.onclose = () => {
      setIsConnected(false);
      console.log('Disconnected from chat room');
    };
    
    newSocket.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
    
    setSocket(newSocket);
    
    // Cleanup function: WebSocket bağlantısını kapat
    return () => {
      newSocket.close();
    };
  }, [roomId]); // roomId değiştiğinde yeni bağlantı kur
  
  const sendMessage = (text) => {
    if (socket && isConnected) {
      socket.send(JSON.stringify({
        text,
        timestamp: new Date().toISOString()
      }));
    }
  };
  
  return (
    <div>
      <h2>Chat Room: {roomId}</h2>
      <p>Status: {isConnected ? 'Connected' : 'Disconnected'}</p>
      
      <div style={{ height: '300px', overflow: 'auto', border: '1px solid #ccc', padding: '10px' }}>
        {messages.map((message, index) => (
          <div key={index} style={{ marginBottom: '10px' }}>
            <strong>{message.user}:</strong> {message.text}
            <small style={{ color: '#666', marginLeft: '10px' }}>
              {new Date(message.timestamp).toLocaleTimeString()}
            </small>
          </div>
        ))}
      </div>
      
      <div style={{ marginTop: '10px' }}>
        <input
          type="text"
          placeholder="Type a message..."
          onKeyPress={(e) => {
            if (e.key === 'Enter' && e.target.value.trim()) {
              sendMessage(e.target.value);
              e.target.value = '';
            }
          }}
          disabled={!isConnected}
        />
      </div>
    </div>
  );
};
\`\`\`

### **4. API Request Cleanup:**
\`\`\`javascript
const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchUser = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetch(\`/api/users/\${userId}\`);
        
        if (!response.ok) {
          throw new Error(\`HTTP error! status: \${response.status}\`);
        }
        
        const userData = await response.json();
        
        // Component hala mount edilmiş mi kontrol et
        if (isMounted) {
          setUser(userData);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchUser();
    
    // Cleanup function: Component unmount olduğunda
    return () => {
      isMounted = false;
    };
  }, [userId]);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!user) return <div>User not found</div>;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
};
\`\`\`

### **5. Multiple Event Listeners Cleanup:**
\`\`\`javascript
const KeyboardShortcuts = () => {
  const [shortcuts, setShortcuts] = useState([]);
  
  useEffect(() => {
    const handleKeyDown = (event) => {
      // Ctrl + S
      if (event.ctrlKey && event.key === 's') {
        event.preventDefault();
        setShortcuts(prev => [...prev, 'Save (Ctrl+S)']);
      }
      
      // Ctrl + Z
      if (event.ctrlKey && event.key === 'z') {
        event.preventDefault();
        setShortcuts(prev => [...prev, 'Undo (Ctrl+Z)']);
      }
      
      // Escape
      if (event.key === 'Escape') {
        setShortcuts(prev => [...prev, 'Escape pressed']);
      }
    };
    
    const handleResize = () => {
      setShortcuts(prev => [...prev, \`Window resized: \${window.innerWidth}x\${window.innerHeight}\`]);
    };
    
    const handleVisibilityChange = () => {
      setShortcuts(prev => [...prev, \`Page visibility: \${document.hidden ? 'hidden' : 'visible'}\`]);
    };
    
    // Event listeners ekle
    document.addEventListener('keydown', handleKeyDown);
    window.addEventListener('resize', handleResize);
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    // Cleanup function: Tüm event listeners'ı kaldır
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('resize', handleResize);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, []); // Sadece mount'ta çalışır
  
  return (
    <div>
      <h2>Keyboard Shortcuts</h2>
      <p>Try: Ctrl+S, Ctrl+Z, Escape, Resize window, Switch tabs</p>
      
      <div style={{ height: '200px', overflow: 'auto', border: '1px solid #ccc', padding: '10px' }}>
        {shortcuts.map((shortcut, index) => (
          <div key={index} style={{ marginBottom: '5px' }}>
            {shortcut}
          </div>
        ))}
      </div>
      
      <button onClick={() => setShortcuts([])}>Clear</button>
    </div>
  );
};
\`\`\`

### **6. Subscription Cleanup:**
\`\`\`javascript
const NotificationCenter = ({ userId }) => {
  const [notifications, setNotifications] = useState([]);
  const [isConnected, setIsConnected] = useState(false);
  
  useEffect(() => {
    // WebSocket subscription
    const socket = new WebSocket(\`ws://localhost:8080/notifications/\${userId}\`);
    
    socket.onopen = () => {
      setIsConnected(true);
    };
    
    socket.onmessage = (event) => {
      const notification = JSON.parse(event.data);
      setNotifications(prev => [...prev, notification]);
    };
    
    socket.onclose = () => {
      setIsConnected(false);
    };
    
    // Polling subscription (fallback)
    const pollInterval = setInterval(async () => {
      try {
        const response = await fetch(\`/api/notifications/\${userId}\`);
        const data = await response.json();
        
        if (data.notifications.length > 0) {
          setNotifications(prev => [...prev, ...data.notifications]);
        }
      } catch (error) {
        console.error('Polling error:', error);
      }
    }, 30000); // 30 saniyede bir
    
    // Cleanup function: Tüm subscriptions'ı temizle
    return () => {
      socket.close();
      clearInterval(pollInterval);
    };
  }, [userId]);
  
  return (
    <div>
      <h2>Notifications</h2>
      <p>Status: {isConnected ? 'Connected' : 'Disconnected'}</p>
      
      <div style={{ height: '300px', overflow: 'auto', border: '1px solid #ccc', padding: '10px' }}>
        {notifications.map((notification, index) => (
          <div key={index} style={{ marginBottom: '10px', padding: '10px', backgroundColor: '#f5f5f5' }}>
            <strong>{notification.title}</strong>
            <p>{notification.message}</p>
            <small>{new Date(notification.timestamp).toLocaleString()}</small>
          </div>
        ))}
      </div>
      
      <button onClick={() => setNotifications([])}>Clear All</button>
    </div>
  );
};
\`\`\`

### **7. Animation Cleanup:**
\`\`\`javascript
const AnimatedCounter = ({ targetValue, duration = 1000 }) => {
  const [currentValue, setCurrentValue] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  
  useEffect(() => {
    if (targetValue === currentValue) return;
    
    setIsAnimating(true);
    
    const startValue = currentValue;
    const difference = targetValue - startValue;
    const startTime = Date.now();
    
    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Easing function (ease-out)
      const easeOut = 1 - Math.pow(1 - progress, 3);
      
      const newValue = startValue + (difference * easeOut);
      setCurrentValue(Math.round(newValue));
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        setIsAnimating(false);
      }
    };
    
    const animationId = requestAnimationFrame(animate);
    
    // Cleanup function: Animation'ı iptal et
    return () => {
      cancelAnimationFrame(animationId);
      setIsAnimating(false);
    };
  }, [targetValue, duration]);
  
  return (
    <div>
      <h2>Animated Counter</h2>
      <div style={{ fontSize: '2em', fontWeight: 'bold' }}>
        {currentValue}
      </div>
      <p>Status: {isAnimating ? 'Animating' : 'Stopped'}</p>
      
      <div>
        <button onClick={() => setTargetValue(Math.floor(Math.random() * 1000))}>
          Random Value
        </button>
        <button onClick={() => setTargetValue(0)}>Reset</button>
      </div>
    </div>
  );
};
\`\`\`

### **8. Custom Hook with Cleanup:**
\`\`\`javascript
const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error('Error reading localStorage:', error);
      return initialValue;
    }
  });
  
  const setValue = (value) => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  };
  
  return [storedValue, setValue];
};

const useWindowSize = () => {
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });
  
  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    
    window.addEventListener('resize', handleResize);
    
    // Cleanup function: Event listener'ı kaldır
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []); // Sadece mount'ta çalışır
  
  return windowSize;
};

const useOnlineStatus = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Cleanup function: Event listeners'ı kaldır
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []); // Sadece mount'ta çalışır
  
  return isOnline;
};

const App = () => {
  const [theme, setTheme] = useLocalStorage('theme', 'light');
  const windowSize = useWindowSize();
  const isOnline = useOnlineStatus();
  
  return (
    <div>
      <h2>Custom Hooks with Cleanup</h2>
      
      <div>
        <label>Theme:</label>
        <select value={theme} onChange={(e) => setTheme(e.target.value)}>
          <option value="light">Light</option>
          <option value="dark">Dark</option>
        </select>
      </div>
      
      <div>
        <p>Window Size: {windowSize.width} x {windowSize.height}</p>
        <p>Online Status: {isOnline ? 'Online' : 'Offline'}</p>
      </div>
    </div>
  );
};
\`\`\`

### **9. Complex Cleanup with Multiple Resources:**
\`\`\`javascript
const DataVisualization = ({ dataSource, refreshInterval = 5000 }) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    let intervalId = null;
    let abortController = null;
    
    const fetchData = async () => {
      if (!isMounted) return;
      
      try {
        setLoading(true);
        setError(null);
        
        // AbortController ile request'i iptal edebilme
        abortController = new AbortController();
        
        const response = await fetch(\`/api/data/\${dataSource}\`, {
          signal: abortController.signal
        });
        
        if (!response.ok) {
          throw new Error(\`HTTP error! status: \${response.status}\`);
        }
        
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted && err.name !== 'AbortError') {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    // İlk veri çekme
    fetchData();
    
    // Periyodik veri çekme
    if (refreshInterval > 0) {
      intervalId = setInterval(fetchData, refreshInterval);
    }
    
    // Cleanup function: Tüm kaynakları temizle
    return () => {
      isMounted = false;
      
      if (intervalId) {
        clearInterval(intervalId);
      }
      
      if (abortController) {
        abortController.abort();
      }
    };
  }, [dataSource, refreshInterval]);
  
  return (
    <div>
      <h2>Data Visualization</h2>
      <p>Source: {dataSource}</p>
      <p>Refresh Interval: {refreshInterval}ms</p>
      
      {loading && <div>Loading...</div>}
      {error && <div>Error: {error}</div>}
      
      <div style={{ height: '300px', overflow: 'auto', border: '1px solid #ccc', padding: '10px' }}>
        {data.map((item, index) => (
          <div key={index} style={{ marginBottom: '10px' }}>
            {JSON.stringify(item, null, 2)}
          </div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

### **10. Memory Leak Prevention:**
\`\`\`javascript
const MemoryLeakExample = () => {
  const [count, setCount] = useState(0);
  const [data, setData] = useState([]);
  
  useEffect(() => {
    // YANLIŞ: Memory leak'e neden olur
    // const interval = setInterval(() => {
    //   setCount(prev => prev + 1);
    // }, 1000);
    
    // DOĞRU: Cleanup function ile
    const interval = setInterval(() => {
      setCount(prev => prev + 1);
    }, 1000);
    
    // Cleanup function: Memory leak'i önler
    return () => {
      clearInterval(interval);
    };
  }, []);
  
  useEffect(() => {
    // YANLIŞ: Event listener temizlenmez
    // window.addEventListener('scroll', () => {
    //   setData(prev => [...prev, Math.random()]);
    // });
    
    // DOĞRU: Cleanup function ile
    const handleScroll = () => {
      setData(prev => [...prev, Math.random()]);
    };
    
    window.addEventListener('scroll', handleScroll);
    
    // Cleanup function: Event listener'ı kaldır
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);
  
  return (
    <div>
      <h2>Memory Leak Prevention</h2>
      <p>Count: {count}</p>
      <p>Data items: {data.length}</p>
      
      <button onClick={() => setData([])}>Clear Data</button>
    </div>
  );
};
\`\`\`

## 🎨 Cleanup Function Best Practices

### **11. Cleanup Function Patterns:**
\`\`\`javascript
// Pattern 1: Simple cleanup
useEffect(() => {
  const timer = setTimeout(() => {
    // Do something
  }, 1000);
  
  return () => clearTimeout(timer);
}, []);

// Pattern 2: Multiple resources
useEffect(() => {
  const timer1 = setTimeout(() => {}, 1000);
  const timer2 = setInterval(() => {}, 1000);
  const listener = () => {};
  
  window.addEventListener('resize', listener);
  
  return () => {
    clearTimeout(timer1);
    clearInterval(timer2);
    window.removeEventListener('resize', listener);
  };
}, []);

// Pattern 3: Conditional cleanup
useEffect(() => {
  let cleanup = null;
  
  if (condition) {
    const resource = createResource();
    cleanup = () => resource.destroy();
  }
  
  return cleanup;
}, [condition]);
\`\`\`

### **12. Common Cleanup Mistakes:**
\`\`\`javascript
// YANLIŞ: Cleanup function yok
useEffect(() => {
  const interval = setInterval(() => {
    setCount(prev => prev + 1);
  }, 1000);
  // Cleanup function yok - memory leak!
}, []);

// YANLIŞ: Yanlış cleanup
useEffect(() => {
  const interval = setInterval(() => {
    setCount(prev => prev + 1);
  }, 1000);
  
  return () => {
    clearTimeout(interval); // Yanlış! clearInterval olmalı
  };
}, []);

// DOĞRU: Doğru cleanup
useEffect(() => {
  const interval = setInterval(() => {
    setCount(prev => prev + 1);
  }, 1000);
  
  return () => {
    clearInterval(interval); // Doğru!
  };
}, []);
\`\`\`

## 🎯 Cleanup Function Özet

### **Cleanup Function Kuralları:**

1. **Her useEffect'te cleanup** - Gerektiğinde cleanup function ekle
2. **Resource temizliği** - Timer, event listener, subscription'ları temizle
3. **Memory leak önleme** - Unmount edilen component'lerin kaynaklarını serbest bırak
4. **Conditional cleanup** - Koşullu kaynaklar için conditional cleanup
5. **Multiple resources** - Birden fazla kaynak için tümünü temizle

### **Cleanup Function Avantajları:**
- ✅ **Memory leak önleme** - Bellek sızıntılarını önler
- ✅ **Resource management** - Kaynakları doğru yönetir
- ✅ **Performance** - Gereksiz işlemleri durdurur
- ✅ **Stability** - Uygulama kararlılığını artırır

### **Cleanup Function Dikkat Edilecekler:**
- ⚠️ **Timer cleanup** - setInterval, setTimeout temizle
- ⚠️ **Event listener cleanup** - addEventListener'ları kaldır
- ⚠️ **Subscription cleanup** - WebSocket, polling temizle
- ⚠️ **Animation cleanup** - requestAnimationFrame iptal et

useEffect cleanup function'ı, React uygulamalarında memory leak'leri önlemek ve kaynakları doğru yönetmek için kritik öneme sahiptir.`,
            codeExamples: [
              {
                id: 'useeffect-cleanup-examples',
                title: 'useEffect Cleanup Örnekleri',
                code: `// Timer cleanup
useEffect(() => {
  const interval = setInterval(() => {
    setCount(prev => prev + 1);
  }, 1000);
  
  return () => {
    clearInterval(interval);
  };
}, []);

// Event listener cleanup
useEffect(() => {
  const handleScroll = () => {
    setScrollY(window.pageYOffset);
  };
  
  window.addEventListener('scroll', handleScroll);
  
  return () => {
    window.removeEventListener('scroll', handleScroll);
  };
}, []);

// WebSocket cleanup
useEffect(() => {
  const socket = new WebSocket('ws://localhost:8080');
  
  socket.onmessage = (event) => {
    setMessage(event.data);
  };
  
  return () => {
    socket.close();
  };
}, []);

// API request cleanup
useEffect(() => {
  let isMounted = true;
  
  const fetchData = async () => {
    try {
      const response = await fetch('/api/data');
      const data = await response.json();
      
      if (isMounted) {
        setData(data);
      }
    } catch (error) {
      if (isMounted) {
        setError(error.message);
      }
    }
  };
  
  fetchData();
  
  return () => {
    isMounted = false;
  };
}, []);

// Multiple resources cleanup
useEffect(() => {
  const timer1 = setTimeout(() => {}, 1000);
  const timer2 = setInterval(() => {}, 1000);
  const listener = () => {};
  
  window.addEventListener('resize', listener);
  
  return () => {
    clearTimeout(timer1);
    clearInterval(timer2);
    window.removeEventListener('resize', listener);
  };
}, []);

// Custom hook with cleanup
const useWindowSize = () => {
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });
  
  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    
    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  return windowSize;
};`,
                language: 'javascript',
                description: 'useEffect cleanup function örnekleri'
              }
            ],
            relatedProjects: ['timer-app', 'chat-app', 'data-fetcher'],
            resources: [
              {
                id: 'react-useeffect-cleanup',
                title: 'React useEffect Cleanup',
                url: 'https://react.dev/reference/react/useEffect#cleaning-up-an-effect',
                type: 'documentation'
              }
            ]
          },
          {
            id: 'useeffect-ozet',
            title: 'useEffect Özet',
            description: 'useEffect hook\'unun genel özeti ve best practices',
            duration: '4 dakika',
            difficulty: 'easy',
            content: `# useEffect Özet 📋

useEffect hook'u, React'te side effects'leri yönetmek için kullanılan en önemli hook'lardan biridir. Bu özet, useEffect'in tüm özelliklerini ve kullanım kurallarını kapsar.

## 🎯 useEffect Nedir?

### **useEffect Tanımı:**
useEffect, React component'lerinde side effects'leri (yan etkileri) yönetmek için kullanılan bir hook'tur. Component'in lifecycle'ı boyunca çeşitli işlemleri gerçekleştirmenizi sağlar.

### **useEffect Syntax:**
\`\`\`javascript
useEffect(() => {
  // Side effect kodları
  
  // Cleanup function (opsiyonel)
  return () => {
    // Temizlik işlemleri
  };
}, [dependencies]); // Dependency array
\`\`\`

## 🔧 useEffect Kullanım Senaryoları

### **1. Component Mount (İlk Yükleme):**
\`\`\`javascript
useEffect(() => {
  // Sadece component mount olduğunda çalışır
  fetchInitialData();
}, []); // Boş dependency array
\`\`\`

### **2. Dependency Değişiklikleri:**
\`\`\`javascript
useEffect(() => {
  // userId değiştiğinde çalışır
  fetchUserData(userId);
}, [userId]); // userId dependency
\`\`\`

### **3. Her Render'da:**
\`\`\`javascript
useEffect(() => {
  // Her render'da çalışır
  updateDocumentTitle();
}); // Dependency array yok
\`\`\`

## 🧹 Cleanup Function

### **Cleanup Function Kullanımı:**
\`\`\`javascript
useEffect(() => {
  const timer = setInterval(() => {
    setCount(prev => prev + 1);
  }, 1000);
  
  // Cleanup function
  return () => {
    clearInterval(timer);
  };
}, []);
\`\`\`

### **Cleanup Function Ne Zaman Çalışır:**
- Component unmount olduğunda
- Dependency değiştiğinde
- Component re-render olduğunda

## 📋 useEffect Best Practices

### **1. Dependency Array Kuralları:**
\`\`\`javascript
// ✅ Doğru: Boş array - sadece mount'ta çalışır
useEffect(() => {
  fetchData();
}, []);

// ✅ Doğru: Dependency var - değiştiğinde çalışır
useEffect(() => {
  fetchUserData(userId);
}, [userId]);

// ❌ Yanlış: Dependency eksik
useEffect(() => {
  fetchUserData(userId); // userId dependency array'de yok
}, []);
\`\`\`

### **2. Cleanup Function Kuralları:**
\`\`\`javascript
// ✅ Doğru: Timer cleanup
useEffect(() => {
  const timer = setInterval(() => {}, 1000);
  return () => clearInterval(timer);
}, []);

// ✅ Doğru: Event listener cleanup
useEffect(() => {
  const handleScroll = () => {};
  window.addEventListener('scroll', handleScroll);
  return () => window.removeEventListener('scroll', handleScroll);
}, []);

// ❌ Yanlış: Cleanup function yok
useEffect(() => {
  const timer = setInterval(() => {}, 1000);
  // Cleanup function yok - memory leak!
}, []);
\`\`\`

### **3. Multiple useEffect:**
\`\`\`javascript
// ✅ Doğru: Farklı side effects için ayrı useEffect
useEffect(() => {
  // User data
  fetchUserData(userId);
}, [userId]);

useEffect(() => {
  // User posts
  fetchUserPosts(userId);
}, [userId]);

useEffect(() => {
  // Event listener
  const handleResize = () => {};
  window.addEventListener('resize', handleResize);
  return () => window.removeEventListener('resize', handleResize);
}, []);
\`\`\`

### **4. Conditional useEffect:**
\`\`\`javascript
// ✅ Doğru: Koşullu side effect
useEffect(() => {
  if (!enabled) return;
  
  fetchData();
}, [enabled]);
\`\`\`

## 🎨 useEffect Patterns

### **1. Data Fetching Pattern:**
\`\`\`javascript
const useApi = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url]);
  
  return { data, loading, error };
};
\`\`\`

### **2. Event Listener Pattern:**
\`\`\`javascript
const useWindowSize = () => {
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });
  
  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    
    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  return windowSize;
};
\`\`\`

### **3. Timer Pattern:**
\`\`\`javascript
const useTimer = (initialSeconds = 0) => {
  const [seconds, setSeconds] = useState(initialSeconds);
  const [isRunning, setIsRunning] = useState(false);
  
  useEffect(() => {
    let interval = null;
    
    if (isRunning) {
      interval = setInterval(() => {
        setSeconds(prev => prev + 1);
      }, 1000);
    }
    
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning]);
  
  return { seconds, isRunning, setIsRunning };
};
\`\`\`

### **4. Subscription Pattern:**
\`\`\`javascript
const useWebSocket = (url) => {
  const [socket, setSocket] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [messages, setMessages] = useState([]);
  
  useEffect(() => {
    const newSocket = new WebSocket(url);
    
    newSocket.onopen = () => setIsConnected(true);
    newSocket.onclose = () => setIsConnected(false);
    newSocket.onmessage = (event) => {
      setMessages(prev => [...prev, event.data]);
    };
    
    setSocket(newSocket);
    
    return () => {
      newSocket.close();
    };
  }, [url]);
  
  return { socket, isConnected, messages };
};
\`\`\`

## ⚠️ Common Mistakes

### **1. Missing Dependencies:**
\`\`\`javascript
// ❌ Yanlış: userId dependency eksik
useEffect(() => {
  fetchUserData(userId);
}, []); // userId değişse bile çalışmaz

// ✅ Doğru: userId dependency var
useEffect(() => {
  fetchUserData(userId);
}, [userId]);
\`\`\`

### **2. Missing Cleanup:**
\`\`\`javascript
// ❌ Yanlış: Cleanup function yok
useEffect(() => {
  const timer = setInterval(() => {}, 1000);
  // Memory leak!
}, []);

// ✅ Doğru: Cleanup function var
useEffect(() => {
  const timer = setInterval(() => {}, 1000);
  return () => clearInterval(timer);
}, []);
\`\`\`

### **3. Object Dependencies:**
\`\`\`javascript
// ❌ Yanlış: Object dependency
const [filters, setFilters] = useState({ category: 'all' });

useEffect(() => {
  fetchProducts(filters);
}, [filters]); // Her render'da çalışır!

// ✅ Doğru: Object properties
useEffect(() => {
  fetchProducts(filters);
}, [filters.category]);
\`\`\`

### **4. Function Dependencies:**
\`\`\`javascript
// ❌ Yanlış: Function dependency
useEffect(() => {
  fetchData();
}, [fetchData]); // Her render'da çalışır!

// ✅ Doğru: useCallback ile
const fetchData = useCallback(() => {
  // fetch logic
}, []);

useEffect(() => {
  fetchData();
}, [fetchData]);
\`\`\`

## 🎯 useEffect Özet Tablosu

| Senaryo | Dependency Array | Ne Zaman Çalışır |
|---------|------------------|------------------|
| Mount only | \`[]\` | Sadece component mount'ta |
| On change | \`[dep]\` | Dependency değiştiğinde |
| Every render | Yok | Her render'da |
| Conditional | \`[dep]\` + if | Koşul sağlandığında |

## 🎨 useEffect Checklist

### **useEffect Yazarken Kontrol Et:**
- ✅ **Dependencies** - Tüm kullanılan değerler dependency array'de mi?
- ✅ **Cleanup** - Timer, event listener, subscription temizleniyor mu?
- ✅ **Memory leaks** - Component unmount olduğunda kaynaklar serbest bırakılıyor mu?
- ✅ **Performance** - Gereksiz re-render'lar önleniyor mu?
- ✅ **ESLint** - exhaustive-deps kuralı takip ediliyor mu?

### **useEffect Kullanım Kuralları:**
1. **Her useEffect'te cleanup** - Gerektiğinde cleanup function ekle
2. **Dependency array** - Tüm kullanılan değerleri ekle
3. **Multiple useEffect** - Farklı side effects için ayrı useEffect kullan
4. **Conditional effects** - Koşullu side effects için early return kullan
5. **Custom hooks** - Tekrar kullanılabilir logic için custom hook oluştur

## 🎯 Sonuç

useEffect hook'u:
- ✅ **Side effects yönetimi** - Dış dünyayla etkileşimi sağlar
- ✅ **Lifecycle kontrolü** - Component lifecycle'ını yönetir
- ✅ **Memory management** - Kaynakları doğru yönetir
- ✅ **Performance** - Gereksiz işlemleri önler

useEffect, React uygulamalarında side effects'leri yönetmenin en güçlü ve esnek yoludur. Doğru kullanım, performanslı ve kararlı uygulamalar oluşturmanızı sağlar.`,
            codeExamples: [
              {
                id: 'useeffect-summary-examples',
                title: 'useEffect Özet Örnekleri',
                code: `// Mount only
useEffect(() => {
  fetchInitialData();
}, []);

// On dependency change
useEffect(() => {
  fetchUserData(userId);
}, [userId]);

// With cleanup
useEffect(() => {
  const timer = setInterval(() => {
    setCount(prev => prev + 1);
  }, 1000);
  
  return () => clearInterval(timer);
}, []);

// Event listener
useEffect(() => {
  const handleScroll = () => {
    setScrollY(window.pageYOffset);
  };
  
  window.addEventListener('scroll', handleScroll);
  
  return () => {
    window.removeEventListener('scroll', handleScroll);
  };
}, []);

// API request with cleanup
useEffect(() => {
  let isMounted = true;
  
  const fetchData = async () => {
    try {
      const response = await fetch('/api/data');
      const data = await response.json();
      
      if (isMounted) {
        setData(data);
      }
    } catch (error) {
      if (isMounted) {
        setError(error.message);
      }
    }
  };
  
  fetchData();
  
  return () => {
    isMounted = false;
  };
}, []);

// Custom hook pattern
const useApi = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    let isMounted = true;
    
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        const result = await response.json();
        
        if (isMounted) {
          setData(result);
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    fetchData();
    
    return () => {
      isMounted = false;
    };
  }, [url]);
  
  return { data, loading, error };
};`,
                language: 'javascript',
                description: 'useEffect özet örnekleri'
              }
            ],
            relatedProjects: ['timer-app', 'chat-app', 'data-fetcher'],
            resources: [
              {
                id: 'react-useeffect-summary',
                title: 'React useEffect Summary',
                url: 'https://react.dev/reference/react/useEffect',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'usereducer-ile-stage-management',
        name: 'USEREDUCER İLE STAGE MANAGEMENT',
        icon: '🔄',
        description: 'React useReducer hook ile state yönetimi',
        topics: [
          {
            id: 'usereducer-nedir',
            title: 'useReducer Nedir?',
            description: 'React useReducer hook\'unun kullanımı ve özellikleri',
            duration: '4 dakika',
            difficulty: 'medium',
            content: `# useReducer Nedir? 🔄

useReducer, React'te karmaşık state yönetimi için kullanılan bir hook'tur. useState'e alternatif olarak, state güncellemelerini daha öngörülebilir ve yönetilebilir hale getirir.

## 🎯 useReducer Nedir?

### **useReducer Tanımı:**
useReducer, React'te state yönetimi için kullanılan bir hook'tur. Redux pattern'ini takip eder ve state güncellemelerini action'lar aracılığıyla yapar.

### **useReducer Syntax:**
\`\`\`javascript
const [state, dispatch] = useReducer(reducer, initialState);
\`\`\`

## 🔧 useReducer vs useState

### **useState Kullanımı:**
\`\`\`javascript
const Counter = () => {
  const [count, setCount] = useState(0);
  const [step, setStep] = useState(1);
  
  const increment = () => setCount(count + step);
  const decrement = () => setCount(count - step);
  const reset = () => setCount(0);
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <p>Step: {step}</p>
      <button onClick={increment}>+{step}</button>
      <button onClick={decrement}>-{step}</button>
      <button onClick={reset}>Reset</button>
      <input 
        type="number" 
        value={step} 
        onChange={(e) => setStep(Number(e.target.value))} 
      />
    </div>
  );
};
\`\`\`

### **useReducer Kullanımı:**
\`\`\`javascript
const initialState = {
  count: 0,
  step: 1
};

const reducer = (state, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + state.step };
    case 'DECREMENT':
      return { ...state, count: state.count - state.step };
    case 'RESET':
      return { ...state, count: 0 };
    case 'SET_STEP':
      return { ...state, step: action.payload };
    default:
      return state;
  }
};

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, initialState);
  
  return (
    <div>
      <h2>Count: {state.count}</h2>
      <p>Step: {state.step}</p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>
        +{state.step}
      </button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>
        -{state.step}
      </button>
      <button onClick={() => dispatch({ type: 'RESET' })}>Reset</button>
      <input 
        type="number" 
        value={state.step} 
        onChange={(e) => dispatch({ 
          type: 'SET_STEP', 
          payload: Number(e.target.value) 
        })} 
      />
    </div>
  );
};
\`\`\`

## 🎨 useReducer Kullanım Senaryoları

### **1. Form State Management:**
\`\`\`javascript
const initialFormState = {
  name: '',
  email: '',
  age: '',
  errors: {},
  isSubmitting: false
};

const formReducer = (state, action) => {
  switch (action.type) {
    case 'SET_FIELD':
      return {
        ...state,
        [action.field]: action.value,
        errors: { ...state.errors, [action.field]: '' }
      };
    case 'SET_ERRORS':
      return { ...state, errors: action.errors };
    case 'SET_SUBMITTING':
      return { ...state, isSubmitting: action.isSubmitting };
    case 'RESET_FORM':
      return initialFormState;
    default:
      return state;
  }
};

const ContactForm = () => {
  const [formState, dispatch] = useReducer(formReducer, initialFormState);
  
  const handleInputChange = (field, value) => {
    dispatch({ type: 'SET_FIELD', field, value });
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    dispatch({ type: 'SET_SUBMITTING', isSubmitting: true });
    
    try {
      // Form validation
      const errors = {};
      if (!formState.name) errors.name = 'Name is required';
      if (!formState.email) errors.email = 'Email is required';
      if (!formState.age) errors.age = 'Age is required';
      
      if (Object.keys(errors).length > 0) {
        dispatch({ type: 'SET_ERRORS', errors });
        return;
      }
      
      // Submit form
      await submitForm(formState);
      dispatch({ type: 'RESET_FORM' });
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      dispatch({ type: 'SET_SUBMITTING', isSubmitting: false });
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <div>
        <input
          type="text"
          placeholder="Name"
          value={formState.name}
          onChange={(e) => handleInputChange('name', e.target.value)}
        />
        {formState.errors.name && <span>{formState.errors.name}</span>}
      </div>
      
      <div>
        <input
          type="email"
          placeholder="Email"
          value={formState.email}
          onChange={(e) => handleInputChange('email', e.target.value)}
        />
        {formState.errors.email && <span>{formState.errors.email}</span>}
      </div>
      
      <div>
        <input
          type="number"
          placeholder="Age"
          value={formState.age}
          onChange={(e) => handleInputChange('age', e.target.value)}
        />
        {formState.errors.age && <span>{formState.errors.age}</span>}
      </div>
      
      <button type="submit" disabled={formState.isSubmitting}>
        {formState.isSubmitting ? 'Submitting...' : 'Submit'}
      </button>
    </form>
  );
};
\`\`\`

### **2. Todo List with useReducer:**
\`\`\`javascript
const initialTodoState = {
  todos: [],
  filter: 'all',
  newTodo: ''
};

const todoReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_TODO':
      return {
        ...state,
        todos: [...state.todos, {
          id: Date.now(),
          text: state.newTodo,
          completed: false
        }],
        newTodo: ''
      };
    case 'TOGGLE_TODO':
      return {
        ...state,
        todos: state.todos.map(todo =>
          todo.id === action.id
            ? { ...todo, completed: !todo.completed }
            : todo
        )
      };
    case 'DELETE_TODO':
      return {
        ...state,
        todos: state.todos.filter(todo => todo.id !== action.id)
      };
    case 'SET_FILTER':
      return { ...state, filter: action.filter };
    case 'SET_NEW_TODO':
      return { ...state, newTodo: action.text };
    case 'CLEAR_COMPLETED':
      return {
        ...state,
        todos: state.todos.filter(todo => !todo.completed)
      };
    default:
      return state;
  }
};

const TodoApp = () => {
  const [state, dispatch] = useReducer(todoReducer, initialTodoState);
  
  const filteredTodos = state.todos.filter(todo => {
    if (state.filter === 'active') return !todo.completed;
    if (state.filter === 'completed') return todo.completed;
    return true;
  });
  
  return (
    <div>
      <h2>Todo App</h2>
      
      <div>
        <input
          type="text"
          value={state.newTodo}
          onChange={(e) => dispatch({ type: 'SET_NEW_TODO', text: e.target.value })}
          onKeyPress={(e) => {
            if (e.key === 'Enter' && state.newTodo.trim()) {
              dispatch({ type: 'ADD_TODO' });
            }
          }}
          placeholder="Add a new todo"
        />
        <button 
          onClick={() => dispatch({ type: 'ADD_TODO' })}
          disabled={!state.newTodo.trim()}
        >
          Add
        </button>
      </div>
      
      <div>
        <button 
          onClick={() => dispatch({ type: 'SET_FILTER', filter: 'all' })}
          className={state.filter === 'all' ? 'active' : ''}
        >
          All
        </button>
        <button 
          onClick={() => dispatch({ type: 'SET_FILTER', filter: 'active' })}
          className={state.filter === 'active' ? 'active' : ''}
        >
          Active
        </button>
        <button 
          onClick={() => dispatch({ type: 'SET_FILTER', filter: 'completed' })}
          className={state.filter === 'completed' ? 'active' : ''}
        >
          Completed
        </button>
      </div>
      
      <ul>
        {filteredTodos.map(todo => (
          <li key={todo.id}>
            <input
              type="checkbox"
              checked={todo.completed}
              onChange={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}
            />
            <span style={{ 
              textDecoration: todo.completed ? 'line-through' : 'none' 
            }}>
              {todo.text}
            </span>
            <button onClick={() => dispatch({ type: 'DELETE_TODO', id: todo.id })}>
              Delete
            </button>
          </li>
        ))}
      </ul>
      
      <button onClick={() => dispatch({ type: 'CLEAR_COMPLETED' })}>
        Clear Completed
      </button>
    </div>
  );
};
\`\`\`

### **3. Shopping Cart with useReducer:**
\`\`\`javascript
const initialCartState = {
  items: [],
  total: 0,
  isOpen: false
};

const cartReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_ITEM':
      const existingItem = state.items.find(item => item.id === action.item.id);
      
      if (existingItem) {
        return {
          ...state,
          items: state.items.map(item =>
            item.id === action.item.id
              ? { ...item, quantity: item.quantity + 1 }
              : item
          ),
          total: state.total + action.item.price
        };
      }
      
      return {
        ...state,
        items: [...state.items, { ...action.item, quantity: 1 }],
        total: state.total + action.item.price
      };
      
    case 'REMOVE_ITEM':
      return {
        ...state,
        items: state.items.filter(item => item.id !== action.id),
        total: state.items
          .filter(item => item.id !== action.id)
          .reduce((sum, item) => sum + (item.price * item.quantity), 0)
      };
      
    case 'UPDATE_QUANTITY':
      return {
        ...state,
        items: state.items.map(item =>
          item.id === action.id
            ? { ...item, quantity: action.quantity }
            : item
        ),
        total: state.items
          .map(item =>
            item.id === action.id
              ? { ...item, quantity: action.quantity }
              : item
          )
          .reduce((sum, item) => sum + (item.price * item.quantity), 0)
      };
      
    case 'CLEAR_CART':
      return { ...state, items: [], total: 0 };
      
    case 'TOGGLE_CART':
      return { ...state, isOpen: !state.isOpen };
      
    default:
      return state;
  }
};

const ShoppingCart = () => {
  const [cartState, dispatch] = useReducer(cartReducer, initialCartState);
  
  const products = [
    { id: 1, name: 'Laptop', price: 999 },
    { id: 2, name: 'Mouse', price: 25 },
    { id: 3, name: 'Keyboard', price: 75 }
  ];
  
  return (
    <div>
      <h2>Shopping Cart</h2>
      
      <button onClick={() => dispatch({ type: 'TOGGLE_CART' })}>
        Cart ({cartState.items.length})
      </button>
      
      {cartState.isOpen && (
        <div>
          <h3>Cart Items</h3>
          {cartState.items.map(item => (
            <div key={item.id}>
              <span>{item.name} - ${item.price}</span>
              <input
                type="number"
                value={item.quantity}
                onChange={(e) => dispatch({
                  type: 'UPDATE_QUANTITY',
                  id: item.id,
                  quantity: Number(e.target.value)
                })}
                min="1"
              />
              <button onClick={() => dispatch({ type: 'REMOVE_ITEM', id: item.id })}>
                Remove
              </button>
            </div>
          ))}
          <p>Total: ${cartState.total}</p>
          <button onClick={() => dispatch({ type: 'CLEAR_CART' })}>
            Clear Cart
          </button>
        </div>
      )}
      
      <div>
        <h3>Products</h3>
        {products.map(product => (
          <div key={product.id}>
            <span>{product.name} - ${product.price}</span>
            <button onClick={() => dispatch({ type: 'ADD_ITEM', item: product })}>
              Add to Cart
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

## 🎯 useReducer Avantajları

### **1. Öngörülebilir State Updates:**
- State güncellemeleri action'lar aracılığıyla yapılır
- Her state değişikliği trace edilebilir
- Debug etmesi daha kolay

### **2. Karmaşık State Logic:**
- Birden fazla state değeri tek reducer'da yönetilebilir
- State güncellemeleri merkezi bir yerde toplanır
- State logic'i component'ten ayrılır

### **3. Performance:**
- useCallback ile dispatch fonksiyonu optimize edilebilir
- Gereksiz re-render'lar önlenebilir
- State güncellemeleri batch'lenebilir

## 🎨 useReducer Best Practices

### **1. Action Types:**
\`\`\`javascript
// Action types'ları constants olarak tanımla
const ACTION_TYPES = {
  ADD_TODO: 'ADD_TODO',
  TOGGLE_TODO: 'TOGGLE_TODO',
  DELETE_TODO: 'DELETE_TODO',
  SET_FILTER: 'SET_FILTER'
};

const todoReducer = (state, action) => {
  switch (action.type) {
    case ACTION_TYPES.ADD_TODO:
      // ...
    case ACTION_TYPES.TOGGLE_TODO:
      // ...
    default:
      return state;
  }
};
\`\`\`

### **2. Action Creators:**
\`\`\`javascript
// Action creator fonksiyonları
const addTodo = (text) => ({
  type: 'ADD_TODO',
  payload: { text, id: Date.now() }
});

const toggleTodo = (id) => ({
  type: 'TOGGLE_TODO',
  payload: { id }
});

// Kullanım
dispatch(addTodo('Learn React'));
dispatch(toggleTodo(123));
\`\`\`

### **3. Immutable Updates:**
\`\`\`javascript
// ✅ Doğru: Immutable update
const reducer = (state, action) => {
  switch (action.type) {
    case 'UPDATE_USER':
      return {
        ...state,
        user: {
          ...state.user,
          name: action.payload.name
        }
      };
    default:
      return state;
  }
};

// ❌ Yanlış: Mutable update
const reducer = (state, action) => {
  switch (action.type) {
    case 'UPDATE_USER':
      state.user.name = action.payload.name; // Yanlış!
      return state;
    default:
      return state;
  }
};
\`\`\`

## 🎯 useReducer Ne Zaman Kullanılır?

### **useReducer Kullan:**
- ✅ Karmaşık state logic
- ✅ Birden fazla state değeri
- ✅ State güncellemeleri birbirine bağlı
- ✅ Öngörülebilir state updates gerekli

### **useState Kullan:**
- ✅ Basit state değerleri
- ✅ Tek state değeri
- ✅ State güncellemeleri bağımsız
- ✅ Hızlı prototipleme

## 🎯 Sonuç

useReducer hook'u:
- ✅ **Karmaşık state yönetimi** - Birden fazla state değerini yönetir
- ✅ **Öngörülebilir updates** - Action'lar aracılığıyla state güncellemeleri
- ✅ **Merkezi logic** - State logic'i tek yerde toplanır
- ✅ **Debug kolaylığı** - State değişiklikleri trace edilebilir

useReducer, karmaşık state yönetimi gerektiren uygulamalarda useState'e göre daha güçlü ve esnek bir çözümdür.`,
            codeExamples: [
              {
                id: 'usereducer-examples',
                title: 'useReducer Örnekleri',
                code: `// Basic useReducer
const initialState = { count: 0 };

const reducer = (state, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    case 'RESET':
      return { count: 0 };
    default:
      return state;
  }
};

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, initialState);
  
  return (
    <div>
      <h2>Count: {state.count}</h2>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>
      <button onClick={() => dispatch({ type: 'RESET' })}>Reset</button>
    </div>
  );
};

// Form with useReducer
const initialFormState = {
  name: '',
  email: '',
  errors: {}
};

const formReducer = (state, action) => {
  switch (action.type) {
    case 'SET_FIELD':
      return {
        ...state,
        [action.field]: action.value,
        errors: { ...state.errors, [action.field]: '' }
      };
    case 'SET_ERRORS':
      return { ...state, errors: action.errors };
    case 'RESET_FORM':
      return initialFormState;
    default:
      return state;
  }
};

const ContactForm = () => {
  const [formState, dispatch] = useReducer(formReducer, initialFormState);
  
  const handleInputChange = (field, value) => {
    dispatch({ type: 'SET_FIELD', field, value });
  };
  
  return (
    <form>
      <input
        type="text"
        value={formState.name}
        onChange={(e) => handleInputChange('name', e.target.value)}
        placeholder="Name"
      />
      <input
        type="email"
        value={formState.email}
        onChange={(e) => handleInputChange('email', e.target.value)}
        placeholder="Email"
      />
      <button type="submit">Submit</button>
    </form>
  );
};

// Todo List with useReducer
const initialTodoState = {
  todos: [],
  filter: 'all'
};

const todoReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_TODO':
      return {
        ...state,
        todos: [...state.todos, {
          id: Date.now(),
          text: action.text,
          completed: false
        }]
      };
    case 'TOGGLE_TODO':
      return {
        ...state,
        todos: state.todos.map(todo =>
          todo.id === action.id
            ? { ...todo, completed: !todo.completed }
            : todo
        )
      };
    case 'DELETE_TODO':
      return {
        ...state,
        todos: state.todos.filter(todo => todo.id !== action.id)
      };
    case 'SET_FILTER':
      return { ...state, filter: action.filter };
    default:
      return state;
  }
};

const TodoApp = () => {
  const [state, dispatch] = useReducer(todoReducer, initialTodoState);
  
  return (
    <div>
      <input
        type="text"
        onKeyPress={(e) => {
          if (e.key === 'Enter') {
            dispatch({ type: 'ADD_TODO', text: e.target.value });
            e.target.value = '';
          }
        }}
        placeholder="Add todo"
      />
      
      <div>
        <button onClick={() => dispatch({ type: 'SET_FILTER', filter: 'all' })}>
          All
        </button>
        <button onClick={() => dispatch({ type: 'SET_FILTER', filter: 'active' })}>
          Active
        </button>
        <button onClick={() => dispatch({ type: 'SET_FILTER', filter: 'completed' })}>
          Completed
        </button>
      </div>
      
      <ul>
        {state.todos.map(todo => (
          <li key={todo.id}>
            <input
              type="checkbox"
              checked={todo.completed}
              onChange={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}
            />
            <span>{todo.text}</span>
            <button onClick={() => dispatch({ type: 'DELETE_TODO', id: todo.id })}>
              Delete
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};`,
                language: 'javascript',
                description: 'React useReducer hook örnekleri'
              }
            ],
            relatedProjects: ['todo-app', 'shopping-cart', 'form-app'],
            resources: [
              {
                id: 'react-usereducer',
                title: 'React useReducer Hook',
                url: 'https://react.dev/reference/react/useReducer',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'context-api-ve-usecontext-hook-ile-state-yonetimi',
        name: 'CONTEXT API VE USECONTEXT HOOK İLE STATE YÖNETİMİ',
        icon: '🌐',
        description: 'React Context API ve useContext hook ile global state yönetimi',
        topics: [
          {
            id: 'global-state-management',
            title: 'Global State Management',
            description: 'React uygulamalarında global state yönetimi kavramları',
            duration: '8 dakika',
            difficulty: 'medium',
            content: `# Global State Management 🌐

React uygulamalarında state yönetimi, component'ler arasında veri paylaşımı için kritik öneme sahiptir. Global state management, uygulamanın farklı bölümlerinde kullanılan verilerin merkezi olarak yönetilmesini sağlar.

## 🎯 Global State Nedir?

### **Global State Tanımı:**
Global state, uygulamanın birden fazla component'i tarafından erişilebilen ve paylaşılan state'tir. Bu state, uygulamanın farklı bölümlerinde tutarlılık sağlar.

### **Local vs Global State:**
\`\`\`javascript
// Local State - Sadece component içinde
const LocalComponent = () => {
  const [count, setCount] = useState(0); // Local state
  return <div>{count}</div>;
};

// Global State - Tüm uygulamada erişilebilir
const GlobalState = {
  user: { name: 'John', email: 'john@example.com' },
  theme: 'dark',
  language: 'tr'
};
\`\`\`

## 🔧 Global State Yönetim Yöntemleri

### **1. Props Drilling:**
\`\`\`javascript
// ❌ Props Drilling - Kötü yaklaşım
const App = () => {
  const [user, setUser] = useState({ name: 'John' });
  
  return <Header user={user} setUser={setUser} />;
};

const Header = ({ user, setUser }) => {
  return <Navigation user={user} setUser={setUser} />;
};

const Navigation = ({ user, setUser }) => {
  return <UserProfile user={user} setUser={setUser} />;
};

const UserProfile = ({ user, setUser }) => {
  return <div>{user.name}</div>;
};
\`\`\`

### **2. Context API:**
\`\`\`javascript
// ✅ Context API - İyi yaklaşım
const UserContext = createContext();

const UserProvider = ({ children }) => {
  const [user, setUser] = useState({ name: 'John' });
  
  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

const App = () => {
  return (
    <UserProvider>
      <Header />
    </UserProvider>
  );
};

const Header = () => {
  return <Navigation />;
};

const Navigation = () => {
  return <UserProfile />;
};

const UserProfile = () => {
  const { user } = useContext(UserContext);
  return <div>{user.name}</div>;
};
\`\`\`

## 🎨 Global State Kullanım Senaryoları

### **1. User Authentication:**
\`\`\`javascript
const AuthContext = createContext();

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    // Check if user is logged in
    const checkAuth = async () => {
      try {
        const token = localStorage.getItem('token');
        if (token) {
          const response = await fetch('/api/user', {
            headers: { Authorization: \`Bearer \${token}\` }
          });
          if (response.ok) {
            const userData = await response.json();
            setUser(userData);
            setIsAuthenticated(true);
          }
        }
      } catch (error) {
        console.error('Auth check failed:', error);
      } finally {
        setLoading(false);
      }
    };
    
    checkAuth();
  }, []);
  
  const login = async (email, password) => {
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });
      
      if (response.ok) {
        const { user, token } = await response.json();
        localStorage.setItem('token', token);
        setUser(user);
        setIsAuthenticated(true);
        return { success: true };
      } else {
        return { success: false, error: 'Invalid credentials' };
      }
    } catch (error) {
      return { success: false, error: 'Login failed' };
    }
  };
  
  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    setIsAuthenticated(false);
  };
  
  const value = {
    user,
    isAuthenticated,
    loading,
    login,
    logout
  };
  
  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// Kullanım
const App = () => {
  return (
    <AuthProvider>
      <Router />
    </AuthProvider>
  );
};

const LoginPage = () => {
  const { login } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    const result = await login(email, password);
    if (result.success) {
      // Redirect to dashboard
    } else {
      alert(result.error);
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <button type="submit">Login</button>
    </form>
  );
};

const Dashboard = () => {
  const { user, logout } = useAuth();
  
  return (
    <div>
      <h1>Welcome, {user.name}!</h1>
      <button onClick={logout}>Logout</button>
    </div>
  );
};
\`\`\`

### **2. Theme Management:**
\`\`\`javascript
const ThemeContext = createContext();

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');
  
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      setTheme(savedTheme);
    }
  }, []);
  
  useEffect(() => {
    localStorage.setItem('theme', theme);
    document.documentElement.setAttribute('data-theme', theme);
  }, [theme]);
  
  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };
  
  const value = {
    theme,
    toggleTheme,
    isDark: theme === 'dark'
  };
  
  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider');
  }
  return context;
};

// Kullanım
const App = () => {
  return (
    <ThemeProvider>
      <Header />
      <Main />
    </ThemeProvider>
  );
};

const Header = () => {
  const { theme, toggleTheme } = useTheme();
  
  return (
    <header>
      <h1>My App</h1>
      <button onClick={toggleTheme}>
        Switch to {theme === 'light' ? 'dark' : 'light'} theme
      </button>
    </header>
  );
};

const Main = () => {
  const { isDark } = useTheme();
  
  return (
    <main className={\`main \${isDark ? 'dark' : 'light'}\`}>
      <p>Current theme: {isDark ? 'Dark' : 'Light'}</p>
    </main>
  );
};
\`\`\`

### **3. Shopping Cart:**
\`\`\`javascript
const CartContext = createContext();

const CartProvider = ({ children }) => {
  const [items, setItems] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  
  const addItem = (product) => {
    setItems(prev => {
      const existingItem = prev.find(item => item.id === product.id);
      if (existingItem) {
        return prev.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prev, { ...product, quantity: 1 }];
    });
  };
  
  const removeItem = (id) => {
    setItems(prev => prev.filter(item => item.id !== id));
  };
  
  const updateQuantity = (id, quantity) => {
    if (quantity <= 0) {
      removeItem(id);
      return;
    }
    
    setItems(prev =>
      prev.map(item =>
        item.id === id ? { ...item, quantity } : item
      )
    );
  };
  
  const clearCart = () => {
    setItems([]);
  };
  
  const getTotalPrice = () => {
    return items.reduce((total, item) => total + (item.price * item.quantity), 0);
  };
  
  const getTotalItems = () => {
    return items.reduce((total, item) => total + item.quantity, 0);
  };
  
  const value = {
    items,
    isOpen,
    setIsOpen,
    addItem,
    removeItem,
    updateQuantity,
    clearCart,
    getTotalPrice,
    getTotalItems
  };
  
  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within CartProvider');
  }
  return context;
};

// Kullanım
const App = () => {
  return (
    <CartProvider>
      <Header />
      <ProductList />
      <Cart />
    </CartProvider>
  );
};

const Header = () => {
  const { getTotalItems, setIsOpen } = useCart();
  
  return (
    <header>
      <h1>E-commerce Store</h1>
      <button onClick={() => setIsOpen(true)}>
        Cart ({getTotalItems()})
      </button>
    </header>
  );
};

const ProductList = () => {
  const { addItem } = useCart();
  const products = [
    { id: 1, name: 'Laptop', price: 999 },
    { id: 2, name: 'Mouse', price: 25 }
  ];
  
  return (
    <div>
      {products.map(product => (
        <div key={product.id}>
          <h3>{product.name}</h3>
          <p>${product.price}</p>
          <button onClick={() => addItem(product)}>
            Add to Cart
          </button>
        </div>
      ))}
    </div>
  );
};

const Cart = () => {
  const { 
    items, 
    isOpen, 
    setIsOpen, 
    removeItem, 
    updateQuantity, 
    getTotalPrice 
  } = useCart();
  
  if (!isOpen) return null;
  
  return (
    <div className="cart-overlay">
      <div className="cart">
        <div className="cart-header">
          <h2>Shopping Cart</h2>
          <button onClick={() => setIsOpen(false)}>×</button>
        </div>
        
        <div className="cart-items">
          {items.map(item => (
            <div key={item.id} className="cart-item">
              <h4>{item.name}</h4>
              <p>${item.price}</p>
              <input
                type="number"
                value={item.quantity}
                onChange={(e) => updateQuantity(item.id, Number(e.target.value))}
                min="1"
              />
              <button onClick={() => removeItem(item.id)}>
                Remove
              </button>
            </div>
          ))}
        </div>
        
        <div className="cart-footer">
          <p>Total: ${getTotalPrice()}</p>
          <button>Checkout</button>
        </div>
      </div>
    </div>
  );
};
\`\`\`

## 🎯 Global State Best Practices

### **1. Context Separation:**
\`\`\`javascript
// ✅ İyi: Ayrı context'ler
const UserContext = createContext();
const ThemeContext = createContext();
const CartContext = createContext();

// ❌ Kötü: Tek büyük context
const AppContext = createContext(); // Tüm state burada
\`\`\`

### **2. Custom Hooks:**
\`\`\`javascript
// ✅ İyi: Custom hook ile context kullanımı
const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// ❌ Kötü: Direkt context kullanımı
const Component = () => {
  const auth = useContext(AuthContext); // Hata kontrolü yok
  return <div>{auth.user.name}</div>;
};
\`\`\`

### **3. Provider Composition:**
\`\`\`javascript
// ✅ İyi: Provider'ları compose et
const AppProviders = ({ children }) => {
  return (
    <AuthProvider>
      <ThemeProvider>
        <CartProvider>
          {children}
        </CartProvider>
      </ThemeProvider>
    </AuthProvider>
  );
};

const App = () => {
  return (
    <AppProviders>
      <Router />
    </AppProviders>
  );
};
\`\`\`

## 🎯 Global State Ne Zaman Kullanılır?

### **Global State Kullan:**
- ✅ User authentication
- ✅ Theme preferences
- ✅ Shopping cart
- ✅ Language settings
- ✅ Notification system
- ✅ Modal state

### **Local State Kullan:**
- ✅ Form inputs
- ✅ Component-specific UI state
- ✅ Temporary data
- ✅ Component lifecycle

## 🎯 Sonuç

Global State Management:
- ✅ **Veri paylaşımı** - Component'ler arası veri paylaşımı
- ✅ **Tutarlılık** - Uygulama genelinde tutarlı state
- ✅ **Merkezi yönetim** - State'in tek yerden yönetimi
- ✅ **Props drilling önleme** - Gereksiz prop geçişlerini önler

Context API, React uygulamalarında global state yönetimi için güçlü ve esnek bir çözümdür.`,
            codeExamples: [
              {
                id: 'global-state-examples',
                title: 'Global State Örnekleri',
                code: `// Auth Context
const AuthContext = createContext();

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  const login = async (email, password) => {
    // Login logic
    const userData = await authenticateUser(email, password);
    setUser(userData);
    setIsAuthenticated(true);
  };
  
  const logout = () => {
    setUser(null);
    setIsAuthenticated(false);
  };
  
  return (
    <AuthContext.Provider value={{ user, isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// Theme Context
const ThemeContext = createContext();

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');
  
  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };
  
  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider');
  }
  return context;
};

// Cart Context
const CartContext = createContext();

const CartProvider = ({ children }) => {
  const [items, setItems] = useState([]);
  
  const addItem = (product) => {
    setItems(prev => {
      const existingItem = prev.find(item => item.id === product.id);
      if (existingItem) {
        return prev.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prev, { ...product, quantity: 1 }];
    });
  };
  
  const removeItem = (id) => {
    setItems(prev => prev.filter(item => item.id !== id));
  };
  
  const getTotalPrice = () => {
    return items.reduce((total, item) => total + (item.price * item.quantity), 0);
  };
  
  return (
    <CartContext.Provider value={{ items, addItem, removeItem, getTotalPrice }}>
      {children}
    </CartContext.Provider>
  );
};

const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within CartProvider');
  }
  return context;
};

// App with multiple providers
const App = () => {
  return (
    <AuthProvider>
      <ThemeProvider>
        <CartProvider>
          <Router />
        </CartProvider>
      </ThemeProvider>
    </AuthProvider>
  );
};

// Component using multiple contexts
const Header = () => {
  const { user, logout } = useAuth();
  const { theme, toggleTheme } = useTheme();
  const { getTotalPrice } = useCart();
  
  return (
    <header>
      <h1>Welcome, {user?.name}</h1>
      <button onClick={toggleTheme}>
        {theme === 'light' ? 'Dark' : 'Light'} Theme
      </button>
      <span>Cart Total: ${getTotalPrice()}</span>
      <button onClick={logout}>Logout</button>
    </header>
  );
};`,
                language: 'javascript',
                description: 'React Global State Management örnekleri'
              }
            ],
            relatedProjects: ['auth-app', 'ecommerce-app', 'theme-app'],
            resources: [
              {
                id: 'react-context',
                title: 'React Context API',
                url: 'https://react.dev/reference/react/createContext',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'jsx-html',
        name: 'JSX ve HTML',
        icon: '📝',
        description: 'JSX syntax ve HTML benzerlikleri',
        topics: [
          {
            id: 'jsx-nedir',
            title: 'JSX Nedir?',
            description: 'JSX syntax\'ının temellerini öğrenin',
            duration: '25 dakika',
            difficulty: 'easy',
            content: `# JSX Nedir?

JSX (JavaScript XML), React'te UI elementleri tanımlamak için kullanılan syntax uzantısıdır.

## JSX Özellikleri

### 1. HTML Benzeri Syntax
\`\`\`jsx
const element = <h1>Merhaba Dünya!</h1>;
\`\`\`

### 2. JavaScript İfadeleri
\`\`\`jsx
const name = 'React';
const element = <h1>Merhaba {name}!</h1>;
\`\`\`

### 3. Attribute'lar
\`\`\`jsx
const element = <div className="container">İçerik</div>;
\`\`\`

## JSX Kuralları

- **Tek parent element** olmalı
- **className** kullanın (class değil)
- **Self-closing tag'ler** kapatılmalı
- **camelCase** property isimleri`,
            codeExamples: [
              {
                id: 'jsx-example',
                title: 'JSX Örneği',
                code: `import React from 'react';

function JSXExample() {
  const name = 'React';
  const isLoggedIn = true;

  return (
    <div className="container">
      <h1>Merhaba {name}!</h1>
      {isLoggedIn && <p>Hoş geldiniz!</p>}
    </div>
  );
}

export default JSXExample;`,
                language: 'jsx',
                description: 'JSX kullanım örneği'
              }
            ],
            relatedProjects: ['jsx-practice'],
            resources: [
              {
                id: 'jsx-docs',
                title: 'JSX Dokümantasyonu',
                url: 'https://tr.react.dev/learn/writing-markup-with-jsx',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'componentler',
        name: 'Componentler',
        icon: '🧩',
        description: 'React componentlerinin temelleri',
        topics: [
          {
            id: 'component-nedir',
            title: 'Component Nedir?',
            description: 'React componentlerinin temellerini öğrenin',
            duration: '30 dakika',
            difficulty: 'easy',
            content: `# Component Nedir?

Component'ler, React uygulamalarının yapı taşlarıdır. UI'ın yeniden kullanılabilir parçalarını temsil ederler.

## Component Türleri

### 1. Function Components (Önerilen)
\`\`\`jsx
function Welcome(props) {
  return <h1>Merhaba, {props.name}!</h1>;
}
\`\`\`

### 2. Class Components (Eski)
\`\`\`jsx
class Welcome extends React.Component {
  render() {
    return <h1>Merhaba, {this.props.name}!</h1>;
  }
}
\`\`\`

## Component Özellikleri

- **Yeniden kullanılabilir**
- **Bağımsız**
- **Props** alabilir
- **State** saklayabilir (Hook'lar ile)`,
            codeExamples: [
              {
                id: 'basic-component',
                title: 'Temel Component',
                code: `import React from 'react';

function Button({ text, onClick }) {
  return (
    <button onClick={onClick}>
      {text}
    </button>
  );
}

export default Button;`,
                language: 'jsx',
                description: 'Basit button component'
              }
            ],
            relatedProjects: ['component-library'],
            resources: [
              {
                id: 'components-docs',
                title: 'Components Dokümantasyonu',
                url: 'https://tr.react.dev/learn/your-first-component',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'event-handling',
        name: 'Event Handling',
        icon: '🎯',
        description: 'React\'te olay yönetimi',
        topics: [
          {
            id: 'onclick-events',
            title: 'onClick Events',
            description: 'Tıklama olaylarını yönetme',
            duration: '20 dakika',
            difficulty: 'easy',
            content: `# onClick Events

React'te olay yönetimi HTML'den farklıdır.

## Temel Kullanım

\`\`\`jsx
function Button() {
  const handleClick = () => {
    alert('Butona tıklandı!');
  };

  return <button onClick={handleClick}>Tıkla</button>;
}
\`\`\`

## Event Object

\`\`\`jsx
function Input() {
  const handleChange = (event) => {
    console.log(event.target.value);
  };

  return <input onChange={handleChange} />;
}
\`\`\``,
            codeExamples: [
              {
                id: 'click-example',
                title: 'Tıklama Örneği',
                code: `import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const handleIncrement = () => {
    setCount(count + 1);
  };

  const handleDecrement = () => {
    setCount(count - 1);
  };

  return (
    <div>
      <h2>Sayaç: {count}</h2>
      <button onClick={handleIncrement}>+</button>
      <button onClick={handleDecrement}>-</button>
    </div>
  );
}

export default Counter;`,
                language: 'jsx',
                description: 'onClick ile sayaç uygulaması'
              }
            ],
            relatedProjects: ['interactive-button'],
            resources: [
              {
                id: 'events-docs',
                title: 'Events Dokümantasyonu',
                url: 'https://tr.react.dev/learn/responding-to-events',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'lists-keys',
        name: 'Lists ve Keys',
        icon: '📋',
        description: 'Liste render etme ve key kullanımı',
        topics: [
          {
            id: 'list-rendering',
            title: 'Liste Render Etme',
            description: 'Array\'leri JSX\'te render etme',
            duration: '25 dakika',
            difficulty: 'medium',
            content: `# Liste Render Etme

React'te array'leri render etmek için map() metodunu kullanırız.

## Temel Kullanım

\`\`\`jsx
function TodoList() {
  const todos = ['React öğren', 'Proje yap', 'Dokümantasyon oku'];

  return (
    <ul>
      {todos.map((todo, index) => (
        <li key={index}>{todo}</li>
      ))}
    </ul>
  );
}
\`\`\`

## Key Kullanımı

Key'ler React'in hangi item'ların değiştiğini anlamasına yardımcı olur.`,
            codeExamples: [
              {
                id: 'list-example',
                title: 'Liste Örneği',
                code: `import React from 'react';

function UserList() {
  const users = [
    { id: 1, name: 'Ahmet', age: 25 },
    { id: 2, name: 'Mehmet', age: 30 },
    { id: 3, name: 'Ayşe', age: 28 }
  ];

  return (
    <div>
      <h2>Kullanıcı Listesi</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>
            {user.name} - {user.age} yaşında
          </li>
        ))}
      </ul>
    </div>
  );
}

export default UserList;`,
                language: 'jsx',
                description: 'Key ile liste render etme'
              }
            ],
            relatedProjects: ['todo-list'],
            resources: [
              {
                id: 'lists-docs',
                title: 'Lists ve Keys Dokümantasyonu',
                url: 'https://tr.react.dev/learn/rendering-lists',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'props',
        name: 'Props',
        icon: '📦',
        description: 'Props ile veri aktarımı',
        topics: [
          {
            id: 'props-nedir',
            title: 'Props Nedir?',
            description: 'Props kavramını ve kullanımını öğrenin',
            duration: '30 dakika',
            difficulty: 'easy',
            content: `# Props Nedir?

Props (Properties), component'ler arasında veri aktarımı için kullanılan özelliklerdir.

## Temel Kullanım

\`\`\`jsx
function Welcome(props) {
  return <h1>Merhaba, {props.name}!</h1>;
}

function App() {
  return <Welcome name="React" />;
}
\`\`\`

## Destructuring

\`\`\`jsx
function Welcome({ name, age }) {
  return <h1>Merhaba {name}, {age} yaşındasın!</h1>;
}
\`\`\`

## Default Props

\`\`\`jsx
function Button({ text = 'Tıkla' }) {
  return <button>{text}</button>;
}
\`\`\``,
            codeExamples: [
              {
                id: 'props-example',
                title: 'Props Örneği',
                code: `import React from 'react';

function UserCard({ name, email, age, isActive }) {
  return (
    <div className={\`user-card \${isActive ? 'active' : 'inactive'}\`}>
      <h3>{name}</h3>
      <p>Email: {email}</p>
      <p>Yaş: {age}</p>
      <p>Durum: {isActive ? 'Aktif' : 'Pasif'}</p>
    </div>
  );
}

function App() {
  return (
    <div>
      <UserCard 
        name="Ahmet Yılmaz" 
        email="ahmet@example.com" 
        age={25} 
        isActive={true} 
      />
      <UserCard 
        name="Mehmet Demir" 
        email="mehmet@example.com" 
        age={30} 
        isActive={false} 
      />
    </div>
  );
}

export default App;`,
                language: 'jsx',
                description: 'Props ile kullanıcı kartı'
              }
            ],
            relatedProjects: ['user-profile'],
            resources: [
              {
                id: 'props-docs',
                title: 'Props Dokümantasyonu',
                url: 'https://tr.react.dev/learn/passing-props-to-a-component',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'state',
        name: 'State',
        icon: '🔄',
        description: 'Component state yönetimi',
        topics: [
          {
            id: 'state-nedir',
            title: 'State Nedir?',
            description: 'State kavramını ve useState Hook\'unu öğrenin',
            duration: '35 dakika',
            difficulty: 'medium',
            content: `# State Nedir?

State, component'in iç verisini saklayan ve değiştiğinde component'i yeniden render eden özelliktir.

## useState Hook

\`\`\`jsx
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Sayaç: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        Artır
      </button>
    </div>
  );
}
\`\`\`

## State Güncelleme

\`\`\`jsx
const [user, setUser] = useState({ name: '', email: '' });

// Doğru yöntem
setUser({ ...user, name: 'Yeni İsim' });

// Yanlış yöntem
user.name = 'Yeni İsim'; // Bu çalışmaz!
\`\`\``,
            codeExamples: [
              {
                id: 'state-example',
                title: 'State Örneği',
                code: `import React, { useState } from 'react';

function UserForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    age: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form verisi:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        name="name"
        value={formData.name}
        onChange={handleChange}
        placeholder="İsim"
      />
      <input
        name="email"
        type="email"
        value={formData.email}
        onChange={handleChange}
        placeholder="Email"
      />
      <input
        name="age"
        type="number"
        value={formData.age}
        onChange={handleChange}
        placeholder="Yaş"
      />
      <button type="submit">Gönder</button>
    </form>
  );
}

export default UserForm;`,
                language: 'jsx',
                description: 'useState ile form yönetimi'
              }
            ],
            relatedProjects: ['form-app'],
            resources: [
              {
                id: 'state-docs',
                title: 'State Dokümantasyonu',
                url: 'https://tr.react.dev/reference/react/useState',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'lifecycle',
        name: 'React Lifecycle',
        icon: '🔄',
        description: 'Component yaşam döngüsü',
        topics: [
          {
            id: 'react-lifecycle',
            title: 'React Lifecycle',
            description: 'Component yaşam döngüsü metodları',
            duration: '45 dakika',
            difficulty: 'hard',
            content: `# React Lifecycle

React component'lerinin yaşam döngüsü 4 ana aşamadan oluşur.

## Lifecycle Aşamaları

### 1. Mounting (Bağlama)
- Component DOM'a eklenir
- constructor, render, componentDidMount

### 2. Updating (Güncelleme)
- Props veya state değiştiğinde
- render, componentDidUpdate

### 3. Unmounting (Çıkarma)
- Component DOM'dan kaldırılır
- componentWillUnmount

### 4. Error Handling (Hata Yönetimi)
- Hata oluştuğunda
- componentDidCatch

## useEffect Hook (Modern Yaklaşım)

\`\`\`jsx
import React, { useEffect, useState } from 'react';

function DataComponent() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Component mount olduğunda çalışır
    fetchData();
    
    // Cleanup function
    return () => {
      console.log('Component unmount oldu');
    };
  }, []); // Boş dependency array = sadece mount'ta çalış

  return <div>{data ? data.title : 'Yükleniyor...'}</div>;
}
\`\`\``,
            codeExamples: [
              {
                id: 'lifecycle-example',
                title: 'useEffect Örneği',
                code: `import React, { useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setSeconds(prev => prev + 1);
    }, 1000);

    // Cleanup function
    return () => clearInterval(interval);
  }, []);

  return (
    <div>
      <h2>Timer: {seconds} saniye</h2>
    </div>
  );
}

export default Timer;`,
                language: 'jsx',
                description: 'useEffect ile timer uygulaması'
              }
            ],
            relatedProjects: ['timer-app'],
            resources: [
              {
                id: 'lifecycle-docs',
                title: 'React Lifecycle Dokümantasyonu',
                url: 'https://tr.react.dev/learn/lifecycle-of-reactive-effects',
                type: 'documentation'
              }
            ]
          }
        ]
      }
    ]
  },
  {
    id: 'react-201',
    name: 'React 201 - Orta Seviye',
    order: 2,
    categories: [
      {
        id: 'state-management',
        name: 'State Management',
        icon: '🔄',
        description: 'React\'te state yönetimi',
        topics: [
          {
            id: 'usestate-hook',
            title: 'useState Hook',
            description: 'useState Hook kullanımı',
            duration: '40 dakika',
            difficulty: 'medium',
            content: `# useState Hook

useState, function component'lerde state kullanmamızı sağlayan React Hook'udur.

## Temel Kullanım

\`\`\`jsx
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Sayı: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        Artır
      </button>
    </div>
  );
}
\`\`\`

## useState Özellikleri

- **İlk değer** parametre olarak verilir
- **Array destructuring** ile kullanılır
- **State değeri** ve **setter function** döner
- **Asenkron** çalışır`,
            codeExamples: [
              {
                id: 'counter-example',
                title: 'Counter Örneği',
                code: `import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(0);

  return (
    <div>
      <h2>Sayaç: {count}</h2>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Sıfırla</button>
    </div>
  );
}

export default Counter;`,
                language: 'jsx',
                description: 'useState ile sayaç uygulaması'
              }
            ],
            relatedProjects: ['counter-app'],
            resources: [
              {
                id: 'usestate-docs',
                title: 'useState Dokümantasyonu',
                url: 'https://tr.react.dev/reference/react/useState',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'hooks',
        name: 'React Hooks',
        icon: '🪝',
        description: 'React Hook\'ları',
        topics: [
          {
            id: 'useeffect-hook',
            title: 'useEffect Hook',
            description: 'useEffect Hook kullanımı',
            duration: '50 dakika',
            difficulty: 'medium',
            content: `# useEffect Hook

useEffect, function component'lerde side effect'leri yönetmek için kullanılan Hook'tur.

## Temel Kullanım

\`\`\`jsx
import React, { useState, useEffect } from 'react';

function DataComponent() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // API çağrısı
    fetchData();
  }, []); // Boş dependency array

  return <div>{data ? data.title : 'Yükleniyor...'}</div>;
}
\`\`\`

## Dependency Array

\`\`\`jsx
// Her render'da çalışır
useEffect(() => {
  console.log('Her render');
});

// Sadece mount'ta çalışır
useEffect(() => {
  console.log('Sadece mount');
}, []);

// count değiştiğinde çalışır
useEffect(() => {
  console.log('Count değişti:', count);
}, [count]);
\`\`\``,
            codeExamples: [
              {
                id: 'useeffect-example',
                title: 'useEffect Örneği',
                code: `import React, { useState, useEffect } from 'react';

function UserProfile({ userId }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        setLoading(true);
        const response = await fetch(\`/api/users/\${userId}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Kullanıcı yüklenemedi:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, [userId]); // userId değiştiğinde yeniden çalış

  if (loading) return <div>Yükleniyor...</div>;
  if (!user) return <div>Kullanıcı bulunamadı</div>;

  return (
    <div>
      <h2>{user.name}</h2>
      <p>Email: {user.email}</p>
    </div>
  );
}

export default UserProfile;`,
                language: 'jsx',
                description: 'useEffect ile kullanıcı profili'
              }
            ],
            relatedProjects: ['user-profile-app'],
            resources: [
              {
                id: 'useeffect-docs',
                title: 'useEffect Dokümantasyonu',
                url: 'https://tr.react.dev/reference/react/useEffect',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'redux',
        name: 'Redux',
        icon: '🏪',
        description: 'Redux state yönetimi',
        topics: [
          {
            id: 'redux-nedir',
            title: 'Redux Nedir?',
            description: 'Redux kavramını ve kullanımını öğrenin',
            duration: '60 dakika',
            difficulty: 'hard',
            content: `# Redux Nedir?

Redux, JavaScript uygulamaları için öngörülebilir bir state container'ıdır.

## Redux Temel Kavramları

### 1. Store
Uygulamanın tüm state'ini tutan merkezi depo.

### 2. Action
State değişikliğini tanımlayan plain JavaScript objesi.

### 3. Reducer
Action'ları alıp yeni state döndüren pure function.

### 4. Dispatch
Action'ı store'a gönderen fonksiyon.

## Temel Kullanım

\`\`\`jsx
import { createStore } from 'redux';

// Action
const increment = () => ({ type: 'INCREMENT' });

// Reducer
const counterReducer = (state = 0, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1;
    default:
      return state;
  }
};

// Store
const store = createStore(counterReducer);
\`\`\``,
            codeExamples: [
              {
                id: 'redux-example',
                title: 'Redux Örneği',
                code: `import React from 'react';
import { useSelector, useDispatch } from 'react-redux';

function Counter() {
  const count = useSelector(state => state.counter);
  const dispatch = useDispatch();

  return (
    <div>
      <h2>Sayaç: {count}</h2>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>
        Artır
      </button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>
        Azalt
      </button>
    </div>
  );
}

export default Counter;`,
                language: 'jsx',
                description: 'Redux ile sayaç uygulaması'
              }
            ],
            relatedProjects: ['redux-todo-app'],
            resources: [
              {
                id: 'redux-docs',
                title: 'Redux Dokümantasyonu',
                url: 'https://redux.js.org/',
                type: 'documentation'
              }
            ]
          }
        ]
      }
    ]
  },
  {
    id: 'react-301',
    name: 'React 301 - İleri Seviye',
    order: 3,
    categories: [
      {
        id: 'performance',
        name: 'Performance Optimizasyonu',
        icon: '⚡',
        description: 'React uygulamalarında performans optimizasyonu',
        topics: [
          {
            id: 'react-memo',
            title: 'React.memo ve useMemo',
            description: 'Performans optimizasyonu teknikleri',
            duration: '50 dakika',
            difficulty: 'hard',
            content: `# React.memo ve useMemo

Performans optimizasyonu için kullanılan React özellikleri.

## React.memo

Component'in gereksiz yeniden render edilmesini önler.

\`\`\`jsx
import React, { memo } from 'react';

const ExpensiveComponent = memo(function ExpensiveComponent({ data }) {
  return <div>{data}</div>;
});
\`\`\`

## useMemo

Pahalı hesaplamaları cache'ler.

\`\`\`jsx
import React, { useMemo } from 'react';

function ExpensiveCalculation({ items }) {
  const expensiveValue = useMemo(() => {
    return items.reduce((sum, item) => sum + item.value, 0);
  }, [items]);

  return <div>Toplam: {expensiveValue}</div>;
}
\`\`\``,
            codeExamples: [
              {
                id: 'memo-example',
                title: 'React.memo Örneği',
                code: `import React, { memo, useState } from 'react';

const ExpensiveChild = memo(function ExpensiveChild({ name }) {
  console.log('ExpensiveChild render edildi');
  return <div>Merhaba {name}!</div>;
});

function Parent() {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('React');

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>
        Count: {count}
      </button>
      <ExpensiveChild name={name} />
    </div>
  );
}`,
                language: 'jsx',
                description: 'React.memo kullanım örneği'
              }
            ],
            relatedProjects: ['performance-app'],
            resources: [
              {
                id: 'memo-docs',
                title: 'React.memo Dokümantasyonu',
                url: 'https://tr.react.dev/reference/react/memo',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'react-optimizasyonn-teknikleri',
        name: 'REACT OPTİMİZASYONN TEKNİKLERİ',
        icon: '⚡',
        description: 'React uygulamalarında performans optimizasyonu teknikleri',
        topics: [
          {
            id: 'react-calisma-mantigi',
            title: 'React Çalışma Mantığı',
            description: 'React\'in nasıl çalıştığını ve render sürecini anlama',
            duration: '5 dakika',
            difficulty: 'medium',
            content: `# React Çalışma Mantığı ⚡

React'in nasıl çalıştığını anlamak, performans optimizasyonu için kritik öneme sahiptir. React'in render süreci ve component lifecycle'ını anlayarak daha verimli uygulamalar geliştirebiliriz.

## 🎯 React Render Süreci

### **1. Initial Render:**
\`\`\`javascript
// İlk render süreci
const App = () => {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};

// React'in yaptığı işlemler:
// 1. Component fonksiyonunu çağırır
// 2. JSX'i Virtual DOM'a çevirir
// 3. Virtual DOM'u gerçek DOM ile karşılaştırır
// 4. Farklılıkları gerçek DOM'a uygular
\`\`\`

### **2. Re-render Süreci:**
\`\`\`javascript
// State değiştiğinde
const handleClick = () => {
  setCount(count + 1); // State değişir
  // React otomatik olarak component'i yeniden render eder
};

// Re-render süreci:
// 1. Component fonksiyonu tekrar çağrılır
// 2. Yeni JSX oluşturulur
// 3. Virtual DOM güncellenir
// 4. Önceki Virtual DOM ile karşılaştırılır (Diffing)
// 5. Sadece değişen kısımlar gerçek DOM'da güncellenir
\`\`\`

## 🔧 Virtual DOM ve Diffing

### **Virtual DOM Nedir?**
\`\`\`javascript
// Virtual DOM - JavaScript objesi
const virtualDOM = {
  type: 'div',
  props: {
    className: 'container',
    children: [
      {
        type: 'h1',
        props: {
          children: 'Hello World'
        }
      }
    ]
  }
};

// Gerçek DOM - Tarayıcıda görünen
<div class="container">
  <h1>Hello World</h1>
</div>
\`\`\`

### **Diffing Algoritması:**
\`\`\`javascript
// Önceki Virtual DOM
const prevVDOM = {
  type: 'div',
  props: { className: 'container' },
  children: [
    { type: 'h1', props: { children: 'Hello' } }
  ]
};

// Yeni Virtual DOM
const newVDOM = {
  type: 'div',
  props: { className: 'container' },
  children: [
    { type: 'h1', props: { children: 'Hello World' } }
  ]
};

// React sadece değişen kısmı günceller
// "Hello" -> "Hello World" sadece bu kısım değişir
\`\`\`

## 🎨 Component Lifecycle

### **Function Component Lifecycle:**
\`\`\`javascript
const MyComponent = ({ name }) => {
  // 1. Component oluşturulur
  console.log('Component oluşturuldu');
  
  // 2. State ve props değerleri belirlenir
  const [count, setCount] = useState(0);
  
  // 3. useEffect çalışır (mount)
  useEffect(() => {
    console.log('Component mount edildi');
    
    // Cleanup function (unmount)
    return () => {
      console.log('Component unmount edildi');
    };
  }, []);
  
  // 4. Render fonksiyonu çalışır
  return (
    <div>
      <h1>{name}</h1>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};

// Lifecycle sırası:
// 1. Component oluşturulur
// 2. useState çalışır
// 3. useEffect çalışır (mount)
// 4. Render fonksiyonu çalışır
// 5. DOM güncellenir
// 6. Component unmount edildiğinde cleanup çalışır
\`\`\`

## 🎯 React'in Optimizasyon Stratejileri

### **1. Reconciliation:**
\`\`\`javascript
// React'in element karşılaştırma mantığı
const List = ({ items }) => {
  return (
    <ul>
      {items.map(item => (
        <li key={item.id}>{item.name}</li>
      ))}
    </ul>
  );
};

// Key prop'u olmadan:
// React her elementi yeniden oluşturur
// [A, B, C] -> [A, B, C, D] (tüm liste yeniden render)

// Key prop'u ile:
// React sadece yeni elementi ekler
// [A, B, C] -> [A, B, C, D] (sadece D eklenir)
\`\`\`

### **2. Batching:**
\`\`\`javascript
const Component = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  
  const handleClick = () => {
    // React 18'de otomatik batching
    setCount(count + 1);
    setName('Updated');
    // Bu iki state güncellemesi tek render'da birleştirilir
  };
  
  return (
    <div>
      <p>Count: {count}</p>
      <p>Name: {name}</p>
      <button onClick={handleClick}>Update</button>
    </div>
  );
};
\`\`\`

### **3. Concurrent Features:**
\`\`\`javascript
import { startTransition } from 'react';

const Component = () => {
  const [input, setInput] = useState('');
  const [results, setResults] = useState([]);
  
  const handleInputChange = (e) => {
    const value = e.target.value;
    setInput(value); // Urgent update
    
    // Non-urgent update
    startTransition(() => {
      setResults(searchResults(value));
    });
  };
  
  return (
    <div>
      <input value={input} onChange={handleInputChange} />
      <div>
        {results.map(result => (
          <div key={result.id}>{result.title}</div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

## 🎨 Performance İpuçları

### **1. Expensive Calculations:**
\`\`\`javascript
// ❌ Kötü: Her render'da hesaplama
const ExpensiveComponent = ({ items }) => {
  const expensiveValue = items.reduce((sum, item) => {
    // Pahalı hesaplama
    return sum + item.value * Math.random();
  }, 0);
  
  return <div>{expensiveValue}</div>;
};

// ✅ İyi: useMemo ile cache
const OptimizedComponent = ({ items }) => {
  const expensiveValue = useMemo(() => {
    return items.reduce((sum, item) => {
      return sum + item.value * Math.random();
    }, 0);
  }, [items]); // Sadece items değiştiğinde hesapla
  
  return <div>{expensiveValue}</div>;
};
\`\`\`

### **2. Event Handlers:**
\`\`\`javascript
// ❌ Kötü: Her render'da yeni fonksiyon
const Component = ({ items }) => {
  return (
    <div>
      {items.map(item => (
        <button key={item.id} onClick={() => handleClick(item.id)}>
          {item.name}
        </button>
      ))}
    </div>
  );
};

// ✅ İyi: useCallback ile optimize
const OptimizedComponent = ({ items }) => {
  const handleClick = useCallback((id) => {
    // Click handler logic
  }, []);
  
  return (
    <div>
      {items.map(item => (
        <button key={item.id} onClick={() => handleClick(item.id)}>
          {item.name}
        </button>
      ))}
    </div>
  );
};
\`\`\`

### **3. Component Memoization:**
\`\`\`javascript
// ❌ Kötü: Gereksiz re-render
const ChildComponent = ({ data }) => {
  console.log('Child render edildi');
  return <div>{data.name}</div>;
};

const ParentComponent = () => {
  const [count, setCount] = useState(0);
  const [user, setUser] = useState({ name: 'John' });
  
  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Count: {count}</button>
      <ChildComponent data={user} />
    </div>
  );
};

// ✅ İyi: React.memo ile optimize
const OptimizedChild = memo(({ data }) => {
  console.log('Child render edildi');
  return <div>{data.name}</div>;
});

const OptimizedParent = () => {
  const [count, setCount] = useState(0);
  const [user, setUser] = useState({ name: 'John' });
  
  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Count: {count}</button>
      <OptimizedChild data={user} />
    </div>
  );
};
\`\`\`

## 🎯 React DevTools ile Debug

### **Profiler Kullanımı:**
\`\`\`javascript
// React DevTools Profiler ile:
// 1. Hangi component'lerin ne sıklıkla render edildiğini gör
// 2. Render sürelerini ölç
// 3. Performance bottleneck'leri tespit et
// 4. Optimizasyon öncesi/sonrası karşılaştır

const ProfiledComponent = () => {
  const [data, setData] = useState([]);
  
  // Profiler'da bu component'in render süresini görebilirsin
  return (
    <div>
      {data.map(item => (
        <ExpensiveItem key={item.id} data={item} />
      ))}
    </div>
  );
};
\`\`\`

## 🎯 Sonuç

React Çalışma Mantığı:
- ✅ **Virtual DOM** - JavaScript objesi olarak DOM temsili
- ✅ **Diffing** - Sadece değişen kısımları günceller
- ✅ **Reconciliation** - Element karşılaştırma algoritması
- ✅ **Batching** - State güncellemelerini birleştirir
- ✅ **Concurrent Features** - Öncelikli güncellemeler

React'in çalışma mantığını anlayarak daha performanslı uygulamalar geliştirebiliriz.`,
            codeExamples: [
              {
                id: 'react-workflow-examples',
                title: 'React Çalışma Mantığı Örnekleri',
                code: `// Virtual DOM örneği
const VirtualDOMExample = () => {
  const [count, setCount] = useState(0);
  
  // Her render'da yeni Virtual DOM oluşturulur
  const virtualDOM = {
    type: 'div',
    props: { className: 'container' },
    children: [
      {
        type: 'h1',
        props: { children: \`Count: \${count}\` }
      },
      {
        type: 'button',
        props: {
          onClick: () => setCount(count + 1),
          children: 'Increment'
        }
      }
    ]
  };
  
  return (
    <div className="container">
      <h1>Count: {count}</h1>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};

// Diffing örneği
const DiffingExample = () => {
  const [items, setItems] = useState(['A', 'B', 'C']);
  
  const addItem = () => {
    setItems([...items, 'D']);
  };
  
  return (
    <div>
      <ul>
        {items.map((item, index) => (
          <li key={index}>{item}</li>
        ))}
      </ul>
      <button onClick={addItem}>Add Item</button>
    </div>
  );
};

// Batching örneği
const BatchingExample = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  
  const handleUpdate = () => {
    // React 18'de otomatik batching
    setCount(count + 1);
    setName('Updated');
    // Bu iki güncelleme tek render'da birleştirilir
  };
  
  return (
    <div>
      <p>Count: {count}</p>
      <p>Name: {name}</p>
      <button onClick={handleUpdate}>Update Both</button>
    </div>
  );
};

// Lifecycle örneği
const LifecycleExample = ({ name }) => {
  const [count, setCount] = useState(0);
  
  useEffect(() => {
    console.log('Component mount edildi');
    
    return () => {
      console.log('Component unmount edildi');
    };
  }, []);
  
  useEffect(() => {
    console.log('Count değişti:', count);
  }, [count]);
  
  return (
    <div>
      <h1>Hello {name}!</h1>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};`,
                language: 'javascript',
                description: 'React çalışma mantığı örnekleri'
              }
            ],
            relatedProjects: ['performance-app', 'virtual-dom-demo'],
            resources: [
              {
                id: 'react-reconciliation',
                title: 'React Reconciliation',
                url: 'https://react.dev/learn/preserving-and-resetting-state',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'react-uygulamalarinda-veritabani-baglantilari-ve-http-istekleri',
        name: 'REACT UYGULAMALARINDA VERİTABANI BAĞLANTILARI VE HTTP İSTEKLERİ',
        icon: '🌐',
        description: 'React uygulamalarında HTTP istekleri ve veri yönetimi',
        topics: [
          {
            id: 'client-server-iliskisi',
            title: 'Client - Server İlişkisi',
            description: 'React uygulamalarında client-server mimarisi ve HTTP istekleri',
            duration: '7 dakika',
            difficulty: 'medium',
            content: `# Client - Server İlişkisi 🌐

React uygulamalarında veri yönetimi, client-server mimarisi üzerine kuruludur. React frontend olarak çalışırken, backend API'ler ile HTTP istekleri aracılığıyla veri alışverişi yapar.

## 🎯 Client-Server Mimarisi

### **Frontend (Client) - React:**
\`\`\`javascript
// React uygulaması - Client tarafı
const App = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // Server'dan veri çekme
  const fetchUsers = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/users');
      const data = await response.json();
      setUsers(data);
    } catch (error) {
      console.error('Error fetching users:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div>
      <h1>Users</h1>
      {loading ? <p>Loading...</p> : (
        <ul>
          {users.map(user => (
            <li key={user.id}>{user.name}</li>
          ))}
        </ul>
      )}
      <button onClick={fetchUsers}>Load Users</button>
    </div>
  );
};
\`\`\`

### **Backend (Server) - API:**
\`\`\`javascript
// Express.js API - Server tarafı
const express = require('express');
const app = express();

// CORS middleware
app.use(cors());
app.use(express.json());

// Users endpoint
app.get('/api/users', (req, res) => {
  const users = [
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com' }
  ];
  
  res.json(users);
});

// Create user endpoint
app.post('/api/users', (req, res) => {
  const { name, email } = req.body;
  
  // Veritabanına kaydet
  const newUser = { id: Date.now(), name, email };
  
  res.status(201).json(newUser);
});

app.listen(3001, () => {
  console.log('Server running on port 3001');
});
\`\`\`

## 🔧 HTTP İstek Türleri

### **1. GET - Veri Çekme:**
\`\`\`javascript
// GET isteği - Veri çekme
const fetchData = async () => {
  try {
    const response = await fetch('/api/users');
    
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

// Kullanım
const UserList = () => {
  const [users, setUsers] = useState([]);
  
  useEffect(() => {
    const loadUsers = async () => {
      try {
        const data = await fetchData();
        setUsers(data);
      } catch (error) {
        console.error('Failed to load users:', error);
      }
    };
    
    loadUsers();
  }, []);
  
  return (
    <div>
      {users.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
};
\`\`\`

### **2. POST - Veri Gönderme:**
\`\`\`javascript
// POST isteği - Veri gönderme
const createUser = async (userData) => {
  try {
    const response = await fetch('/api/users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData)
    });
    
    if (!response.ok) {
      throw new Error('Failed to create user');
    }
    
    const newUser = await response.json();
    return newUser;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

// Kullanım
const CreateUserForm = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const newUser = await createUser({ name, email });
      console.log('User created:', newUser);
      // Form'u temizle
      setName('');
      setEmail('');
    } catch (error) {
      console.error('Failed to create user:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Name"
        required
      />
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required
      />
      <button type="submit" disabled={loading}>
        {loading ? 'Creating...' : 'Create User'}
      </button>
    </form>
  );
};
\`\`\`

### **3. PUT/PATCH - Veri Güncelleme:**
\`\`\`javascript
// PUT isteği - Veri güncelleme
const updateUser = async (id, userData) => {
  try {
    const response = await fetch(\`/api/users/\${id}\`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData)
    });
    
    if (!response.ok) {
      throw new Error('Failed to update user');
    }
    
    const updatedUser = await response.json();
    return updatedUser;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

// Kullanım
const EditUserForm = ({ user, onUpdate }) => {
  const [name, setName] = useState(user.name);
  const [email, setEmail] = useState(user.email);
  const [loading, setLoading] = useState(false);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const updatedUser = await updateUser(user.id, { name, email });
      onUpdate(updatedUser);
    } catch (error) {
      console.error('Failed to update user:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        required
      />
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <button type="submit" disabled={loading}>
        {loading ? 'Updating...' : 'Update User'}
      </button>
    </form>
  );
};
\`\`\`

### **4. DELETE - Veri Silme:**
\`\`\`javascript
// DELETE isteği - Veri silme
const deleteUser = async (id) => {
  try {
    const response = await fetch(\`/api/users/\${id}\`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      throw new Error('Failed to delete user');
    }
    
    return true;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

// Kullanım
const UserItem = ({ user, onDelete }) => {
  const [loading, setLoading] = useState(false);
  
  const handleDelete = async () => {
    if (!window.confirm('Are you sure you want to delete this user?')) {
      return;
    }
    
    setLoading(true);
    
    try {
      await deleteUser(user.id);
      onDelete(user.id);
    } catch (error) {
      console.error('Failed to delete user:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
      <button onClick={handleDelete} disabled={loading}>
        {loading ? 'Deleting...' : 'Delete'}
      </button>
    </div>
  );
};
\`\`\`

## 🎨 HTTP İstek Yönetimi

### **1. Loading States:**
\`\`\`javascript
const useApi = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const makeRequest = async (requestFn) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await requestFn();
      return result;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  };
  
  return { loading, error, makeRequest };
};

// Kullanım
const UserManager = () => {
  const [users, setUsers] = useState([]);
  const { loading, error, makeRequest } = useApi();
  
  const loadUsers = async () => {
    try {
      const data = await makeRequest(() => fetch('/api/users').then(res => res.json()));
      setUsers(data);
    } catch (error) {
      console.error('Failed to load users:', error);
    }
  };
  
  useEffect(() => {
    loadUsers();
  }, []);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return (
    <div>
      {users.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
};
\`\`\`

### **2. Error Handling:**
\`\`\`javascript
const apiClient = {
  async request(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || \`HTTP \${response.status}\`);
      }
      
      return await response.json();
    } catch (error) {
      if (error.name === 'TypeError') {
        throw new Error('Network error - please check your connection');
      }
      throw error;
    }
  },
  
  get(url) {
    return this.request(url);
  },
  
  post(url, data) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  },
  
  put(url, data) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  },
  
  delete(url) {
    return this.request(url, {
      method: 'DELETE'
    });
  }
};

// Kullanım
const UserService = {
  async getUsers() {
    return apiClient.get('/api/users');
  },
  
  async createUser(userData) {
    return apiClient.post('/api/users', userData);
  },
  
  async updateUser(id, userData) {
    return apiClient.put(\`/api/users/\${id}\`, userData);
  },
  
  async deleteUser(id) {
    return apiClient.delete(\`/api/users/\${id}\`);
  }
};
\`\`\`

### **3. Request Cancellation:**
\`\`\`javascript
const useCancellableRequest = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const makeRequest = useCallback(async (requestFn) => {
    const controller = new AbortController();
    
    setLoading(true);
    setError(null);
    
    try {
      const result = await requestFn(controller.signal);
      return result;
    } catch (err) {
      if (err.name === 'AbortError') {
        console.log('Request was cancelled');
        return;
      }
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);
  
  return { loading, error, makeRequest };
};

// Kullanım
const SearchComponent = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const { loading, error, makeRequest } = useCancellableRequest();
  
  const searchUsers = async (searchQuery, signal) => {
    const response = await fetch(\`/api/users/search?q=\${searchQuery}\`, {
      signal
    });
    return response.json();
  };
  
  const handleSearch = async (searchQuery) => {
    if (!searchQuery.trim()) {
      setResults([]);
      return;
    }
    
    try {
      const data = await makeRequest((signal) => searchUsers(searchQuery, signal));
      setResults(data);
    } catch (error) {
      console.error('Search failed:', error);
    }
  };
  
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      handleSearch(query);
    }, 300);
    
    return () => clearTimeout(timeoutId);
  }, [query]);
  
  return (
    <div>
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search users..."
      />
      {loading && <div>Searching...</div>}
      {error && <div>Error: {error}</div>}
      <div>
        {results.map(user => (
          <div key={user.id}>{user.name}</div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

## 🎯 Best Practices

### **1. API Service Layer:**
\`\`\`javascript
// API service katmanı
class ApiService {
  constructor(baseURL) {
    this.baseURL = baseURL;
  }
  
  async request(endpoint, options = {}) {
    const url = \`\${this.baseURL}\${endpoint}\`;
    
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    };
    
    try {
      const response = await fetch(url, config);
      
      if (!response.ok) {
        throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }
  
  get(endpoint) {
    return this.request(endpoint);
  }
  
  post(endpoint, data) {
    return this.request(endpoint, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }
  
  put(endpoint, data) {
    return this.request(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }
  
  delete(endpoint) {
    return this.request(endpoint, {
      method: 'DELETE'
    });
  }
}

// API instance
const api = new ApiService('http://localhost:3001/api');

// User service
export const userService = {
  getAll: () => api.get('/users'),
  getById: (id) => api.get(\`/users/\${id}\`),
  create: (userData) => api.post('/users', userData),
  update: (id, userData) => api.put(\`/users/\${id}\`, userData),
  delete: (id) => api.delete(\`/users/\${id}\`)
};
\`\`\`

### **2. Custom Hooks:**
\`\`\`javascript
// Custom hook for API calls
const useApi = (apiFunction, dependencies = []) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const execute = useCallback(async (...args) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await apiFunction(...args);
      setData(result);
      return result;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, dependencies);
  
  return { data, loading, error, execute };
};

// Kullanım
const UserList = () => {
  const { data: users, loading, error, execute: loadUsers } = useApi(userService.getAll);
  
  useEffect(() => {
    loadUsers();
  }, [loadUsers]);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return (
    <div>
      {users?.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
};
\`\`\`

## 🎯 Sonuç

Client-Server İlişkisi:
- ✅ **HTTP İstekleri** - GET, POST, PUT, DELETE metodları
- ✅ **Error Handling** - Hata yönetimi ve kullanıcı deneyimi
- ✅ **Loading States** - Yükleme durumları
- ✅ **Request Cancellation** - İstek iptal etme
- ✅ **Service Layer** - API katmanı organizasyonu
- ✅ **Custom Hooks** - Tekrar kullanılabilir API logic'i

React uygulamalarında veri yönetimi için güçlü ve esnek bir yapı oluşturabiliriz.`,
            codeExamples: [
              {
                id: 'client-server-examples',
                title: 'Client-Server İlişkisi Örnekleri',
                code: `// API Service
class ApiService {
  constructor(baseURL) {
    this.baseURL = baseURL;
  }
  
  async request(endpoint, options = {}) {
    const url = \`\${this.baseURL}\${endpoint}\`;
    
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    };
    
    try {
      const response = await fetch(url, config);
      
      if (!response.ok) {
        throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }
  
  get(endpoint) {
    return this.request(endpoint);
  }
  
  post(endpoint, data) {
    return this.request(endpoint, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }
  
  put(endpoint, data) {
    return this.request(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }
  
  delete(endpoint) {
    return this.request(endpoint, {
      method: 'DELETE'
    });
  }
}

// API instance
const api = new ApiService('http://localhost:3001/api');

// User service
export const userService = {
  getAll: () => api.get('/users'),
  getById: (id) => api.get(\`/users/\${id}\`),
  create: (userData) => api.post('/users', userData),
  update: (id, userData) => api.put(\`/users/\${id}\`, userData),
  delete: (id) => api.delete(\`/users/\${id}\`)
};

// Custom hook for API calls
const useApi = (apiFunction, dependencies = []) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const execute = useCallback(async (...args) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await apiFunction(...args);
      setData(result);
      return result;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, dependencies);
  
  return { data, loading, error, execute };
};

// Component using the service
const UserList = () => {
  const { data: users, loading, error, execute: loadUsers } = useApi(userService.getAll);
  
  useEffect(() => {
    loadUsers();
  }, [loadUsers]);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return (
    <div>
      {users?.map(user => (
        <div key={user.id}>
          <h3>{user.name}</h3>
          <p>{user.email}</p>
        </div>
      ))}
    </div>
  );
};

// Form component
const CreateUserForm = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const { loading, error, execute: createUser } = useApi(userService.create);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      await createUser({ name, email });
      setName('');
      setEmail('');
      alert('User created successfully!');
    } catch (error) {
      console.error('Failed to create user:', error);
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Name"
        required
      />
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required
      />
      <button type="submit" disabled={loading}>
        {loading ? 'Creating...' : 'Create User'}
      </button>
      {error && <div>Error: {error}</div>}
    </form>
  );
};`,
                language: 'javascript',
                description: 'Client-Server ilişkisi ve HTTP istekleri örnekleri'
              }
            ],
            relatedProjects: ['api-app', 'crud-app', 'user-management'],
            resources: [
              {
                id: 'fetch-api',
                title: 'Fetch API',
                url: 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'react-custom-hooks-olusturma',
        name: 'REACT CUSTOM HOOKS OLUŞTURMA',
        icon: '🎣',
        description: 'React custom hooks oluşturma ve kullanımı',
        topics: [
          {
            id: 'custom-hook-olusturma',
            title: 'Custom Hook Oluşturma',
            description: 'React custom hooks oluşturma ve kullanımı',
            duration: '5 dakika',
            difficulty: 'medium',
            content: `# Custom Hook Oluşturma 🎣

React Custom Hooks, component logic'ini tekrar kullanılabilir fonksiyonlara dönüştürmenin güçlü bir yoludur. Custom hooks, state logic'ini component'ler arasında paylaşmanızı sağlar.

## 🎯 Custom Hook Nedir?

### **Custom Hook Tanımı:**
Custom hook, "use" ile başlayan JavaScript fonksiyonudur ve diğer hook'ları çağırabilir. Component logic'ini tekrar kullanılabilir hale getirir.

### **Custom Hook Kuralları:**
1. "use" ile başlamalı
2. Sadece React hook'larını çağırabilir
3. Component'in en üst seviyesinde çağrılmalı
4. Koşullu olarak çağrılmamalı

## 🔧 Basit Custom Hook Örnekleri

### **1. useCounter Hook:**
\`\`\`javascript
// useCounter custom hook
const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  
  const increment = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);
  
  const decrement = useCallback(() => {
    setCount(prev => prev - 1);
  }, []);
  
  const reset = useCallback(() => {
    setCount(initialValue);
  }, [initialValue]);
  
  return {
    count,
    increment,
    decrement,
    reset
  };
};

// Kullanım
const Counter = () => {
  const { count, increment, decrement, reset } = useCounter(0);
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};

const AnotherCounter = () => {
  const { count, increment } = useCounter(10);
  
  return (
    <div>
      <p>Another Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
};
\`\`\`

### **2. useLocalStorage Hook:**
\`\`\`javascript
// useLocalStorage custom hook
const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(\`Error reading localStorage key "\${key}":\`, error);
      return initialValue;
    }
  });
  
  const setValue = useCallback((value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(\`Error setting localStorage key "\${key}":\`, error);
    }
  }, [key, storedValue]);
  
  return [storedValue, setValue];
};

// Kullanım
const Settings = () => {
  const [theme, setTheme] = useLocalStorage('theme', 'light');
  const [language, setLanguage] = useLocalStorage('language', 'en');
  
  return (
    <div>
      <h2>Settings</h2>
      <div>
        <label>Theme:</label>
        <select value={theme} onChange={(e) => setTheme(e.target.value)}>
          <option value="light">Light</option>
          <option value="dark">Dark</option>
        </select>
      </div>
      <div>
        <label>Language:</label>
        <select value={language} onChange={(e) => setLanguage(e.target.value)}>
          <option value="en">English</option>
          <option value="tr">Türkçe</option>
        </select>
      </div>
    </div>
  );
};
\`\`\`

### **3. useToggle Hook:**
\`\`\`javascript
// useToggle custom hook
const useToggle = (initialValue = false) => {
  const [value, setValue] = useState(initialValue);
  
  const toggle = useCallback(() => {
    setValue(prev => !prev);
  }, []);
  
  const setTrue = useCallback(() => {
    setValue(true);
  }, []);
  
  const setFalse = useCallback(() => {
    setValue(false);
  }, []);
  
  return [value, { toggle, setTrue, setFalse }];
};

// Kullanım
const Modal = () => {
  const [isOpen, { toggle, setFalse }] = useToggle(false);
  
  return (
    <div>
      <button onClick={toggle}>
        {isOpen ? 'Close' : 'Open'} Modal
      </button>
      
      {isOpen && (
        <div className="modal">
          <h2>Modal Content</h2>
          <button onClick={setFalse}>Close</button>
        </div>
      )}
    </div>
  );
};

const ToggleButton = () => {
  const [isOn, { toggle }] = useToggle(false);
  
  return (
    <button 
      onClick={toggle}
      style={{ 
        backgroundColor: isOn ? 'green' : 'red',
        color: 'white'
      }}
    >
      {isOn ? 'ON' : 'OFF'}
    </button>
  );
};
\`\`\`

## 🎨 Gelişmiş Custom Hook Örnekleri

### **1. useApi Hook:**
\`\`\`javascript
// useApi custom hook
const useApi = (apiFunction, dependencies = []) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const execute = useCallback(async (...args) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await apiFunction(...args);
      setData(result);
      return result;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, dependencies);
  
  return { data, loading, error, execute };
};

// Kullanım
const UserList = () => {
  const { data: users, loading, error, execute: loadUsers } = useApi(
    () => fetch('/api/users').then(res => res.json())
  );
  
  useEffect(() => {
    loadUsers();
  }, [loadUsers]);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return (
    <div>
      {users?.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
};
\`\`\`

### **2. useDebounce Hook:**
\`\`\`javascript
// useDebounce custom hook
const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  
  return debouncedValue;
};

// Kullanım
const SearchInput = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const debouncedQuery = useDebounce(query, 300);
  
  useEffect(() => {
    if (debouncedQuery) {
      // API çağrısı yap
      fetch(\`/api/search?q=\${debouncedQuery}\`)
        .then(res => res.json())
        .then(data => setResults(data))
        .catch(err => console.error('Search error:', err));
    } else {
      setResults([]);
    }
  }, [debouncedQuery]);
  
  return (
    <div>
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search..."
      />
      <div>
        {results.map(result => (
          <div key={result.id}>{result.title}</div>
        ))}
      </div>
    </div>
  );
};
\`\`\`

### **3. usePrevious Hook:**
\`\`\`javascript
// usePrevious custom hook
const usePrevious = (value) => {
  const ref = useRef();
  
  useEffect(() => {
    ref.current = value;
  });
  
  return ref.current;
};

// Kullanım
const CounterWithPrevious = () => {
  const [count, setCount] = useState(0);
  const prevCount = usePrevious(count);
  
  return (
    <div>
      <h2>Current: {count}</h2>
      <h3>Previous: {prevCount}</h3>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};
\`\`\`

### **4. useWindowSize Hook:**
\`\`\`javascript
// useWindowSize custom hook
const useWindowSize = () => {
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });
  
  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    
    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  return windowSize;
};

// Kullanım
const ResponsiveComponent = () => {
  const { width, height } = useWindowSize();
  
  return (
    <div>
      <h2>Window Size</h2>
      <p>Width: {width}px</p>
      <p>Height: {height}px</p>
      {width < 768 ? (
        <p>Mobile view</p>
      ) : (
        <p>Desktop view</p>
      )}
    </div>
  );
};
\`\`\`

## 🎯 Custom Hook Best Practices

### **1. Tek Sorumluluk Prensibi:**
\`\`\`javascript
// ✅ İyi: Tek sorumluluk
const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  
  const increment = useCallback(() => setCount(prev => prev + 1), []);
  const decrement = useCallback(() => setCount(prev => prev - 1), []);
  
  return { count, increment, decrement };
};

// ❌ Kötü: Çok fazla sorumluluk
const useEverything = () => {
  const [count, setCount] = useState(0);
  const [user, setUser] = useState(null);
  const [theme, setTheme] = useState('light');
  // ... çok fazla state ve logic
};
\`\`\`

### **2. useCallback ve useMemo Kullanımı:**
\`\`\`javascript
// ✅ İyi: Optimize edilmiş
const useOptimizedCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  
  const increment = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);
  
  const decrement = useCallback(() => {
    setCount(prev => prev - 1);
  }, []);
  
  const isEven = useMemo(() => count % 2 === 0, [count]);
  
  return { count, increment, decrement, isEven };
};
\`\`\`

### **3. Error Handling:**
\`\`\`javascript
// ✅ İyi: Error handling ile
const useApiWithErrorHandling = (apiFunction) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const execute = useCallback(async (...args) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await apiFunction(...args);
      setData(result);
      return result;
    } catch (err) {
      const errorMessage = err.message || 'An error occurred';
      setError(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [apiFunction]);
  
  return { data, loading, error, execute };
};
\`\`\`

### **4. TypeScript ile Custom Hooks:**
\`\`\`typescript
// TypeScript ile custom hook
interface UseCounterReturn {
  count: number;
  increment: () => void;
  decrement: () => void;
  reset: () => void;
}

const useCounter = (initialValue: number = 0): UseCounterReturn => {
  const [count, setCount] = useState<number>(initialValue);
  
  const increment = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);
  
  const decrement = useCallback(() => {
    setCount(prev => prev - 1);
  }, []);
  
  const reset = useCallback(() => {
    setCount(initialValue);
  }, [initialValue]);
  
  return { count, increment, decrement, reset };
};
\`\`\`

## 🎨 Custom Hook Composition

### **Hook'ları Birleştirme:**
\`\`\`javascript
// useForm custom hook
const useForm = (initialValues = {}) => {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  
  const setValue = useCallback((name, value) => {
    setValues(prev => ({ ...prev, [name]: value }));
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  }, [errors]);
  
  const setFieldTouched = useCallback((name) => {
    setTouched(prev => ({ ...prev, [name]: true }));
  }, []);
  
  const validate = useCallback((validationRules) => {
    const newErrors = {};
    
    Object.keys(validationRules).forEach(field => {
      const rule = validationRules[field];
      const value = values[field];
      
      if (rule.required && !value) {
        newErrors[field] = rule.message || \`\${field} is required\`;
      } else if (rule.pattern && !rule.pattern.test(value)) {
        newErrors[field] = rule.message || \`\${field} is invalid\`;
      }
    });
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [values]);
  
  const reset = useCallback(() => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
  }, [initialValues]);
  
  return {
    values,
    errors,
    touched,
    setValue,
    setFieldTouched,
    validate,
    reset
  };
};

// Kullanım
const ContactForm = () => {
  const { values, errors, touched, setValue, setFieldTouched, validate, reset } = useForm({
    name: '',
    email: '',
    message: ''
  });
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    const isValid = validate({
      name: { required: true, message: 'Name is required' },
      email: { 
        required: true, 
        pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,
        message: 'Email is invalid' 
      },
      message: { required: true, message: 'Message is required' }
    });
    
    if (isValid) {
      console.log('Form submitted:', values);
      reset();
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <div>
        <input
          type="text"
          value={values.name}
          onChange={(e) => setValue('name', e.target.value)}
          onBlur={() => setFieldTouched('name')}
          placeholder="Name"
        />
        {touched.name && errors.name && <span>{errors.name}</span>}
      </div>
      
      <div>
        <input
          type="email"
          value={values.email}
          onChange={(e) => setValue('email', e.target.value)}
          onBlur={() => setFieldTouched('email')}
          placeholder="Email"
        />
        {touched.email && errors.email && <span>{errors.email}</span>}
      </div>
      
      <div>
        <textarea
          value={values.message}
          onChange={(e) => setValue('message', e.target.value)}
          onBlur={() => setFieldTouched('message')}
          placeholder="Message"
        />
        {touched.message && errors.message && <span>{errors.message}</span>}
      </div>
      
      <button type="submit">Submit</button>
    </form>
  );
};
\`\`\`

## 🎯 Sonuç

Custom Hook Oluşturma:
- ✅ **Tekrar Kullanılabilirlik** - Logic'i component'ler arasında paylaş
- ✅ **Separation of Concerns** - UI ve logic'i ayır
- ✅ **Testability** - Hook'ları ayrı ayrı test et
- ✅ **Composition** - Hook'ları birleştir
- ✅ **Performance** - useCallback ve useMemo ile optimize et
- ✅ **Type Safety** - TypeScript ile tip güvenliği

Custom hooks, React uygulamalarında kod tekrarını azaltır ve maintainability'yi artırır.`,
            codeExamples: [
              {
                id: 'custom-hooks-examples',
                title: 'Custom Hook Örnekleri',
                code: `// useCounter Hook
const useCounter = (initialValue = 0) => {
  const [count, setCount] = useState(initialValue);
  
  const increment = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);
  
  const decrement = useCallback(() => {
    setCount(prev => prev - 1);
  }, []);
  
  const reset = useCallback(() => {
    setCount(initialValue);
  }, [initialValue]);
  
  return { count, increment, decrement, reset };
};

// useLocalStorage Hook
const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(\`Error reading localStorage key "\${key}":\`, error);
      return initialValue;
    }
  });
  
  const setValue = useCallback((value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(\`Error setting localStorage key "\${key}":\`, error);
    }
  }, [key, storedValue]);
  
  return [storedValue, setValue];
};

// useToggle Hook
const useToggle = (initialValue = false) => {
  const [value, setValue] = useState(initialValue);
  
  const toggle = useCallback(() => {
    setValue(prev => !prev);
  }, []);
  
  const setTrue = useCallback(() => {
    setValue(true);
  }, []);
  
  const setFalse = useCallback(() => {
    setValue(false);
  }, []);
  
  return [value, { toggle, setTrue, setFalse }];
};

// useApi Hook
const useApi = (apiFunction, dependencies = []) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const execute = useCallback(async (...args) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await apiFunction(...args);
      setData(result);
      return result;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, dependencies);
  
  return { data, loading, error, execute };
};

// useDebounce Hook
const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  
  return debouncedValue;
};

// Kullanım örnekleri
const Counter = () => {
  const { count, increment, decrement, reset } = useCounter(0);
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};

const Settings = () => {
  const [theme, setTheme] = useLocalStorage('theme', 'light');
  
  return (
    <div>
      <label>Theme:</label>
      <select value={theme} onChange={(e) => setTheme(e.target.value)}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
      </select>
    </div>
  );
};

const Modal = () => {
  const [isOpen, { toggle }] = useToggle(false);
  
  return (
    <div>
      <button onClick={toggle}>
        {isOpen ? 'Close' : 'Open'} Modal
      </button>
      
      {isOpen && (
        <div className="modal">
          <h2>Modal Content</h2>
        </div>
      )}
    </div>
  );
};

const UserList = () => {
  const { data: users, loading, error, execute: loadUsers } = useApi(
    () => fetch('/api/users').then(res => res.json())
  );
  
  useEffect(() => {
    loadUsers();
  }, [loadUsers]);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return (
    <div>
      {users?.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
};

const SearchInput = () => {
  const [query, setQuery] = useState('');
  const debouncedQuery = useDebounce(query, 300);
  
  useEffect(() => {
    if (debouncedQuery) {
      // API çağrısı yap
      console.log('Searching for:', debouncedQuery);
    }
  }, [debouncedQuery]);
  
  return (
    <input
      type="text"
      value={query}
      onChange={(e) => setQuery(e.target.value)}
      placeholder="Search..."
    />
  );
};`,
                language: 'javascript',
                description: 'React Custom Hook örnekleri'
              }
            ],
            relatedProjects: ['custom-hooks-app', 'form-app', 'api-app'],
            resources: [
              {
                id: 'react-custom-hooks',
                title: 'React Custom Hooks',
                url: 'https://react.dev/learn/reusing-logic-with-custom-hooks',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'redux-ile-state-management',
        name: 'REDUX İLE STATE MANAGEMENT',
        icon: '🔄',
        description: 'Redux ile global state yönetimi',
        topics: [
          {
            id: 'redux-nedir',
            title: 'Redux Nedir?',
            description: 'Redux state management kütüphanesi ve temel kavramları',
            duration: '7 dakika',
            difficulty: 'hard',
            content: `# Redux Nedir? 🔄

Redux, JavaScript uygulamaları için öngörülebilir bir state container'ıdır. React uygulamalarında global state yönetimi için yaygın olarak kullanılır.

## 🎯 Redux Nedir?

### **Redux Tanımı:**
Redux, uygulamanın tüm state'ini tek bir yerde (store) tutan ve bu state'e erişimi kontrol eden bir kütüphanedir. State değişiklikleri sadece action'lar aracılığıyla yapılır.

### **Redux'un Temel Prensipleri:**
1. **Single Source of Truth** - Tüm state tek bir store'da
2. **State is Read-Only** - State sadece action dispatch ederek değiştirilebilir
3. **Changes are Made with Pure Functions** - Reducer'lar pure function'dır

## 🔧 Redux Mimarisi

### **Redux Data Flow:**
\`\`\`javascript
// Redux Data Flow
// 1. Component dispatch action
// 2. Action goes to reducer
// 3. Reducer updates state
// 4. Component re-renders with new state

// Action
const incrementAction = {
  type: 'INCREMENT',
  payload: 1
};

// Reducer
const counterReducer = (state = { count: 0 }, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + action.payload };
    case 'DECREMENT':
      return { ...state, count: state.count - action.payload };
    default:
      return state;
  }
};

// Store
import { createStore } from 'redux';
const store = createStore(counterReducer);

// Component
const Counter = () => {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => dispatch(incrementAction)}>+</button>
      <button onClick={() => dispatch({ type: 'DECREMENT', payload: 1 })}>-</button>
    </div>
  );
};
\`\`\`

## 🎨 Redux Temel Kavramları

### **1. Store:**
\`\`\`javascript
// Store oluşturma
import { createStore } from 'redux';

const initialState = {
  count: 0,
  user: null,
  todos: []
};

const rootReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    case 'SET_USER':
      return { ...state, user: action.payload };
    case 'ADD_TODO':
      return { ...state, todos: [...state.todos, action.payload] };
    default:
      return state;
  }
};

const store = createStore(rootReducer);

// Store'a erişim
console.log(store.getState()); // { count: 0, user: null, todos: [] }

// State değişikliklerini dinleme
store.subscribe(() => {
  console.log('State changed:', store.getState());
});
\`\`\`

### **2. Actions:**
\`\`\`javascript
// Action Creators
const increment = () => ({
  type: 'INCREMENT'
});

const decrement = () => ({
  type: 'DECREMENT'
});

const setUser = (user) => ({
  type: 'SET_USER',
  payload: user
});

const addTodo = (todo) => ({
  type: 'ADD_TODO',
  payload: todo
});

// Async Action Creator (with Redux Thunk)
const fetchUser = (userId) => {
  return async (dispatch) => {
    dispatch({ type: 'FETCH_USER_START' });
    
    try {
      const response = await fetch(\`/api/users/\${userId}\`);
      const user = await response.json();
      dispatch({ type: 'FETCH_USER_SUCCESS', payload: user });
    } catch (error) {
      dispatch({ type: 'FETCH_USER_ERROR', payload: error.message });
    }
  };
};
\`\`\`

### **3. Reducers:**
\`\`\`javascript
// Counter Reducer
const counterReducer = (state = { count: 0 }, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    case 'DECREMENT':
      return { ...state, count: state.count - 1 };
    case 'RESET':
      return { ...state, count: 0 };
    default:
      return state;
  }
};

// User Reducer
const userReducer = (state = { user: null, loading: false, error: null }, action) => {
  switch (action.type) {
    case 'FETCH_USER_START':
      return { ...state, loading: true, error: null };
    case 'FETCH_USER_SUCCESS':
      return { ...state, loading: false, user: action.payload };
    case 'FETCH_USER_ERROR':
      return { ...state, loading: false, error: action.payload };
    case 'LOGOUT':
      return { ...state, user: null };
    default:
      return state;
  }
};

// Todo Reducer
const todoReducer = (state = { todos: [], loading: false }, action) => {
  switch (action.type) {
    case 'ADD_TODO':
      return {
        ...state,
        todos: [...state.todos, { ...action.payload, id: Date.now() }]
      };
    case 'TOGGLE_TODO':
      return {
        ...state,
        todos: state.todos.map(todo =>
          todo.id === action.payload
            ? { ...todo, completed: !todo.completed }
            : todo
        )
      };
    case 'DELETE_TODO':
      return {
        ...state,
        todos: state.todos.filter(todo => todo.id !== action.payload)
      };
    default:
      return state;
  }
};
\`\`\`

### **4. Combine Reducers:**
\`\`\`javascript
// Root Reducer
import { combineReducers } from 'redux';

const rootReducer = combineReducers({
  counter: counterReducer,
  user: userReducer,
  todos: todoReducer
});

const store = createStore(rootReducer);

// State yapısı:
// {
//   counter: { count: 0 },
//   user: { user: null, loading: false, error: null },
//   todos: { todos: [], loading: false }
// }
\`\`\`

## 🎯 React-Redux Kullanımı

### **Provider Setup:**
\`\`\`javascript
// App.js
import React from 'react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import rootReducer from './reducers';
import Counter from './components/Counter';

const store = createStore(rootReducer);

const App = () => {
  return (
    <Provider store={store}>
      <div className="App">
        <Counter />
      </div>
    </Provider>
  );
};

export default App;
\`\`\`

### **useSelector ve useDispatch:**
\`\`\`javascript
// Counter Component
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, reset } from '../actions/counterActions';

const Counter = () => {
  const count = useSelector(state => state.counter.count);
  const dispatch = useDispatch();
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => dispatch(increment())}>+</button>
      <button onClick={() => dispatch(decrement())}>-</button>
      <button onClick={() => dispatch(reset())}>Reset</button>
    </div>
  );
};

export default Counter;
\`\`\`

### **Multiple State Values:**
\`\`\`javascript
// UserProfile Component
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchUser, logout } from '../actions/userActions';

const UserProfile = () => {
  const { user, loading, error } = useSelector(state => state.user);
  const dispatch = useDispatch();
  
  useEffect(() => {
    dispatch(fetchUser(1));
  }, [dispatch]);
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return (
    <div>
      {user ? (
        <div>
          <h2>Welcome, {user.name}!</h2>
          <p>Email: {user.email}</p>
          <button onClick={() => dispatch(logout())}>Logout</button>
        </div>
      ) : (
        <div>No user logged in</div>
      )}
    </div>
  );
};

export default UserProfile;
\`\`\`

## 🎨 Redux Toolkit (RTK)

### **Modern Redux with RTK:**
\`\`\`javascript
// store.js
import { configureStore, createSlice } from '@reduxjs/toolkit';

// Counter Slice
const counterSlice = createSlice({
  name: 'counter',
  initialState: { value: 0 },
  reducers: {
    increment: (state) => {
      state.value += 1; // Immer kullanıldığı için mutable
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    }
  }
});

// User Slice
const userSlice = createSlice({
  name: 'user',
  initialState: { user: null, loading: false, error: null },
  reducers: {
    setUser: (state, action) => {
      state.user = action.payload;
    },
    setLoading: (state, action) => {
      state.loading = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    }
  }
});

// Store
export const store = configureStore({
  reducer: {
    counter: counterSlice.reducer,
    user: userSlice.reducer
  }
});

// Actions
export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export const { setUser, setLoading, setError } = userSlice.actions;
\`\`\`

### **Async Actions with RTK:**
\`\`\`javascript
// userSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Async Thunk
export const fetchUser = createAsyncThunk(
  'user/fetchUser',
  async (userId, { rejectWithValue }) => {
    try {
      const response = await fetch(\`/api/users/\${userId}\`);
      if (!response.ok) {
        throw new Error('Failed to fetch user');
      }
      return await response.json();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const userSlice = createSlice({
  name: 'user',
  initialState: { user: null, loading: false, error: null },
  reducers: {
    clearUser: (state) => {
      state.user = null;
      state.error = null;
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUser.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
      })
      .addCase(fetchUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  }
});

export const { clearUser } = userSlice.actions;
export default userSlice.reducer;
\`\`\`

## 🎯 Redux vs Context API

### **Redux Avantajları:**
\`\`\`javascript
// Redux - Daha güçlü debugging
// Redux DevTools ile state değişikliklerini takip et
// Time-travel debugging
// Action replay
// State persistence

// Redux - Daha iyi performance
// useSelector ile sadece gerekli state'i subscribe et
const UserName = () => {
  const name = useSelector(state => state.user.name); // Sadece name değiştiğinde re-render
  return <div>{name}</div>;
};

// Redux - Daha iyi testability
// Pure functions olarak reducer'ları test et
// Action creator'ları test et
// Store'u test et
\`\`\`

### **Context API Avantajları:**
\`\`\`javascript
// Context API - Daha basit setup
const UserContext = createContext();

const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

// Context API - Daha az boilerplate
// Redux'a göre daha az kod
// Daha hızlı prototipleme
\`\`\`

## 🎯 Redux Best Practices

### **1. Action Types:**
\`\`\`javascript
// actionTypes.js
export const COUNTER_ACTIONS = {
  INCREMENT: 'COUNTER/INCREMENT',
  DECREMENT: 'COUNTER/DECREMENT',
  RESET: 'COUNTER/RESET'
};

export const USER_ACTIONS = {
  FETCH_START: 'USER/FETCH_START',
  FETCH_SUCCESS: 'USER/FETCH_SUCCESS',
  FETCH_ERROR: 'USER/FETCH_ERROR'
};
\`\`\`

### **2. Selectors:**
\`\`\`javascript
// selectors.js
export const getCounter = (state) => state.counter.count;
export const getUser = (state) => state.user.user;
export const getUserLoading = (state) => state.user.loading;
export const getUserError = (state) => state.user.error;

// Memoized selectors with reselect
import { createSelector } from 'reselect';

const getTodos = (state) => state.todos.todos;
const getFilter = (state) => state.todos.filter;

export const getFilteredTodos = createSelector(
  [getTodos, getFilter],
  (todos, filter) => {
    switch (filter) {
      case 'active':
        return todos.filter(todo => !todo.completed);
      case 'completed':
        return todos.filter(todo => todo.completed);
      default:
        return todos;
    }
  }
);
\`\`\`

### **3. Middleware:**
\`\`\`javascript
// middleware.js
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import logger from 'redux-logger';

const store = createStore(
  rootReducer,
  applyMiddleware(thunk, logger)
);

// Custom middleware
const customMiddleware = (store) => (next) => (action) => {
  console.log('Action dispatched:', action);
  const result = next(action);
  console.log('New state:', store.getState());
  return result;
};
\`\`\`

## 🎯 Sonuç

Redux:
- ✅ **Predictable State** - Öngörülebilir state yönetimi
- ✅ **Centralized State** - Merkezi state yönetimi
- ✅ **Time Travel Debugging** - Redux DevTools ile debugging
- ✅ **Middleware Support** - Async actions ve logging
- ✅ **Testability** - Pure functions ile kolay test
- ✅ **Scalability** - Büyük uygulamalar için uygun

Redux, karmaşık state yönetimi gerektiren büyük React uygulamaları için güçlü bir çözümdür.`,
            codeExamples: [
              {
                id: 'redux-examples',
                title: 'Redux Örnekleri',
                code: `// store.js
import { createStore, combineReducers } from 'redux';

// Counter Reducer
const counterReducer = (state = { count: 0 }, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    case 'DECREMENT':
      return { ...state, count: state.count - 1 };
    case 'RESET':
      return { ...state, count: 0 };
    default:
      return state;
  }
};

// User Reducer
const userReducer = (state = { user: null, loading: false }, action) => {
  switch (action.type) {
    case 'SET_USER':
      return { ...state, user: action.payload };
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
    case 'LOGOUT':
      return { ...state, user: null };
    default:
      return state;
  }
};

// Root Reducer
const rootReducer = combineReducers({
  counter: counterReducer,
  user: userReducer
});

// Store
const store = createStore(rootReducer);

// Actions
export const increment = () => ({ type: 'INCREMENT' });
export const decrement = () => ({ type: 'DECREMENT' });
export const reset = () => ({ type: 'RESET' });
export const setUser = (user) => ({ type: 'SET_USER', payload: user });
export const setLoading = (loading) => ({ type: 'SET_LOADING', payload: loading });
export const logout = () => ({ type: 'LOGOUT' });

export default store;

// App.js
import React from 'react';
import { Provider } from 'react-redux';
import store from './store';
import Counter from './components/Counter';
import UserProfile from './components/UserProfile';

const App = () => {
  return (
    <Provider store={store}>
      <div className="App">
        <Counter />
        <UserProfile />
      </div>
    </Provider>
  );
};

export default App;

// Counter.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, reset } from '../store';

const Counter = () => {
  const count = useSelector(state => state.counter.count);
  const dispatch = useDispatch();
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => dispatch(increment())}>+</button>
      <button onClick={() => dispatch(decrement())}>-</button>
      <button onClick={() => dispatch(reset())}>Reset</button>
    </div>
  );
};

export default Counter;

// UserProfile.js
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setUser, setLoading, logout } from '../store';

const UserProfile = () => {
  const { user, loading } = useSelector(state => state.user);
  const dispatch = useDispatch();
  
  useEffect(() => {
    const fetchUser = async () => {
      dispatch(setLoading(true));
      try {
        const response = await fetch('/api/user');
        const userData = await response.json();
        dispatch(setUser(userData));
      } catch (error) {
        console.error('Failed to fetch user:', error);
      } finally {
        dispatch(setLoading(false));
      }
    };
    
    fetchUser();
  }, [dispatch]);
  
  if (loading) return <div>Loading...</div>;
  
  return (
    <div>
      {user ? (
        <div>
          <h2>Welcome, {user.name}!</h2>
          <p>Email: {user.email}</p>
          <button onClick={() => dispatch(logout())}>Logout</button>
        </div>
      ) : (
        <div>No user logged in</div>
      )}
    </div>
  );
};

export default UserProfile;

// Redux Toolkit Example
import { createSlice, configureStore } from '@reduxjs/toolkit';

const counterSlice = createSlice({
  name: 'counter',
  initialState: { value: 0 },
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    }
  }
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

export const store = configureStore({
  reducer: {
    counter: counterSlice.reducer
  }
});`,
                language: 'javascript',
                description: 'Redux state management örnekleri'
              }
            ],
            relatedProjects: ['redux-app', 'todo-redux-app', 'ecommerce-redux'],
            resources: [
              {
                id: 'redux-docs',
                title: 'Redux Documentation',
                url: 'https://redux.js.org/',
                type: 'documentation'
              }
            ]
          }
        ]
      },
      {
        id: 'react-router-ile-multi-page-spa',
        name: 'REACT ROUTER İLE MULTİ PAGE SPA',
        icon: '🛣️',
        description: 'React Router ile single page application routing',
        topics: [
          {
            id: 'single-page-application-ve-react-multi-page',
            title: 'Single-Page Application ve React Multi-Page',
            description: 'SPA kavramı ve React Router ile sayfa yönlendirme',
            duration: '9 dakika',
            difficulty: 'medium',
            content: `# Single-Page Application ve React Multi-Page 🛣️

React Router, React uygulamalarında client-side routing sağlayan güçlü bir kütüphanedir. Single Page Application (SPA) mimarisinde sayfa geçişlerini yönetir.

## 🎯 Single-Page Application (SPA) Nedir?

### **SPA Tanımı:**
Single Page Application, tek bir HTML sayfası yükleyen ve kullanıcı etkileşimlerine göre içeriği dinamik olarak güncelleyen web uygulamasıdır.

### **SPA vs Traditional Web:**
\`\`\`javascript
// Traditional Web (Multi-Page)
// Her sayfa için ayrı HTML dosyası
// Sayfa geçişlerinde tam sayfa yenileme
// Server'dan yeni HTML alınır

// SPA (Single-Page)
// Tek HTML dosyası
// JavaScript ile dinamik içerik değişimi
// Sayfa geçişlerinde sadece gerekli kısımlar güncellenir
\`\`\`

### **SPA Avantajları:**
- ✅ Daha hızlı sayfa geçişleri
- ✅ Daha iyi kullanıcı deneyimi
- ✅ Daha az server yükü
- ✅ Offline çalışabilme
- ✅ Mobil uygulama benzeri deneyim

## 🔧 React Router Temel Kavramları

### **1. BrowserRouter:**
\`\`\`javascript
// App.js
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import Contact from './pages/Contact';

const App = () => {
  return (
    <BrowserRouter>
      <div className="App">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<About />} />
          <Route path="/contact" element={<Contact />} />
        </Routes>
      </div>
    </BrowserRouter>
  );
};

export default App;
\`\`\`

### **2. Link ve NavLink:**
\`\`\`javascript
// Navigation.js
import React from 'react';
import { Link, NavLink } from 'react-router-dom';

const Navigation = () => {
  return (
    <nav>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/about">About</Link>
        </li>
        <li>
          <NavLink 
            to="/contact" 
            className={({ isActive }) => isActive ? 'active' : ''}
          >
            Contact
          </NavLink>
        </li>
      </ul>
    </nav>
  );
};

export default Navigation;
\`\`\`

### **3. useNavigate Hook:**
\`\`\`javascript
// LoginForm.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const LoginForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // Login logic
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });
      
      if (response.ok) {
        // Login başarılı, dashboard'a yönlendir
        navigate('/dashboard');
      } else {
        alert('Login failed');
      }
    } catch (error) {
      console.error('Login error:', error);
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
        required
      />
      <button type="submit">Login</button>
    </form>
  );
};

export default LoginForm;
\`\`\`

## 🎨 Nested Routes

### **Layout ve Nested Routes:**
\`\`\`javascript
// App.js
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Layout from './components/Layout';
import Home from './pages/Home';
import About from './pages/About';
import Products from './pages/Products';
import ProductDetail from './pages/ProductDetail';
import Contact from './pages/Contact';

const App = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="about" element={<About />} />
          <Route path="products" element={<Products />} />
          <Route path="products/:id" element={<ProductDetail />} />
          <Route path="contact" element={<Contact />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
};

export default App;

// Layout.js
import React from 'react';
import { Outlet } from 'react-router-dom';
import Navigation from './Navigation';
import Footer from './Footer';

const Layout = () => {
  return (
    <div className="layout">
      <Navigation />
      <main>
        <Outlet /> {/* Nested routes burada render edilir */}
      </main>
      <Footer />
    </div>
  );
};

export default Layout;
\`\`\`

## 🎯 Dynamic Routes

### **URL Parameters:**
\`\`\`javascript
// UserDetail.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

const UserDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch(\`/api/users/\${id}\`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Failed to fetch user:', error);
        navigate('/users'); // Hata durumunda user listesine yönlendir
      } finally {
        setLoading(false);
      }
    };
    
    fetchUser();
  }, [id, navigate]);
  
  if (loading) return <div>Loading...</div>;
  if (!user) return <div>User not found</div>;
  
  return (
    <div>
      <h1>User Detail</h1>
      <h2>{user.name}</h2>
      <p>Email: {user.email}</p>
      <p>Phone: {user.phone}</p>
      <button onClick={() => navigate('/users')}>Back to Users</button>
    </div>
  );
};

export default UserDetail;
\`\`\`

## 🎯 Sonuç

React Router ile SPA:
- ✅ **Client-side Routing** - Sayfa yenileme olmadan navigasyon
- ✅ **Nested Routes** - Layout ve sayfa organizasyonu
- ✅ **Dynamic Routes** - URL parametreleri ve query strings
- ✅ **Route Guards** - Authentication ve authorization
- ✅ **Error Handling** - 404 ve error sayfaları
- ✅ **Programmatic Navigation** - JavaScript ile sayfa yönlendirme

React Router, modern React uygulamalarında routing ihtiyaçlarını karşılayan güçlü ve esnek bir çözümdür.`,
            codeExamples: [
              {
                id: 'react-router-examples',
                title: 'React Router Örnekleri',
                code: `// App.js
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Layout from './components/Layout';
import Home from './pages/Home';
import About from './pages/About';
import Products from './pages/Products';
import ProductDetail from './pages/ProductDetail';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import NotFound from './pages/NotFound';

const App = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="about" element={<About />} />
          <Route path="products" element={<Products />} />
          <Route path="products/:id" element={<ProductDetail />} />
        </Route>
        <Route path="/login" element={<Login />} />
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </BrowserRouter>
  );
};

export default App;

// Layout.js
import React from 'react';
import { Outlet, Link } from 'react-router-dom';

const Layout = () => {
  return (
    <div className="layout">
      <nav>
        <Link to="/">Home</Link>
        <Link to="/about">About</Link>
        <Link to="/products">Products</Link>
      </nav>
      <main>
        <Outlet />
      </main>
    </div>
  );
};

export default Layout;

// ProductDetail.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

const ProductDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const response = await fetch(\`/api/products/\${id}\`);
        const productData = await response.json();
        setProduct(productData);
      } catch (error) {
        console.error('Failed to fetch product:', error);
        navigate('/products');
      } finally {
        setLoading(false);
      }
    };
    
    fetchProduct();
  }, [id, navigate]);
  
  if (loading) return <div>Loading...</div>;
  if (!product) return <div>Product not found</div>;
  
  return (
    <div>
      <h1>{product.name}</h1>
      <p>Price: \${product.price}</p>
      <p>{product.description}</p>
      <button onClick={() => navigate('/products')}>
        Back to Products
      </button>
    </div>
  );
};

export default ProductDetail;`,
                language: 'javascript',
                description: 'React Router ile SPA routing örnekleri'
              }
            ],
            relatedProjects: ['spa-app', 'ecommerce-router', 'admin-panel'],
            resources: [
              {
                id: 'react-router-docs',
                title: 'React Router Documentation',
                url: 'https://reactrouter.com/',
                type: 'documentation'
              }
            ]
          }
        ]
      }
    ]
  }
];

export default roadmapData;
